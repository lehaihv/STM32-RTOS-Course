
Cnt_semaphores_lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08006a64  08006a64  00016a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006c18  08006c18  00016c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006c20  08006c20  00016c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006c24  08006c24  00016c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  20000000  08006c28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002954  2000006c  08006c94  0002006c  2**2
                  ALLOC
  8 ._user_heap_stack 00002000  200029c0  08006c94  000229c0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000148ba  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002be9  00000000  00000000  00034956  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000012d8  00000000  00000000  00037540  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001190  00000000  00000000  00038818  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00008a0e  00000000  00000000  000399a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00006427  00000000  00000000  000423b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000487dd  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000055fc  00000000  00000000  0004885c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         00000084  00000000  00000000  0004de58  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      00000117  00000000  00000000  0004dedc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a4c 	.word	0x08006a4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08006a4c 	.word	0x08006a4c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000586:	2300      	movs	r3, #0
 8000588:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800058a:	2003      	movs	r0, #3
 800058c:	f000 f8d1 	bl	8000732 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000590:	2000      	movs	r0, #0
 8000592:	f005 fa13 	bl	80059bc <HAL_InitTick>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d002      	beq.n	80005a2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800059c:	2301      	movs	r3, #1
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	e001      	b.n	80005a6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005a2:	f005 f99f 	bl	80058e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005a6:	79fb      	ldrb	r3, [r7, #7]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  uwTick++;
 80005b4:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <HAL_IncTick+0x18>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	3301      	adds	r3, #1
 80005ba:	4a03      	ldr	r2, [pc, #12]	; (80005c8 <HAL_IncTick+0x18>)
 80005bc:	6013      	str	r3, [r2, #0]
}
 80005be:	bf00      	nop
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	200028f0 	.word	0x200028f0

080005cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  return uwTick;
 80005d0:	4b03      	ldr	r3, [pc, #12]	; (80005e0 <HAL_GetTick+0x14>)
 80005d2:	681b      	ldr	r3, [r3, #0]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	200028f0 	.word	0x200028f0

080005e4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f003 0307 	and.w	r3, r3, #7
 80005f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <NVIC_SetPriorityGrouping+0x44>)
 80005f6:	68db      	ldr	r3, [r3, #12]
 80005f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005fa:	68ba      	ldr	r2, [r7, #8]
 80005fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000600:	4013      	ands	r3, r2
 8000602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800060c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000616:	4a04      	ldr	r2, [pc, #16]	; (8000628 <NVIC_SetPriorityGrouping+0x44>)
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	60d3      	str	r3, [r2, #12]
}
 800061c:	bf00      	nop
 800061e:	3714      	adds	r7, #20
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000630:	4b04      	ldr	r3, [pc, #16]	; (8000644 <NVIC_GetPriorityGrouping+0x18>)
 8000632:	68db      	ldr	r3, [r3, #12]
 8000634:	0a1b      	lsrs	r3, r3, #8
 8000636:	f003 0307 	and.w	r3, r3, #7
}
 800063a:	4618      	mov	r0, r3
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000652:	4909      	ldr	r1, [pc, #36]	; (8000678 <NVIC_EnableIRQ+0x30>)
 8000654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000658:	095b      	lsrs	r3, r3, #5
 800065a:	79fa      	ldrb	r2, [r7, #7]
 800065c:	f002 021f 	and.w	r2, r2, #31
 8000660:	2001      	movs	r0, #1
 8000662:	fa00 f202 	lsl.w	r2, r0, r2
 8000666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	e000e100 	.word	0xe000e100

0800067c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	6039      	str	r1, [r7, #0]
 8000686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068c:	2b00      	cmp	r3, #0
 800068e:	da0b      	bge.n	80006a8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000690:	490d      	ldr	r1, [pc, #52]	; (80006c8 <NVIC_SetPriority+0x4c>)
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	f003 030f 	and.w	r3, r3, #15
 8000698:	3b04      	subs	r3, #4
 800069a:	683a      	ldr	r2, [r7, #0]
 800069c:	b2d2      	uxtb	r2, r2
 800069e:	0112      	lsls	r2, r2, #4
 80006a0:	b2d2      	uxtb	r2, r2
 80006a2:	440b      	add	r3, r1
 80006a4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a6:	e009      	b.n	80006bc <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a8:	4908      	ldr	r1, [pc, #32]	; (80006cc <NVIC_SetPriority+0x50>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	683a      	ldr	r2, [r7, #0]
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	0112      	lsls	r2, r2, #4
 80006b4:	b2d2      	uxtb	r2, r2
 80006b6:	440b      	add	r3, r1
 80006b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	e000ed00 	.word	0xe000ed00
 80006cc:	e000e100 	.word	0xe000e100

080006d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b089      	sub	sp, #36	; 0x24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	f003 0307 	and.w	r3, r3, #7
 80006e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e4:	69fb      	ldr	r3, [r7, #28]
 80006e6:	f1c3 0307 	rsb	r3, r3, #7
 80006ea:	2b04      	cmp	r3, #4
 80006ec:	bf28      	it	cs
 80006ee:	2304      	movcs	r3, #4
 80006f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	3304      	adds	r3, #4
 80006f6:	2b06      	cmp	r3, #6
 80006f8:	d902      	bls.n	8000700 <NVIC_EncodePriority+0x30>
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	3b03      	subs	r3, #3
 80006fe:	e000      	b.n	8000702 <NVIC_EncodePriority+0x32>
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000704:	2201      	movs	r2, #1
 8000706:	69bb      	ldr	r3, [r7, #24]
 8000708:	fa02 f303 	lsl.w	r3, r2, r3
 800070c:	1e5a      	subs	r2, r3, #1
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	401a      	ands	r2, r3
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000716:	2101      	movs	r1, #1
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	fa01 f303 	lsl.w	r3, r1, r3
 800071e:	1e59      	subs	r1, r3, #1
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000724:	4313      	orrs	r3, r2
         );
}
 8000726:	4618      	mov	r0, r3
 8000728:	3724      	adds	r7, #36	; 0x24
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	b082      	sub	sp, #8
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f7ff ff52 	bl	80005e4 <NVIC_SetPriorityGrouping>
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	607a      	str	r2, [r7, #4]
 8000754:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800075a:	f7ff ff67 	bl	800062c <NVIC_GetPriorityGrouping>
 800075e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	68b9      	ldr	r1, [r7, #8]
 8000764:	6978      	ldr	r0, [r7, #20]
 8000766:	f7ff ffb3 	bl	80006d0 <NVIC_EncodePriority>
 800076a:	4602      	mov	r2, r0
 800076c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000770:	4611      	mov	r1, r2
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ff82 	bl	800067c <NVIC_SetPriority>
}
 8000778:	bf00      	nop
 800077a:	3718      	adds	r7, #24
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800078a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ff5a 	bl	8000648 <NVIC_EnableIRQ>
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800079c:	b480      	push	{r7}
 800079e:	b087      	sub	sp, #28
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007aa:	e17f      	b.n	8000aac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	2101      	movs	r1, #1
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	fa01 f303 	lsl.w	r3, r1, r3
 80007b8:	4013      	ands	r3, r2
 80007ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	f000 8171 	beq.w	8000aa6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	2b02      	cmp	r3, #2
 80007ca:	d003      	beq.n	80007d4 <HAL_GPIO_Init+0x38>
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	2b12      	cmp	r3, #18
 80007d2:	d123      	bne.n	800081c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	08da      	lsrs	r2, r3, #3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3208      	adds	r2, #8
 80007dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	f003 0307 	and.w	r3, r3, #7
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	220f      	movs	r2, #15
 80007ec:	fa02 f303 	lsl.w	r3, r2, r3
 80007f0:	43db      	mvns	r3, r3
 80007f2:	693a      	ldr	r2, [r7, #16]
 80007f4:	4013      	ands	r3, r2
 80007f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	691a      	ldr	r2, [r3, #16]
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	f003 0307 	and.w	r3, r3, #7
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	fa02 f303 	lsl.w	r3, r2, r3
 8000808:	693a      	ldr	r2, [r7, #16]
 800080a:	4313      	orrs	r3, r2
 800080c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	08da      	lsrs	r2, r3, #3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	3208      	adds	r2, #8
 8000816:	6939      	ldr	r1, [r7, #16]
 8000818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	2203      	movs	r2, #3
 8000828:	fa02 f303 	lsl.w	r3, r2, r3
 800082c:	43db      	mvns	r3, r3
 800082e:	693a      	ldr	r2, [r7, #16]
 8000830:	4013      	ands	r3, r2
 8000832:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	f003 0203 	and.w	r2, r3, #3
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	fa02 f303 	lsl.w	r3, r2, r3
 8000844:	693a      	ldr	r2, [r7, #16]
 8000846:	4313      	orrs	r3, r2
 8000848:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	693a      	ldr	r2, [r7, #16]
 800084e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d00b      	beq.n	8000870 <HAL_GPIO_Init+0xd4>
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	2b02      	cmp	r3, #2
 800085e:	d007      	beq.n	8000870 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000864:	2b11      	cmp	r3, #17
 8000866:	d003      	beq.n	8000870 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	2b12      	cmp	r3, #18
 800086e:	d130      	bne.n	80008d2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	689b      	ldr	r3, [r3, #8]
 8000874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	2203      	movs	r2, #3
 800087c:	fa02 f303 	lsl.w	r3, r2, r3
 8000880:	43db      	mvns	r3, r3
 8000882:	693a      	ldr	r2, [r7, #16]
 8000884:	4013      	ands	r3, r2
 8000886:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	68da      	ldr	r2, [r3, #12]
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	fa02 f303 	lsl.w	r3, r2, r3
 8000894:	693a      	ldr	r2, [r7, #16]
 8000896:	4313      	orrs	r3, r2
 8000898:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	693a      	ldr	r2, [r7, #16]
 800089e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008a6:	2201      	movs	r2, #1
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	43db      	mvns	r3, r3
 80008b0:	693a      	ldr	r2, [r7, #16]
 80008b2:	4013      	ands	r3, r2
 80008b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	091b      	lsrs	r3, r3, #4
 80008bc:	f003 0201 	and.w	r2, r3, #1
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	f003 0303 	and.w	r3, r3, #3
 80008da:	2b03      	cmp	r3, #3
 80008dc:	d118      	bne.n	8000910 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80008e4:	2201      	movs	r2, #1
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	43db      	mvns	r3, r3
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	4013      	ands	r3, r2
 80008f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	08db      	lsrs	r3, r3, #3
 80008fa:	f003 0201 	and.w	r2, r3, #1
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	fa02 f303 	lsl.w	r3, r2, r3
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	4313      	orrs	r3, r2
 8000908:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	693a      	ldr	r2, [r7, #16]
 800090e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	2203      	movs	r2, #3
 800091c:	fa02 f303 	lsl.w	r3, r2, r3
 8000920:	43db      	mvns	r3, r3
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	4013      	ands	r3, r2
 8000926:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	689a      	ldr	r2, [r3, #8]
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	4313      	orrs	r3, r2
 8000938:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	693a      	ldr	r2, [r7, #16]
 800093e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000948:	2b00      	cmp	r3, #0
 800094a:	f000 80ac 	beq.w	8000aa6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	4a5e      	ldr	r2, [pc, #376]	; (8000ac8 <HAL_GPIO_Init+0x32c>)
 8000950:	4b5d      	ldr	r3, [pc, #372]	; (8000ac8 <HAL_GPIO_Init+0x32c>)
 8000952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6613      	str	r3, [r2, #96]	; 0x60
 800095a:	4b5b      	ldr	r3, [pc, #364]	; (8000ac8 <HAL_GPIO_Init+0x32c>)
 800095c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000966:	4a59      	ldr	r2, [pc, #356]	; (8000acc <HAL_GPIO_Init+0x330>)
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	089b      	lsrs	r3, r3, #2
 800096c:	3302      	adds	r3, #2
 800096e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000972:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	f003 0303 	and.w	r3, r3, #3
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	220f      	movs	r2, #15
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	43db      	mvns	r3, r3
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	4013      	ands	r3, r2
 8000988:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000990:	d025      	beq.n	80009de <HAL_GPIO_Init+0x242>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a4e      	ldr	r2, [pc, #312]	; (8000ad0 <HAL_GPIO_Init+0x334>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d01f      	beq.n	80009da <HAL_GPIO_Init+0x23e>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a4d      	ldr	r2, [pc, #308]	; (8000ad4 <HAL_GPIO_Init+0x338>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d019      	beq.n	80009d6 <HAL_GPIO_Init+0x23a>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a4c      	ldr	r2, [pc, #304]	; (8000ad8 <HAL_GPIO_Init+0x33c>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d013      	beq.n	80009d2 <HAL_GPIO_Init+0x236>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a4b      	ldr	r2, [pc, #300]	; (8000adc <HAL_GPIO_Init+0x340>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d00d      	beq.n	80009ce <HAL_GPIO_Init+0x232>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a4a      	ldr	r2, [pc, #296]	; (8000ae0 <HAL_GPIO_Init+0x344>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d007      	beq.n	80009ca <HAL_GPIO_Init+0x22e>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a49      	ldr	r2, [pc, #292]	; (8000ae4 <HAL_GPIO_Init+0x348>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d101      	bne.n	80009c6 <HAL_GPIO_Init+0x22a>
 80009c2:	2306      	movs	r3, #6
 80009c4:	e00c      	b.n	80009e0 <HAL_GPIO_Init+0x244>
 80009c6:	2307      	movs	r3, #7
 80009c8:	e00a      	b.n	80009e0 <HAL_GPIO_Init+0x244>
 80009ca:	2305      	movs	r3, #5
 80009cc:	e008      	b.n	80009e0 <HAL_GPIO_Init+0x244>
 80009ce:	2304      	movs	r3, #4
 80009d0:	e006      	b.n	80009e0 <HAL_GPIO_Init+0x244>
 80009d2:	2303      	movs	r3, #3
 80009d4:	e004      	b.n	80009e0 <HAL_GPIO_Init+0x244>
 80009d6:	2302      	movs	r3, #2
 80009d8:	e002      	b.n	80009e0 <HAL_GPIO_Init+0x244>
 80009da:	2301      	movs	r3, #1
 80009dc:	e000      	b.n	80009e0 <HAL_GPIO_Init+0x244>
 80009de:	2300      	movs	r3, #0
 80009e0:	697a      	ldr	r2, [r7, #20]
 80009e2:	f002 0203 	and.w	r2, r2, #3
 80009e6:	0092      	lsls	r2, r2, #2
 80009e8:	4093      	lsls	r3, r2
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009f0:	4936      	ldr	r1, [pc, #216]	; (8000acc <HAL_GPIO_Init+0x330>)
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	089b      	lsrs	r3, r3, #2
 80009f6:	3302      	adds	r3, #2
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80009fe:	4b3a      	ldr	r3, [pc, #232]	; (8000ae8 <HAL_GPIO_Init+0x34c>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	43db      	mvns	r3, r3
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d003      	beq.n	8000a22 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a22:	4a31      	ldr	r2, [pc, #196]	; (8000ae8 <HAL_GPIO_Init+0x34c>)
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000a28:	4b2f      	ldr	r3, [pc, #188]	; (8000ae8 <HAL_GPIO_Init+0x34c>)
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	43db      	mvns	r3, r3
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	4013      	ands	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d003      	beq.n	8000a4c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a4c:	4a26      	ldr	r2, [pc, #152]	; (8000ae8 <HAL_GPIO_Init+0x34c>)
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a52:	4b25      	ldr	r3, [pc, #148]	; (8000ae8 <HAL_GPIO_Init+0x34c>)
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d003      	beq.n	8000a76 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a76:	4a1c      	ldr	r2, [pc, #112]	; (8000ae8 <HAL_GPIO_Init+0x34c>)
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <HAL_GPIO_Init+0x34c>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	43db      	mvns	r3, r3
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d003      	beq.n	8000aa0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000aa0:	4a11      	ldr	r2, [pc, #68]	; (8000ae8 <HAL_GPIO_Init+0x34c>)
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f47f ae78 	bne.w	80007ac <HAL_GPIO_Init+0x10>
  }
}
 8000abc:	bf00      	nop
 8000abe:	371c      	adds	r7, #28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	40010000 	.word	0x40010000
 8000ad0:	48000400 	.word	0x48000400
 8000ad4:	48000800 	.word	0x48000800
 8000ad8:	48000c00 	.word	0x48000c00
 8000adc:	48001000 	.word	0x48001000
 8000ae0:	48001400 	.word	0x48001400
 8000ae4:	48001800 	.word	0x48001800
 8000ae8:	40010400 	.word	0x40010400

08000aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	460b      	mov	r3, r1
 8000af6:	807b      	strh	r3, [r7, #2]
 8000af8:	4613      	mov	r3, r2
 8000afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000afc:	787b      	ldrb	r3, [r7, #1]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d003      	beq.n	8000b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b02:	887a      	ldrh	r2, [r7, #2]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b08:	e002      	b.n	8000b10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b0a:	887a      	ldrh	r2, [r7, #2]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b28:	695a      	ldr	r2, [r3, #20]
 8000b2a:	88fb      	ldrh	r3, [r7, #6]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d006      	beq.n	8000b40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b32:	4a05      	ldr	r2, [pc, #20]	; (8000b48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b34:	88fb      	ldrh	r3, [r7, #6]
 8000b36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b38:	88fb      	ldrh	r3, [r7, #6]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 f806 	bl	8000b4c <HAL_GPIO_EXTI_Callback>
  }
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40010400 	.word	0x40010400

08000b4c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
	...

08000b64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <HAL_PWREx_GetVoltageRange+0x18>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	40007000 	.word	0x40007000

08000b80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b8e:	d130      	bne.n	8000bf2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b90:	4b23      	ldr	r3, [pc, #140]	; (8000c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b9c:	d038      	beq.n	8000c10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b9e:	4a20      	ldr	r2, [pc, #128]	; (8000c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ba0:	4b1f      	ldr	r3, [pc, #124]	; (8000c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ba8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000bae:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2232      	movs	r2, #50	; 0x32
 8000bb4:	fb02 f303 	mul.w	r3, r2, r3
 8000bb8:	4a1b      	ldr	r2, [pc, #108]	; (8000c28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000bba:	fba2 2303 	umull	r2, r3, r2, r3
 8000bbe:	0c9b      	lsrs	r3, r3, #18
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bc4:	e002      	b.n	8000bcc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	3b01      	subs	r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bcc:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bce:	695b      	ldr	r3, [r3, #20]
 8000bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bd8:	d102      	bne.n	8000be0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d1f2      	bne.n	8000bc6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000be2:	695b      	ldr	r3, [r3, #20]
 8000be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bec:	d110      	bne.n	8000c10 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	e00f      	b.n	8000c12 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bfe:	d007      	beq.n	8000c10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c00:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c02:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c0e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40007000 	.word	0x40007000
 8000c24:	20000004 	.word	0x20000004
 8000c28:	431bde83 	.word	0x431bde83

08000c2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b088      	sub	sp, #32
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_oscsource;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d101      	bne.n	8000c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e353      	b.n	80012e6 <HAL_RCC_OscConfig+0x6ba>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c3e:	4ba3      	ldr	r3, [pc, #652]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	f003 030c 	and.w	r3, r3, #12
 8000c46:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c48:	4ba0      	ldr	r3, [pc, #640]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	f003 0303 	and.w	r3, r3, #3
 8000c50:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f003 0310 	and.w	r3, r3, #16
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f000 80df 	beq.w	8000e1e <HAL_RCC_OscConfig+0x1f2>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d007      	beq.n	8000c76 <HAL_RCC_OscConfig+0x4a>
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	2b0c      	cmp	r3, #12
 8000c6a:	f040 8086 	bne.w	8000d7a <HAL_RCC_OscConfig+0x14e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	f040 8082 	bne.w	8000d7a <HAL_RCC_OscConfig+0x14e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c76:	4b95      	ldr	r3, [pc, #596]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d005      	beq.n	8000c8e <HAL_RCC_OscConfig+0x62>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	699b      	ldr	r3, [r3, #24]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e32b      	b.n	80012e6 <HAL_RCC_OscConfig+0x6ba>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6a1a      	ldr	r2, [r3, #32]
 8000c92:	4b8e      	ldr	r3, [pc, #568]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f003 0308 	and.w	r3, r3, #8
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d004      	beq.n	8000ca8 <HAL_RCC_OscConfig+0x7c>
 8000c9e:	4b8b      	ldr	r3, [pc, #556]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ca6:	e005      	b.n	8000cb4 <HAL_RCC_OscConfig+0x88>
 8000ca8:	4b88      	ldr	r3, [pc, #544]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cae:	091b      	lsrs	r3, r3, #4
 8000cb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d923      	bls.n	8000d00 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6a1b      	ldr	r3, [r3, #32]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 fcfd 	bl	80016bc <RCC_SetFlashLatencyFromMSIRange>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e30c      	b.n	80012e6 <HAL_RCC_OscConfig+0x6ba>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ccc:	4a7f      	ldr	r2, [pc, #508]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000cce:	4b7f      	ldr	r3, [pc, #508]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f043 0308 	orr.w	r3, r3, #8
 8000cd6:	6013      	str	r3, [r2, #0]
 8000cd8:	497c      	ldr	r1, [pc, #496]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000cda:	4b7c      	ldr	r3, [pc, #496]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6a1b      	ldr	r3, [r3, #32]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cea:	4978      	ldr	r1, [pc, #480]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000cec:	4b77      	ldr	r3, [pc, #476]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	69db      	ldr	r3, [r3, #28]
 8000cf8:	021b      	lsls	r3, r3, #8
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	604b      	str	r3, [r1, #4]
 8000cfe:	e022      	b.n	8000d46 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d00:	4a72      	ldr	r2, [pc, #456]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000d02:	4b72      	ldr	r3, [pc, #456]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f043 0308 	orr.w	r3, r3, #8
 8000d0a:	6013      	str	r3, [r2, #0]
 8000d0c:	496f      	ldr	r1, [pc, #444]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000d0e:	4b6f      	ldr	r3, [pc, #444]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6a1b      	ldr	r3, [r3, #32]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d1e:	496b      	ldr	r1, [pc, #428]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000d20:	4b6a      	ldr	r3, [pc, #424]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	69db      	ldr	r3, [r3, #28]
 8000d2c:	021b      	lsls	r3, r3, #8
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6a1b      	ldr	r3, [r3, #32]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 fcc0 	bl	80016bc <RCC_SetFlashLatencyFromMSIRange>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e2cf      	b.n	80012e6 <HAL_RCC_OscConfig+0x6ba>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d46:	f000 fbb3 	bl	80014b0 <HAL_RCC_GetSysClockFreq>
 8000d4a:	4601      	mov	r1, r0
 8000d4c:	4b5f      	ldr	r3, [pc, #380]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	091b      	lsrs	r3, r3, #4
 8000d52:	f003 030f 	and.w	r3, r3, #15
 8000d56:	4a5e      	ldr	r2, [pc, #376]	; (8000ed0 <HAL_RCC_OscConfig+0x2a4>)
 8000d58:	5cd3      	ldrb	r3, [r2, r3]
 8000d5a:	f003 031f 	and.w	r3, r3, #31
 8000d5e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d62:	4a5c      	ldr	r2, [pc, #368]	; (8000ed4 <HAL_RCC_OscConfig+0x2a8>)
 8000d64:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000d66:	2000      	movs	r0, #0
 8000d68:	f004 fe28 	bl	80059bc <HAL_InitTick>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d052      	beq.n	8000e1c <HAL_RCC_OscConfig+0x1f0>
        {
          return status;
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	e2b5      	b.n	80012e6 <HAL_RCC_OscConfig+0x6ba>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d032      	beq.n	8000de8 <HAL_RCC_OscConfig+0x1bc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000d82:	4a52      	ldr	r2, [pc, #328]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000d84:	4b51      	ldr	r3, [pc, #324]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d8e:	f7ff fc1d 	bl	80005cc <HAL_GetTick>
 8000d92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d94:	e008      	b.n	8000da8 <HAL_RCC_OscConfig+0x17c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d96:	f7ff fc19 	bl	80005cc <HAL_GetTick>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d901      	bls.n	8000da8 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 8000da4:	2303      	movs	r3, #3
 8000da6:	e29e      	b.n	80012e6 <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000da8:	4b48      	ldr	r3, [pc, #288]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f003 0302 	and.w	r3, r3, #2
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d0f0      	beq.n	8000d96 <HAL_RCC_OscConfig+0x16a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000db4:	4a45      	ldr	r2, [pc, #276]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000db6:	4b45      	ldr	r3, [pc, #276]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f043 0308 	orr.w	r3, r3, #8
 8000dbe:	6013      	str	r3, [r2, #0]
 8000dc0:	4942      	ldr	r1, [pc, #264]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000dc2:	4b42      	ldr	r3, [pc, #264]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6a1b      	ldr	r3, [r3, #32]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dd2:	493e      	ldr	r1, [pc, #248]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000dd4:	4b3d      	ldr	r3, [pc, #244]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	69db      	ldr	r3, [r3, #28]
 8000de0:	021b      	lsls	r3, r3, #8
 8000de2:	4313      	orrs	r3, r2
 8000de4:	604b      	str	r3, [r1, #4]
 8000de6:	e01a      	b.n	8000e1e <HAL_RCC_OscConfig+0x1f2>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000de8:	4a38      	ldr	r2, [pc, #224]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000dea:	4b38      	ldr	r3, [pc, #224]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f023 0301 	bic.w	r3, r3, #1
 8000df2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000df4:	f7ff fbea 	bl	80005cc <HAL_GetTick>
 8000df8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000dfa:	e008      	b.n	8000e0e <HAL_RCC_OscConfig+0x1e2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000dfc:	f7ff fbe6 	bl	80005cc <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d901      	bls.n	8000e0e <HAL_RCC_OscConfig+0x1e2>
          {
            return HAL_TIMEOUT;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	e26b      	b.n	80012e6 <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e0e:	4b2f      	ldr	r3, [pc, #188]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d1f0      	bne.n	8000dfc <HAL_RCC_OscConfig+0x1d0>
 8000e1a:	e000      	b.n	8000e1e <HAL_RCC_OscConfig+0x1f2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d072      	beq.n	8000f10 <HAL_RCC_OscConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	2b08      	cmp	r3, #8
 8000e2e:	d005      	beq.n	8000e3c <HAL_RCC_OscConfig+0x210>
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	2b0c      	cmp	r3, #12
 8000e34:	d10e      	bne.n	8000e54 <HAL_RCC_OscConfig+0x228>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	2b03      	cmp	r3, #3
 8000e3a:	d10b      	bne.n	8000e54 <HAL_RCC_OscConfig+0x228>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e3c:	4b23      	ldr	r3, [pc, #140]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d062      	beq.n	8000f0e <HAL_RCC_OscConfig+0x2e2>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d15e      	bne.n	8000f0e <HAL_RCC_OscConfig+0x2e2>
      {
        return HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e248      	b.n	80012e6 <HAL_RCC_OscConfig+0x6ba>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e5c:	d106      	bne.n	8000e6c <HAL_RCC_OscConfig+0x240>
 8000e5e:	4a1b      	ldr	r2, [pc, #108]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000e60:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e68:	6013      	str	r3, [r2, #0]
 8000e6a:	e01d      	b.n	8000ea8 <HAL_RCC_OscConfig+0x27c>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e74:	d10c      	bne.n	8000e90 <HAL_RCC_OscConfig+0x264>
 8000e76:	4a15      	ldr	r2, [pc, #84]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000e78:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e80:	6013      	str	r3, [r2, #0]
 8000e82:	4a12      	ldr	r2, [pc, #72]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	e00b      	b.n	8000ea8 <HAL_RCC_OscConfig+0x27c>
 8000e90:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e9a:	6013      	str	r3, [r2, #0]
 8000e9c:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <HAL_RCC_OscConfig+0x2a0>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ea6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d01a      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x2ba>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eb0:	f7ff fb8c 	bl	80005cc <HAL_GetTick>
 8000eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000eb6:	e00f      	b.n	8000ed8 <HAL_RCC_OscConfig+0x2ac>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000eb8:	f7ff fb88 	bl	80005cc <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2b64      	cmp	r3, #100	; 0x64
 8000ec4:	d908      	bls.n	8000ed8 <HAL_RCC_OscConfig+0x2ac>
          {
            return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e20d      	b.n	80012e6 <HAL_RCC_OscConfig+0x6ba>
 8000eca:	bf00      	nop
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	08006b38 	.word	0x08006b38
 8000ed4:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ed8:	4bae      	ldr	r3, [pc, #696]	; (8001194 <HAL_RCC_OscConfig+0x568>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d0e9      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x28c>
 8000ee4:	e014      	b.n	8000f10 <HAL_RCC_OscConfig+0x2e4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ee6:	f7ff fb71 	bl	80005cc <HAL_GetTick>
 8000eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000eec:	e008      	b.n	8000f00 <HAL_RCC_OscConfig+0x2d4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000eee:	f7ff fb6d 	bl	80005cc <HAL_GetTick>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	2b64      	cmp	r3, #100	; 0x64
 8000efa:	d901      	bls.n	8000f00 <HAL_RCC_OscConfig+0x2d4>
          {
            return HAL_TIMEOUT;
 8000efc:	2303      	movs	r3, #3
 8000efe:	e1f2      	b.n	80012e6 <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f00:	4ba4      	ldr	r3, [pc, #656]	; (8001194 <HAL_RCC_OscConfig+0x568>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d1f0      	bne.n	8000eee <HAL_RCC_OscConfig+0x2c2>
 8000f0c:	e000      	b.n	8000f10 <HAL_RCC_OscConfig+0x2e4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f0e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 0302 	and.w	r3, r3, #2
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d060      	beq.n	8000fde <HAL_RCC_OscConfig+0x3b2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	d005      	beq.n	8000f2e <HAL_RCC_OscConfig+0x302>
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	2b0c      	cmp	r3, #12
 8000f26:	d119      	bne.n	8000f5c <HAL_RCC_OscConfig+0x330>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d116      	bne.n	8000f5c <HAL_RCC_OscConfig+0x330>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f2e:	4b99      	ldr	r3, [pc, #612]	; (8001194 <HAL_RCC_OscConfig+0x568>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d005      	beq.n	8000f46 <HAL_RCC_OscConfig+0x31a>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <HAL_RCC_OscConfig+0x31a>
      {
        return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e1cf      	b.n	80012e6 <HAL_RCC_OscConfig+0x6ba>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f46:	4993      	ldr	r1, [pc, #588]	; (8001194 <HAL_RCC_OscConfig+0x568>)
 8000f48:	4b92      	ldr	r3, [pc, #584]	; (8001194 <HAL_RCC_OscConfig+0x568>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	691b      	ldr	r3, [r3, #16]
 8000f54:	061b      	lsls	r3, r3, #24
 8000f56:	4313      	orrs	r3, r2
 8000f58:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f5a:	e040      	b.n	8000fde <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d023      	beq.n	8000fac <HAL_RCC_OscConfig+0x380>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f64:	4a8b      	ldr	r2, [pc, #556]	; (8001194 <HAL_RCC_OscConfig+0x568>)
 8000f66:	4b8b      	ldr	r3, [pc, #556]	; (8001194 <HAL_RCC_OscConfig+0x568>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f70:	f7ff fb2c 	bl	80005cc <HAL_GetTick>
 8000f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f76:	e008      	b.n	8000f8a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f78:	f7ff fb28 	bl	80005cc <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d901      	bls.n	8000f8a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e1ad      	b.n	80012e6 <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f8a:	4b82      	ldr	r3, [pc, #520]	; (8001194 <HAL_RCC_OscConfig+0x568>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d0f0      	beq.n	8000f78 <HAL_RCC_OscConfig+0x34c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f96:	497f      	ldr	r1, [pc, #508]	; (8001194 <HAL_RCC_OscConfig+0x568>)
 8000f98:	4b7e      	ldr	r3, [pc, #504]	; (8001194 <HAL_RCC_OscConfig+0x568>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	061b      	lsls	r3, r3, #24
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	604b      	str	r3, [r1, #4]
 8000faa:	e018      	b.n	8000fde <HAL_RCC_OscConfig+0x3b2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fac:	4a79      	ldr	r2, [pc, #484]	; (8001194 <HAL_RCC_OscConfig+0x568>)
 8000fae:	4b79      	ldr	r3, [pc, #484]	; (8001194 <HAL_RCC_OscConfig+0x568>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fb8:	f7ff fb08 	bl	80005cc <HAL_GetTick>
 8000fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fbe:	e008      	b.n	8000fd2 <HAL_RCC_OscConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fc0:	f7ff fb04 	bl	80005cc <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d901      	bls.n	8000fd2 <HAL_RCC_OscConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e189      	b.n	80012e6 <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fd2:	4b70      	ldr	r3, [pc, #448]	; (8001194 <HAL_RCC_OscConfig+0x568>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d1f0      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0308 	and.w	r3, r3, #8
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d03c      	beq.n	8001064 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d01c      	beq.n	800102c <HAL_RCC_OscConfig+0x400>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ff2:	4a68      	ldr	r2, [pc, #416]	; (8001194 <HAL_RCC_OscConfig+0x568>)
 8000ff4:	4b67      	ldr	r3, [pc, #412]	; (8001194 <HAL_RCC_OscConfig+0x568>)
 8000ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001002:	f7ff fae3 	bl	80005cc <HAL_GetTick>
 8001006:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001008:	e008      	b.n	800101c <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800100a:	f7ff fadf 	bl	80005cc <HAL_GetTick>
 800100e:	4602      	mov	r2, r0
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	2b02      	cmp	r3, #2
 8001016:	d901      	bls.n	800101c <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001018:	2303      	movs	r3, #3
 800101a:	e164      	b.n	80012e6 <HAL_RCC_OscConfig+0x6ba>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800101c:	4b5d      	ldr	r3, [pc, #372]	; (8001194 <HAL_RCC_OscConfig+0x568>)
 800101e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d0ef      	beq.n	800100a <HAL_RCC_OscConfig+0x3de>
 800102a:	e01b      	b.n	8001064 <HAL_RCC_OscConfig+0x438>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800102c:	4a59      	ldr	r2, [pc, #356]	; (8001194 <HAL_RCC_OscConfig+0x568>)
 800102e:	4b59      	ldr	r3, [pc, #356]	; (8001194 <HAL_RCC_OscConfig+0x568>)
 8001030:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001034:	f023 0301 	bic.w	r3, r3, #1
 8001038:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800103c:	f7ff fac6 	bl	80005cc <HAL_GetTick>
 8001040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001042:	e008      	b.n	8001056 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001044:	f7ff fac2 	bl	80005cc <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b02      	cmp	r3, #2
 8001050:	d901      	bls.n	8001056 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e147      	b.n	80012e6 <HAL_RCC_OscConfig+0x6ba>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001056:	4b4f      	ldr	r3, [pc, #316]	; (8001194 <HAL_RCC_OscConfig+0x568>)
 8001058:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1ef      	bne.n	8001044 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	2b00      	cmp	r3, #0
 800106e:	f000 80a5 	beq.w	80011bc <HAL_RCC_OscConfig+0x590>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001072:	2300      	movs	r3, #0
 8001074:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001076:	4b47      	ldr	r3, [pc, #284]	; (8001194 <HAL_RCC_OscConfig+0x568>)
 8001078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d10d      	bne.n	800109e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001082:	4a44      	ldr	r2, [pc, #272]	; (8001194 <HAL_RCC_OscConfig+0x568>)
 8001084:	4b43      	ldr	r3, [pc, #268]	; (8001194 <HAL_RCC_OscConfig+0x568>)
 8001086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108c:	6593      	str	r3, [r2, #88]	; 0x58
 800108e:	4b41      	ldr	r3, [pc, #260]	; (8001194 <HAL_RCC_OscConfig+0x568>)
 8001090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800109a:	2301      	movs	r3, #1
 800109c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800109e:	4b3e      	ldr	r3, [pc, #248]	; (8001198 <HAL_RCC_OscConfig+0x56c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d118      	bne.n	80010dc <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010aa:	4a3b      	ldr	r2, [pc, #236]	; (8001198 <HAL_RCC_OscConfig+0x56c>)
 80010ac:	4b3a      	ldr	r3, [pc, #232]	; (8001198 <HAL_RCC_OscConfig+0x56c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010b6:	f7ff fa89 	bl	80005cc <HAL_GetTick>
 80010ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010bc:	e008      	b.n	80010d0 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010be:	f7ff fa85 	bl	80005cc <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d901      	bls.n	80010d0 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e10a      	b.n	80012e6 <HAL_RCC_OscConfig+0x6ba>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010d0:	4b31      	ldr	r3, [pc, #196]	; (8001198 <HAL_RCC_OscConfig+0x56c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d0f0      	beq.n	80010be <HAL_RCC_OscConfig+0x492>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d108      	bne.n	80010f6 <HAL_RCC_OscConfig+0x4ca>
 80010e4:	4a2b      	ldr	r2, [pc, #172]	; (8001194 <HAL_RCC_OscConfig+0x568>)
 80010e6:	4b2b      	ldr	r3, [pc, #172]	; (8001194 <HAL_RCC_OscConfig+0x568>)
 80010e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010f4:	e024      	b.n	8001140 <HAL_RCC_OscConfig+0x514>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	2b05      	cmp	r3, #5
 80010fc:	d110      	bne.n	8001120 <HAL_RCC_OscConfig+0x4f4>
 80010fe:	4a25      	ldr	r2, [pc, #148]	; (8001194 <HAL_RCC_OscConfig+0x568>)
 8001100:	4b24      	ldr	r3, [pc, #144]	; (8001194 <HAL_RCC_OscConfig+0x568>)
 8001102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001106:	f043 0304 	orr.w	r3, r3, #4
 800110a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800110e:	4a21      	ldr	r2, [pc, #132]	; (8001194 <HAL_RCC_OscConfig+0x568>)
 8001110:	4b20      	ldr	r3, [pc, #128]	; (8001194 <HAL_RCC_OscConfig+0x568>)
 8001112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800111e:	e00f      	b.n	8001140 <HAL_RCC_OscConfig+0x514>
 8001120:	4a1c      	ldr	r2, [pc, #112]	; (8001194 <HAL_RCC_OscConfig+0x568>)
 8001122:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <HAL_RCC_OscConfig+0x568>)
 8001124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001128:	f023 0301 	bic.w	r3, r3, #1
 800112c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001130:	4a18      	ldr	r2, [pc, #96]	; (8001194 <HAL_RCC_OscConfig+0x568>)
 8001132:	4b18      	ldr	r3, [pc, #96]	; (8001194 <HAL_RCC_OscConfig+0x568>)
 8001134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001138:	f023 0304 	bic.w	r3, r3, #4
 800113c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d016      	beq.n	8001176 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001148:	f7ff fa40 	bl	80005cc <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800114e:	e00a      	b.n	8001166 <HAL_RCC_OscConfig+0x53a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001150:	f7ff fa3c 	bl	80005cc <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	f241 3288 	movw	r2, #5000	; 0x1388
 800115e:	4293      	cmp	r3, r2
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x53a>
        {
          return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e0bf      	b.n	80012e6 <HAL_RCC_OscConfig+0x6ba>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <HAL_RCC_OscConfig+0x568>)
 8001168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800116c:	f003 0302 	and.w	r3, r3, #2
 8001170:	2b00      	cmp	r3, #0
 8001172:	d0ed      	beq.n	8001150 <HAL_RCC_OscConfig+0x524>
 8001174:	e019      	b.n	80011aa <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001176:	f7ff fa29 	bl	80005cc <HAL_GetTick>
 800117a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800117c:	e00e      	b.n	800119c <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800117e:	f7ff fa25 	bl	80005cc <HAL_GetTick>
 8001182:	4602      	mov	r2, r0
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	f241 3288 	movw	r2, #5000	; 0x1388
 800118c:	4293      	cmp	r3, r2
 800118e:	d905      	bls.n	800119c <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e0a8      	b.n	80012e6 <HAL_RCC_OscConfig+0x6ba>
 8001194:	40021000 	.word	0x40021000
 8001198:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800119c:	4b54      	ldr	r3, [pc, #336]	; (80012f0 <HAL_RCC_OscConfig+0x6c4>)
 800119e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1e9      	bne.n	800117e <HAL_RCC_OscConfig+0x552>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011aa:	7ffb      	ldrb	r3, [r7, #31]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d105      	bne.n	80011bc <HAL_RCC_OscConfig+0x590>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011b0:	4a4f      	ldr	r2, [pc, #316]	; (80012f0 <HAL_RCC_OscConfig+0x6c4>)
 80011b2:	4b4f      	ldr	r3, [pc, #316]	; (80012f0 <HAL_RCC_OscConfig+0x6c4>)
 80011b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011ba:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 808f 	beq.w	80012e4 <HAL_RCC_OscConfig+0x6b8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	2b0c      	cmp	r3, #12
 80011ca:	f000 8089 	beq.w	80012e0 <HAL_RCC_OscConfig+0x6b4>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d156      	bne.n	8001284 <HAL_RCC_OscConfig+0x658>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011d6:	4a46      	ldr	r2, [pc, #280]	; (80012f0 <HAL_RCC_OscConfig+0x6c4>)
 80011d8:	4b45      	ldr	r3, [pc, #276]	; (80012f0 <HAL_RCC_OscConfig+0x6c4>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e2:	f7ff f9f3 	bl	80005cc <HAL_GetTick>
 80011e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011e8:	e008      	b.n	80011fc <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ea:	f7ff f9ef 	bl	80005cc <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d901      	bls.n	80011fc <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e074      	b.n	80012e6 <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011fc:	4b3c      	ldr	r3, [pc, #240]	; (80012f0 <HAL_RCC_OscConfig+0x6c4>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1f0      	bne.n	80011ea <HAL_RCC_OscConfig+0x5be>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001208:	4939      	ldr	r1, [pc, #228]	; (80012f0 <HAL_RCC_OscConfig+0x6c4>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	3b01      	subs	r3, #1
 8001210:	011a      	lsls	r2, r3, #4
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001216:	021b      	lsls	r3, r3, #8
 8001218:	431a      	orrs	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800121e:	091b      	lsrs	r3, r3, #4
 8001220:	045b      	lsls	r3, r3, #17
 8001222:	431a      	orrs	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001228:	431a      	orrs	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800122e:	085b      	lsrs	r3, r3, #1
 8001230:	3b01      	subs	r3, #1
 8001232:	055b      	lsls	r3, r3, #21
 8001234:	431a      	orrs	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	085b      	lsrs	r3, r3, #1
 800123c:	3b01      	subs	r3, #1
 800123e:	065b      	lsls	r3, r3, #25
 8001240:	4313      	orrs	r3, r2
 8001242:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001244:	4a2a      	ldr	r2, [pc, #168]	; (80012f0 <HAL_RCC_OscConfig+0x6c4>)
 8001246:	4b2a      	ldr	r3, [pc, #168]	; (80012f0 <HAL_RCC_OscConfig+0x6c4>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800124e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001250:	4a27      	ldr	r2, [pc, #156]	; (80012f0 <HAL_RCC_OscConfig+0x6c4>)
 8001252:	4b27      	ldr	r3, [pc, #156]	; (80012f0 <HAL_RCC_OscConfig+0x6c4>)
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800125a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125c:	f7ff f9b6 	bl	80005cc <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x64a>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001264:	f7ff f9b2 	bl	80005cc <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x64a>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e037      	b.n	80012e6 <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001276:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <HAL_RCC_OscConfig+0x6c4>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d0f0      	beq.n	8001264 <HAL_RCC_OscConfig+0x638>
 8001282:	e02f      	b.n	80012e4 <HAL_RCC_OscConfig+0x6b8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001284:	4a1a      	ldr	r2, [pc, #104]	; (80012f0 <HAL_RCC_OscConfig+0x6c4>)
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <HAL_RCC_OscConfig+0x6c4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800128e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <HAL_RCC_OscConfig+0x6c4>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d105      	bne.n	80012a8 <HAL_RCC_OscConfig+0x67c>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800129c:	4a14      	ldr	r2, [pc, #80]	; (80012f0 <HAL_RCC_OscConfig+0x6c4>)
 800129e:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <HAL_RCC_OscConfig+0x6c4>)
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	f023 0303 	bic.w	r3, r3, #3
 80012a6:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80012a8:	4a11      	ldr	r2, [pc, #68]	; (80012f0 <HAL_RCC_OscConfig+0x6c4>)
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <HAL_RCC_OscConfig+0x6c4>)
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80012b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b6:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b8:	f7ff f988 	bl	80005cc <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0x6a6>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012c0:	f7ff f984 	bl	80005cc <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e009      	b.n	80012e6 <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012d2:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <HAL_RCC_OscConfig+0x6c4>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1f0      	bne.n	80012c0 <HAL_RCC_OscConfig+0x694>
 80012de:	e001      	b.n	80012e4 <HAL_RCC_OscConfig+0x6b8>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e000      	b.n	80012e6 <HAL_RCC_OscConfig+0x6ba>
    }
  }
  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3720      	adds	r7, #32
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000

080012f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d101      	bne.n	8001308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e0c6      	b.n	8001496 <HAL_RCC_ClockConfig+0x1a2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001308:	4b65      	ldr	r3, [pc, #404]	; (80014a0 <HAL_RCC_ClockConfig+0x1ac>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0207 	and.w	r2, r3, #7
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	429a      	cmp	r2, r3
 8001314:	d210      	bcs.n	8001338 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001316:	4962      	ldr	r1, [pc, #392]	; (80014a0 <HAL_RCC_ClockConfig+0x1ac>)
 8001318:	4b61      	ldr	r3, [pc, #388]	; (80014a0 <HAL_RCC_ClockConfig+0x1ac>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f023 0207 	bic.w	r2, r3, #7
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	4313      	orrs	r3, r2
 8001324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001326:	4b5e      	ldr	r3, [pc, #376]	; (80014a0 <HAL_RCC_ClockConfig+0x1ac>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0207 	and.w	r2, r3, #7
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	429a      	cmp	r2, r3
 8001332:	d001      	beq.n	8001338 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e0ae      	b.n	8001496 <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b00      	cmp	r3, #0
 8001342:	d04c      	beq.n	80013de <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b03      	cmp	r3, #3
 800134a:	d107      	bne.n	800135c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800134c:	4b55      	ldr	r3, [pc, #340]	; (80014a4 <HAL_RCC_ClockConfig+0x1b0>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d121      	bne.n	800139c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e09c      	b.n	8001496 <HAL_RCC_ClockConfig+0x1a2>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b02      	cmp	r3, #2
 8001362:	d107      	bne.n	8001374 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001364:	4b4f      	ldr	r3, [pc, #316]	; (80014a4 <HAL_RCC_ClockConfig+0x1b0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d115      	bne.n	800139c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e090      	b.n	8001496 <HAL_RCC_ClockConfig+0x1a2>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d107      	bne.n	800138c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800137c:	4b49      	ldr	r3, [pc, #292]	; (80014a4 <HAL_RCC_ClockConfig+0x1b0>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d109      	bne.n	800139c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e084      	b.n	8001496 <HAL_RCC_ClockConfig+0x1a2>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800138c:	4b45      	ldr	r3, [pc, #276]	; (80014a4 <HAL_RCC_ClockConfig+0x1b0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e07c      	b.n	8001496 <HAL_RCC_ClockConfig+0x1a2>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800139c:	4941      	ldr	r1, [pc, #260]	; (80014a4 <HAL_RCC_ClockConfig+0x1b0>)
 800139e:	4b41      	ldr	r3, [pc, #260]	; (80014a4 <HAL_RCC_ClockConfig+0x1b0>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f023 0203 	bic.w	r2, r3, #3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80013ae:	f7ff f90d 	bl	80005cc <HAL_GetTick>
 80013b2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013b4:	e00a      	b.n	80013cc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013b6:	f7ff f909 	bl	80005cc <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e064      	b.n	8001496 <HAL_RCC_ClockConfig+0x1a2>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013cc:	4b35      	ldr	r3, [pc, #212]	; (80014a4 <HAL_RCC_ClockConfig+0x1b0>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f003 020c 	and.w	r2, r3, #12
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	429a      	cmp	r2, r3
 80013dc:	d1eb      	bne.n	80013b6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d008      	beq.n	80013fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013ea:	492e      	ldr	r1, [pc, #184]	; (80014a4 <HAL_RCC_ClockConfig+0x1b0>)
 80013ec:	4b2d      	ldr	r3, [pc, #180]	; (80014a4 <HAL_RCC_ClockConfig+0x1b0>)
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013fc:	4b28      	ldr	r3, [pc, #160]	; (80014a0 <HAL_RCC_ClockConfig+0x1ac>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0207 	and.w	r2, r3, #7
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d910      	bls.n	800142c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800140a:	4925      	ldr	r1, [pc, #148]	; (80014a0 <HAL_RCC_ClockConfig+0x1ac>)
 800140c:	4b24      	ldr	r3, [pc, #144]	; (80014a0 <HAL_RCC_ClockConfig+0x1ac>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f023 0207 	bic.w	r2, r3, #7
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	4313      	orrs	r3, r2
 8001418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800141a:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <HAL_RCC_ClockConfig+0x1ac>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0207 	and.w	r2, r3, #7
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	429a      	cmp	r2, r3
 8001426:	d001      	beq.n	800142c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e034      	b.n	8001496 <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	2b00      	cmp	r3, #0
 8001436:	d008      	beq.n	800144a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001438:	491a      	ldr	r1, [pc, #104]	; (80014a4 <HAL_RCC_ClockConfig+0x1b0>)
 800143a:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <HAL_RCC_ClockConfig+0x1b0>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	4313      	orrs	r3, r2
 8001448:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	2b00      	cmp	r3, #0
 8001454:	d009      	beq.n	800146a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001456:	4913      	ldr	r1, [pc, #76]	; (80014a4 <HAL_RCC_ClockConfig+0x1b0>)
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_RCC_ClockConfig+0x1b0>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4313      	orrs	r3, r2
 8001468:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800146a:	f000 f821 	bl	80014b0 <HAL_RCC_GetSysClockFreq>
 800146e:	4601      	mov	r1, r0
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <HAL_RCC_ClockConfig+0x1b0>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	091b      	lsrs	r3, r3, #4
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	4a0b      	ldr	r2, [pc, #44]	; (80014a8 <HAL_RCC_ClockConfig+0x1b4>)
 800147c:	5cd3      	ldrb	r3, [r2, r3]
 800147e:	f003 031f 	and.w	r3, r3, #31
 8001482:	fa21 f303 	lsr.w	r3, r1, r3
 8001486:	4a09      	ldr	r2, [pc, #36]	; (80014ac <HAL_RCC_ClockConfig+0x1b8>)
 8001488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick (TICK_INT_PRIORITY);
 800148a:	2000      	movs	r0, #0
 800148c:	f004 fa96 	bl	80059bc <HAL_InitTick>
 8001490:	4603      	mov	r3, r0
 8001492:	72fb      	strb	r3, [r7, #11]

  return status;
 8001494:	7afb      	ldrb	r3, [r7, #11]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40022000 	.word	0x40022000
 80014a4:	40021000 	.word	0x40021000
 80014a8:	08006b38 	.word	0x08006b38
 80014ac:	20000004 	.word	0x20000004

080014b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b089      	sub	sp, #36	; 0x24
 80014b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014be:	4b46      	ldr	r3, [pc, #280]	; (80015d8 <HAL_RCC_GetSysClockFreq+0x128>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
 80014c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014c8:	4b43      	ldr	r3, [pc, #268]	; (80015d8 <HAL_RCC_GetSysClockFreq+0x128>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	f003 0303 	and.w	r3, r3, #3
 80014d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d005      	beq.n	80014e4 <HAL_RCC_GetSysClockFreq+0x34>
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	2b0c      	cmp	r3, #12
 80014dc:	d121      	bne.n	8001522 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d11e      	bne.n	8001522 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80014e4:	4b3c      	ldr	r3, [pc, #240]	; (80015d8 <HAL_RCC_GetSysClockFreq+0x128>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0308 	and.w	r3, r3, #8
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d107      	bne.n	8001500 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80014f0:	4b39      	ldr	r3, [pc, #228]	; (80015d8 <HAL_RCC_GetSysClockFreq+0x128>)
 80014f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014f6:	0a1b      	lsrs	r3, r3, #8
 80014f8:	f003 030f 	and.w	r3, r3, #15
 80014fc:	61fb      	str	r3, [r7, #28]
 80014fe:	e005      	b.n	800150c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001500:	4b35      	ldr	r3, [pc, #212]	; (80015d8 <HAL_RCC_GetSysClockFreq+0x128>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	091b      	lsrs	r3, r3, #4
 8001506:	f003 030f 	and.w	r3, r3, #15
 800150a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800150c:	4a33      	ldr	r2, [pc, #204]	; (80015dc <HAL_RCC_GetSysClockFreq+0x12c>)
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001514:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d10d      	bne.n	8001538 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001520:	e00a      	b.n	8001538 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	2b04      	cmp	r3, #4
 8001526:	d102      	bne.n	800152e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001528:	4b2d      	ldr	r3, [pc, #180]	; (80015e0 <HAL_RCC_GetSysClockFreq+0x130>)
 800152a:	61bb      	str	r3, [r7, #24]
 800152c:	e004      	b.n	8001538 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	2b08      	cmp	r3, #8
 8001532:	d101      	bne.n	8001538 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001534:	4b2b      	ldr	r3, [pc, #172]	; (80015e4 <HAL_RCC_GetSysClockFreq+0x134>)
 8001536:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	2b0c      	cmp	r3, #12
 800153c:	d145      	bne.n	80015ca <HAL_RCC_GetSysClockFreq+0x11a>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800153e:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <HAL_RCC_GetSysClockFreq+0x128>)
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	f003 0303 	and.w	r3, r3, #3
 8001546:	60bb      	str	r3, [r7, #8]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001548:	4b23      	ldr	r3, [pc, #140]	; (80015d8 <HAL_RCC_GetSysClockFreq+0x128>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	091b      	lsrs	r3, r3, #4
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	3301      	adds	r3, #1
 8001554:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	2b02      	cmp	r3, #2
 800155a:	d002      	beq.n	8001562 <HAL_RCC_GetSysClockFreq+0xb2>
 800155c:	2b03      	cmp	r3, #3
 800155e:	d00d      	beq.n	800157c <HAL_RCC_GetSysClockFreq+0xcc>
 8001560:	e019      	b.n	8001596 <HAL_RCC_GetSysClockFreq+0xe6>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001562:	4a1f      	ldr	r2, [pc, #124]	; (80015e0 <HAL_RCC_GetSysClockFreq+0x130>)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	fbb2 f3f3 	udiv	r3, r2, r3
 800156a:	4a1b      	ldr	r2, [pc, #108]	; (80015d8 <HAL_RCC_GetSysClockFreq+0x128>)
 800156c:	68d2      	ldr	r2, [r2, #12]
 800156e:	0a12      	lsrs	r2, r2, #8
 8001570:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001574:	fb02 f303 	mul.w	r3, r2, r3
 8001578:	617b      	str	r3, [r7, #20]
      break;
 800157a:	e019      	b.n	80015b0 <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800157c:	4a19      	ldr	r2, [pc, #100]	; (80015e4 <HAL_RCC_GetSysClockFreq+0x134>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	fbb2 f3f3 	udiv	r3, r2, r3
 8001584:	4a14      	ldr	r2, [pc, #80]	; (80015d8 <HAL_RCC_GetSysClockFreq+0x128>)
 8001586:	68d2      	ldr	r2, [r2, #12]
 8001588:	0a12      	lsrs	r2, r2, #8
 800158a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800158e:	fb02 f303 	mul.w	r3, r2, r3
 8001592:	617b      	str	r3, [r7, #20]
      break;
 8001594:	e00c      	b.n	80015b0 <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001596:	69fa      	ldr	r2, [r7, #28]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	fbb2 f3f3 	udiv	r3, r2, r3
 800159e:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <HAL_RCC_GetSysClockFreq+0x128>)
 80015a0:	68d2      	ldr	r2, [r2, #12]
 80015a2:	0a12      	lsrs	r2, r2, #8
 80015a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80015a8:	fb02 f303 	mul.w	r3, r2, r3
 80015ac:	617b      	str	r3, [r7, #20]
      break;
 80015ae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80015b0:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_RCC_GetSysClockFreq+0x128>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	0e5b      	lsrs	r3, r3, #25
 80015b6:	f003 0303 	and.w	r3, r3, #3
 80015ba:	3301      	adds	r3, #1
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco/pllr;
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80015ca:	69bb      	ldr	r3, [r7, #24]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3724      	adds	r7, #36	; 0x24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	40021000 	.word	0x40021000
 80015dc:	08006b50 	.word	0x08006b50
 80015e0:	00f42400 	.word	0x00f42400
 80015e4:	007a1200 	.word	0x007a1200

080015e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015ec:	4b03      	ldr	r3, [pc, #12]	; (80015fc <HAL_RCC_GetHCLKFreq+0x14>)
 80015ee:	681b      	ldr	r3, [r3, #0]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	20000004 	.word	0x20000004

08001600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001604:	f7ff fff0 	bl	80015e8 <HAL_RCC_GetHCLKFreq>
 8001608:	4601      	mov	r1, r0
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_RCC_GetPCLK1Freq+0x24>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	0a1b      	lsrs	r3, r3, #8
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	4a04      	ldr	r2, [pc, #16]	; (8001628 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001616:	5cd3      	ldrb	r3, [r2, r3]
 8001618:	f003 031f 	and.w	r3, r3, #31
 800161c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001620:	4618      	mov	r0, r3
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40021000 	.word	0x40021000
 8001628:	08006b48 	.word	0x08006b48

0800162c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001630:	f7ff ffda 	bl	80015e8 <HAL_RCC_GetHCLKFreq>
 8001634:	4601      	mov	r1, r0
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	0adb      	lsrs	r3, r3, #11
 800163c:	f003 0307 	and.w	r3, r3, #7
 8001640:	4a04      	ldr	r2, [pc, #16]	; (8001654 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001642:	5cd3      	ldrb	r3, [r2, r3]
 8001644:	f003 031f 	and.w	r3, r3, #31
 8001648:	fa21 f303 	lsr.w	r3, r1, r3
}
 800164c:	4618      	mov	r0, r3
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40021000 	.word	0x40021000
 8001654:	08006b48 	.word	0x08006b48

08001658 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	220f      	movs	r2, #15
 8001666:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_RCC_GetClockConfig+0x5c>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 0203 	and.w	r2, r3, #3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <HAL_RCC_GetClockConfig+0x5c>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <HAL_RCC_GetClockConfig+0x5c>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800168c:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <HAL_RCC_GetClockConfig+0x5c>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	08db      	lsrs	r3, r3, #3
 8001692:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800169a:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <HAL_RCC_GetClockConfig+0x60>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0207 	and.w	r2, r3, #7
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	601a      	str	r2, [r3, #0]
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40022000 	.word	0x40022000

080016bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80016c4:	2300      	movs	r3, #0
 80016c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80016c8:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80016d4:	f7ff fa46 	bl	8000b64 <HAL_PWREx_GetVoltageRange>
 80016d8:	6178      	str	r0, [r7, #20]
 80016da:	e014      	b.n	8001706 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80016dc:	4a25      	ldr	r2, [pc, #148]	; (8001774 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016de:	4b25      	ldr	r3, [pc, #148]	; (8001774 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e6:	6593      	str	r3, [r2, #88]	; 0x58
 80016e8:	4b22      	ldr	r3, [pc, #136]	; (8001774 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80016f4:	f7ff fa36 	bl	8000b64 <HAL_PWREx_GetVoltageRange>
 80016f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80016fa:	4a1e      	ldr	r2, [pc, #120]	; (8001774 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016fc:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001704:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800170c:	d10b      	bne.n	8001726 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b80      	cmp	r3, #128	; 0x80
 8001712:	d919      	bls.n	8001748 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2ba0      	cmp	r3, #160	; 0xa0
 8001718:	d902      	bls.n	8001720 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800171a:	2302      	movs	r3, #2
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	e013      	b.n	8001748 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001720:	2301      	movs	r3, #1
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	e010      	b.n	8001748 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b80      	cmp	r3, #128	; 0x80
 800172a:	d902      	bls.n	8001732 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800172c:	2303      	movs	r3, #3
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	e00a      	b.n	8001748 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b80      	cmp	r3, #128	; 0x80
 8001736:	d102      	bne.n	800173e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001738:	2302      	movs	r3, #2
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	e004      	b.n	8001748 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b70      	cmp	r3, #112	; 0x70
 8001742:	d101      	bne.n	8001748 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001744:	2301      	movs	r3, #1
 8001746:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001748:	490b      	ldr	r1, [pc, #44]	; (8001778 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f023 0207 	bic.w	r2, r3, #7
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	4313      	orrs	r3, r2
 8001756:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001758:	4b07      	ldr	r3, [pc, #28]	; (8001778 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0207 	and.w	r2, r3, #7
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	429a      	cmp	r2, r3
 8001764:	d001      	beq.n	800176a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40021000 	.word	0x40021000
 8001778:	40022000 	.word	0x40022000

0800177c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001784:	2300      	movs	r3, #0
 8001786:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001788:	2300      	movs	r3, #0
 800178a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001794:	2b00      	cmp	r3, #0
 8001796:	d03f      	beq.n	8001818 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800179c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017a0:	d01c      	beq.n	80017dc <HAL_RCCEx_PeriphCLKConfig+0x60>
 80017a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017a6:	d802      	bhi.n	80017ae <HAL_RCCEx_PeriphCLKConfig+0x32>
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00e      	beq.n	80017ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80017ac:	e01f      	b.n	80017ee <HAL_RCCEx_PeriphCLKConfig+0x72>
 80017ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80017b2:	d003      	beq.n	80017bc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80017b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80017b8:	d01c      	beq.n	80017f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80017ba:	e018      	b.n	80017ee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80017bc:	4a85      	ldr	r2, [pc, #532]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80017be:	4b85      	ldr	r3, [pc, #532]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80017c8:	e015      	b.n	80017f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3304      	adds	r3, #4
 80017ce:	2100      	movs	r1, #0
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 fab9 	bl	8001d48 <RCCEx_PLLSAI1_Config>
 80017d6:	4603      	mov	r3, r0
 80017d8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80017da:	e00c      	b.n	80017f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3320      	adds	r3, #32
 80017e0:	2100      	movs	r1, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 fba0 	bl	8001f28 <RCCEx_PLLSAI2_Config>
 80017e8:	4603      	mov	r3, r0
 80017ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80017ec:	e003      	b.n	80017f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	74fb      	strb	r3, [r7, #19]
      break;
 80017f2:	e000      	b.n	80017f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80017f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80017f6:	7cfb      	ldrb	r3, [r7, #19]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d10b      	bne.n	8001814 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80017fc:	4975      	ldr	r1, [pc, #468]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80017fe:	4b75      	ldr	r3, [pc, #468]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001804:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800180c:	4313      	orrs	r3, r2
 800180e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001812:	e001      	b.n	8001818 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001814:	7cfb      	ldrb	r3, [r7, #19]
 8001816:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d03f      	beq.n	80018a4 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001828:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800182c:	d01c      	beq.n	8001868 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800182e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001832:	d802      	bhi.n	800183a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001834:	2b00      	cmp	r3, #0
 8001836:	d00e      	beq.n	8001856 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001838:	e01f      	b.n	800187a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800183a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800183e:	d003      	beq.n	8001848 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001840:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001844:	d01c      	beq.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001846:	e018      	b.n	800187a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001848:	4a62      	ldr	r2, [pc, #392]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800184a:	4b62      	ldr	r3, [pc, #392]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001852:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001854:	e015      	b.n	8001882 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3304      	adds	r3, #4
 800185a:	2100      	movs	r1, #0
 800185c:	4618      	mov	r0, r3
 800185e:	f000 fa73 	bl	8001d48 <RCCEx_PLLSAI1_Config>
 8001862:	4603      	mov	r3, r0
 8001864:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001866:	e00c      	b.n	8001882 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3320      	adds	r3, #32
 800186c:	2100      	movs	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f000 fb5a 	bl	8001f28 <RCCEx_PLLSAI2_Config>
 8001874:	4603      	mov	r3, r0
 8001876:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001878:	e003      	b.n	8001882 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	74fb      	strb	r3, [r7, #19]
      break;
 800187e:	e000      	b.n	8001882 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001880:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001882:	7cfb      	ldrb	r3, [r7, #19]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d10b      	bne.n	80018a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001888:	4952      	ldr	r1, [pc, #328]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800188a:	4b52      	ldr	r3, [pc, #328]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800188c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001890:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001898:	4313      	orrs	r3, r2
 800189a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800189e:	e001      	b.n	80018a4 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80018a0:	7cfb      	ldrb	r3, [r7, #19]
 80018a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 80a0 	beq.w	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018b2:	2300      	movs	r3, #0
 80018b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80018b6:	4b47      	ldr	r3, [pc, #284]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80018c6:	2300      	movs	r3, #0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00d      	beq.n	80018e8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018cc:	4a41      	ldr	r2, [pc, #260]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018ce:	4b41      	ldr	r3, [pc, #260]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d6:	6593      	str	r3, [r2, #88]	; 0x58
 80018d8:	4b3e      	ldr	r3, [pc, #248]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018e4:	2301      	movs	r3, #1
 80018e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018e8:	4a3b      	ldr	r2, [pc, #236]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80018ea:	4b3b      	ldr	r3, [pc, #236]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80018f4:	f7fe fe6a 	bl	80005cc <HAL_GetTick>
 80018f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80018fa:	e009      	b.n	8001910 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018fc:	f7fe fe66 	bl	80005cc <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d902      	bls.n	8001910 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	74fb      	strb	r3, [r7, #19]
        break;
 800190e:	e005      	b.n	800191c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001910:	4b31      	ldr	r3, [pc, #196]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0ef      	beq.n	80018fc <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800191c:	7cfb      	ldrb	r3, [r7, #19]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d15c      	bne.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001922:	4b2c      	ldr	r3, [pc, #176]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001928:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800192c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d01f      	beq.n	8001974 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	429a      	cmp	r2, r3
 800193e:	d019      	beq.n	8001974 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001940:	4b24      	ldr	r3, [pc, #144]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800194a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800194c:	4a21      	ldr	r2, [pc, #132]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800194e:	4b21      	ldr	r3, [pc, #132]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001958:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800195c:	4a1d      	ldr	r2, [pc, #116]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800195e:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001964:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800196c:	4a19      	ldr	r2, [pc, #100]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	d016      	beq.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197e:	f7fe fe25 	bl	80005cc <HAL_GetTick>
 8001982:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001984:	e00b      	b.n	800199e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001986:	f7fe fe21 	bl	80005cc <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	f241 3288 	movw	r2, #5000	; 0x1388
 8001994:	4293      	cmp	r3, r2
 8001996:	d902      	bls.n	800199e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	74fb      	strb	r3, [r7, #19]
            break;
 800199c:	e006      	b.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800199e:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0ec      	beq.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80019ac:	7cfb      	ldrb	r3, [r7, #19]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10c      	bne.n	80019cc <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019b2:	4908      	ldr	r1, [pc, #32]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019b4:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019c4:	4313      	orrs	r3, r2
 80019c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80019ca:	e009      	b.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80019cc:	7cfb      	ldrb	r3, [r7, #19]
 80019ce:	74bb      	strb	r3, [r7, #18]
 80019d0:	e006      	b.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80019d2:	bf00      	nop
 80019d4:	40021000 	.word	0x40021000
 80019d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80019dc:	7cfb      	ldrb	r3, [r7, #19]
 80019de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019e0:	7c7b      	ldrb	r3, [r7, #17]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d105      	bne.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019e6:	4a9e      	ldr	r2, [pc, #632]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80019e8:	4b9d      	ldr	r3, [pc, #628]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80019ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00a      	beq.n	8001a14 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80019fe:	4998      	ldr	r1, [pc, #608]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a00:	4b97      	ldr	r3, [pc, #604]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a06:	f023 0203 	bic.w	r2, r3, #3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00a      	beq.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a20:	498f      	ldr	r1, [pc, #572]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a22:	4b8f      	ldr	r3, [pc, #572]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a28:	f023 020c 	bic.w	r2, r3, #12
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a30:	4313      	orrs	r3, r2
 8001a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0304 	and.w	r3, r3, #4
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d00a      	beq.n	8001a58 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001a42:	4987      	ldr	r1, [pc, #540]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a44:	4b86      	ldr	r3, [pc, #536]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a4a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	4313      	orrs	r3, r2
 8001a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0308 	and.w	r3, r3, #8
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d00a      	beq.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001a64:	497e      	ldr	r1, [pc, #504]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a66:	4b7e      	ldr	r3, [pc, #504]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a6c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a74:	4313      	orrs	r3, r2
 8001a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0310 	and.w	r3, r3, #16
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00a      	beq.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001a86:	4976      	ldr	r1, [pc, #472]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a88:	4b75      	ldr	r3, [pc, #468]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a96:	4313      	orrs	r3, r2
 8001a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0320 	and.w	r3, r3, #32
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d00a      	beq.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001aa8:	496d      	ldr	r1, [pc, #436]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001aaa:	4b6d      	ldr	r3, [pc, #436]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ab0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00a      	beq.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001aca:	4965      	ldr	r1, [pc, #404]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001acc:	4b64      	ldr	r3, [pc, #400]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ada:	4313      	orrs	r3, r2
 8001adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00a      	beq.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001aec:	495c      	ldr	r1, [pc, #368]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001aee:	4b5c      	ldr	r3, [pc, #368]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001afc:	4313      	orrs	r3, r2
 8001afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00a      	beq.n	8001b24 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b0e:	4954      	ldr	r1, [pc, #336]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b10:	4b53      	ldr	r3, [pc, #332]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b16:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00a      	beq.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001b30:	494b      	ldr	r1, [pc, #300]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b32:	4b4b      	ldr	r3, [pc, #300]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b40:	4313      	orrs	r3, r2
 8001b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00a      	beq.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001b52:	4943      	ldr	r1, [pc, #268]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b54:	4b42      	ldr	r3, [pc, #264]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b62:	4313      	orrs	r3, r2
 8001b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d028      	beq.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b74:	493a      	ldr	r1, [pc, #232]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b76:	4b3a      	ldr	r3, [pc, #232]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b7c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b84:	4313      	orrs	r3, r2
 8001b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b92:	d106      	bne.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001b94:	4a32      	ldr	r2, [pc, #200]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b96:	4b32      	ldr	r3, [pc, #200]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b9e:	60d3      	str	r3, [r2, #12]
 8001ba0:	e011      	b.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ba6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001baa:	d10c      	bne.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3304      	adds	r3, #4
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 f8c8 	bl	8001d48 <RCCEx_PLLSAI1_Config>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001bbc:	7cfb      	ldrb	r3, [r7, #19]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8001bc2:	7cfb      	ldrb	r3, [r7, #19]
 8001bc4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d028      	beq.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001bd2:	4923      	ldr	r1, [pc, #140]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bd4:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be2:	4313      	orrs	r3, r2
 8001be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001bf0:	d106      	bne.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001bf2:	4a1b      	ldr	r2, [pc, #108]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bf4:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bfc:	60d3      	str	r3, [r2, #12]
 8001bfe:	e011      	b.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c08:	d10c      	bne.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	2101      	movs	r1, #1
 8001c10:	4618      	mov	r0, r3
 8001c12:	f000 f899 	bl	8001d48 <RCCEx_PLLSAI1_Config>
 8001c16:	4603      	mov	r3, r0
 8001c18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001c1a:	7cfb      	ldrb	r3, [r7, #19]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8001c20:	7cfb      	ldrb	r3, [r7, #19]
 8001c22:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d02b      	beq.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001c30:	490b      	ldr	r1, [pc, #44]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c32:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c38:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c40:	4313      	orrs	r3, r2
 8001c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c4e:	d109      	bne.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001c50:	4a03      	ldr	r2, [pc, #12]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c52:	4b03      	ldr	r3, [pc, #12]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c5a:	60d3      	str	r3, [r2, #12]
 8001c5c:	e014      	b.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8001c5e:	bf00      	nop
 8001c60:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c6c:	d10c      	bne.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3304      	adds	r3, #4
 8001c72:	2101      	movs	r1, #1
 8001c74:	4618      	mov	r0, r3
 8001c76:	f000 f867 	bl	8001d48 <RCCEx_PLLSAI1_Config>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001c7e:	7cfb      	ldrb	r3, [r7, #19]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8001c84:	7cfb      	ldrb	r3, [r7, #19]
 8001c86:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d02f      	beq.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c94:	492b      	ldr	r1, [pc, #172]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001c96:	4b2b      	ldr	r3, [pc, #172]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c9c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001cae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001cb2:	d10d      	bne.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	2102      	movs	r1, #2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 f844 	bl	8001d48 <RCCEx_PLLSAI1_Config>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001cc4:	7cfb      	ldrb	r3, [r7, #19]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d014      	beq.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8001cca:	7cfb      	ldrb	r3, [r7, #19]
 8001ccc:	74bb      	strb	r3, [r7, #18]
 8001cce:	e011      	b.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cd8:	d10c      	bne.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3320      	adds	r3, #32
 8001cde:	2102      	movs	r1, #2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f000 f921 	bl	8001f28 <RCCEx_PLLSAI2_Config>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001cea:	7cfb      	ldrb	r3, [r7, #19]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8001cf0:	7cfb      	ldrb	r3, [r7, #19]
 8001cf2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00a      	beq.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001d00:	4910      	ldr	r1, [pc, #64]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d08:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d10:	4313      	orrs	r3, r2
 8001d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00b      	beq.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001d22:	4908      	ldr	r1, [pc, #32]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001d24:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d2a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d34:	4313      	orrs	r3, r2
 8001d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001d3a:	7cbb      	ldrb	r3, [r7, #18]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40021000 	.word	0x40021000

08001d48 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001d56:	4b73      	ldr	r3, [pc, #460]	; (8001f24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d018      	beq.n	8001d94 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001d62:	4b70      	ldr	r3, [pc, #448]	; (8001f24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	f003 0203 	and.w	r2, r3, #3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d10d      	bne.n	8001d8e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
       ||
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d009      	beq.n	8001d8e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001d7a:	4b6a      	ldr	r3, [pc, #424]	; (8001f24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	091b      	lsrs	r3, r3, #4
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	1c5a      	adds	r2, r3, #1
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
       ||
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d044      	beq.n	8001e18 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	73fb      	strb	r3, [r7, #15]
 8001d92:	e041      	b.n	8001e18 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d00c      	beq.n	8001db6 <RCCEx_PLLSAI1_Config+0x6e>
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d013      	beq.n	8001dc8 <RCCEx_PLLSAI1_Config+0x80>
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d120      	bne.n	8001de6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001da4:	4b5f      	ldr	r3, [pc, #380]	; (8001f24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d11d      	bne.n	8001dec <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001db4:	e01a      	b.n	8001dec <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001db6:	4b5b      	ldr	r3, [pc, #364]	; (8001f24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d116      	bne.n	8001df0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dc6:	e013      	b.n	8001df0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001dc8:	4b56      	ldr	r3, [pc, #344]	; (8001f24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10f      	bne.n	8001df4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001dd4:	4b53      	ldr	r3, [pc, #332]	; (8001f24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d109      	bne.n	8001df4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001de4:	e006      	b.n	8001df4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	73fb      	strb	r3, [r7, #15]
      break;
 8001dea:	e004      	b.n	8001df6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001dec:	bf00      	nop
 8001dee:	e002      	b.n	8001df6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001df0:	bf00      	nop
 8001df2:	e000      	b.n	8001df6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001df4:	bf00      	nop
    }

    if(status == HAL_OK)
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d10d      	bne.n	8001e18 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001dfc:	4849      	ldr	r0, [pc, #292]	; (8001f24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001dfe:	4b49      	ldr	r3, [pc, #292]	; (8001f24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6819      	ldr	r1, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	011b      	lsls	r3, r3, #4
 8001e12:	430b      	orrs	r3, r1
 8001e14:	4313      	orrs	r3, r2
 8001e16:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d17d      	bne.n	8001f1a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001e1e:	4a41      	ldr	r2, [pc, #260]	; (8001f24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e20:	4b40      	ldr	r3, [pc, #256]	; (8001f24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e2a:	f7fe fbcf 	bl	80005cc <HAL_GetTick>
 8001e2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001e30:	e009      	b.n	8001e46 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001e32:	f7fe fbcb 	bl	80005cc <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d902      	bls.n	8001e46 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	73fb      	strb	r3, [r7, #15]
        break;
 8001e44:	e005      	b.n	8001e52 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001e46:	4b37      	ldr	r3, [pc, #220]	; (8001f24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1ef      	bne.n	8001e32 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d160      	bne.n	8001f1a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d111      	bne.n	8001e82 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001e5e:	4831      	ldr	r0, [pc, #196]	; (8001f24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e60:	4b30      	ldr	r3, [pc, #192]	; (8001f24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8001e68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6892      	ldr	r2, [r2, #8]
 8001e70:	0211      	lsls	r1, r2, #8
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68d2      	ldr	r2, [r2, #12]
 8001e76:	0912      	lsrs	r2, r2, #4
 8001e78:	0452      	lsls	r2, r2, #17
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	6103      	str	r3, [r0, #16]
 8001e80:	e027      	b.n	8001ed2 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d112      	bne.n	8001eae <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001e88:	4826      	ldr	r0, [pc, #152]	; (8001f24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e8a:	4b26      	ldr	r3, [pc, #152]	; (8001f24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001e92:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6892      	ldr	r2, [r2, #8]
 8001e9a:	0211      	lsls	r1, r2, #8
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6912      	ldr	r2, [r2, #16]
 8001ea0:	0852      	lsrs	r2, r2, #1
 8001ea2:	3a01      	subs	r2, #1
 8001ea4:	0552      	lsls	r2, r2, #21
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	6103      	str	r3, [r0, #16]
 8001eac:	e011      	b.n	8001ed2 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001eae:	481d      	ldr	r0, [pc, #116]	; (8001f24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001eb0:	4b1c      	ldr	r3, [pc, #112]	; (8001f24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001eb8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6892      	ldr	r2, [r2, #8]
 8001ec0:	0211      	lsls	r1, r2, #8
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6952      	ldr	r2, [r2, #20]
 8001ec6:	0852      	lsrs	r2, r2, #1
 8001ec8:	3a01      	subs	r2, #1
 8001eca:	0652      	lsls	r2, r2, #25
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001ed2:	4a14      	ldr	r2, [pc, #80]	; (8001f24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ed4:	4b13      	ldr	r3, [pc, #76]	; (8001f24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001edc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ede:	f7fe fb75 	bl	80005cc <HAL_GetTick>
 8001ee2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001ee4:	e009      	b.n	8001efa <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001ee6:	f7fe fb71 	bl	80005cc <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d902      	bls.n	8001efa <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	73fb      	strb	r3, [r7, #15]
          break;
 8001ef8:	e005      	b.n	8001f06 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001efa:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0ef      	beq.n	8001ee6 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d106      	bne.n	8001f1a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001f0c:	4905      	ldr	r1, [pc, #20]	; (8001f24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f0e:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f10:	691a      	ldr	r2, [r3, #16]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40021000 	.word	0x40021000

08001f28 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001f36:	4b68      	ldr	r3, [pc, #416]	; (80020d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d018      	beq.n	8001f74 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001f42:	4b65      	ldr	r3, [pc, #404]	; (80020d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	f003 0203 	and.w	r2, r3, #3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d10d      	bne.n	8001f6e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
       ||
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d009      	beq.n	8001f6e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001f5a:	4b5f      	ldr	r3, [pc, #380]	; (80020d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	091b      	lsrs	r3, r3, #4
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	1c5a      	adds	r2, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
       ||
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d044      	beq.n	8001ff8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	73fb      	strb	r3, [r7, #15]
 8001f72:	e041      	b.n	8001ff8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d00c      	beq.n	8001f96 <RCCEx_PLLSAI2_Config+0x6e>
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	d013      	beq.n	8001fa8 <RCCEx_PLLSAI2_Config+0x80>
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d120      	bne.n	8001fc6 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001f84:	4b54      	ldr	r3, [pc, #336]	; (80020d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d11d      	bne.n	8001fcc <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f94:	e01a      	b.n	8001fcc <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001f96:	4b50      	ldr	r3, [pc, #320]	; (80020d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d116      	bne.n	8001fd0 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fa6:	e013      	b.n	8001fd0 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001fa8:	4b4b      	ldr	r3, [pc, #300]	; (80020d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10f      	bne.n	8001fd4 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001fb4:	4b48      	ldr	r3, [pc, #288]	; (80020d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d109      	bne.n	8001fd4 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001fc4:	e006      	b.n	8001fd4 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	73fb      	strb	r3, [r7, #15]
      break;
 8001fca:	e004      	b.n	8001fd6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8001fcc:	bf00      	nop
 8001fce:	e002      	b.n	8001fd6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8001fd0:	bf00      	nop
 8001fd2:	e000      	b.n	8001fd6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8001fd4:	bf00      	nop
    }

    if(status == HAL_OK)
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10d      	bne.n	8001ff8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001fdc:	483e      	ldr	r0, [pc, #248]	; (80020d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001fde:	4b3e      	ldr	r3, [pc, #248]	; (80020d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6819      	ldr	r1, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	011b      	lsls	r3, r3, #4
 8001ff2:	430b      	orrs	r3, r1
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d167      	bne.n	80020ce <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8001ffe:	4a36      	ldr	r2, [pc, #216]	; (80020d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002000:	4b35      	ldr	r3, [pc, #212]	; (80020d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002008:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800200a:	f7fe fadf 	bl	80005cc <HAL_GetTick>
 800200e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002010:	e009      	b.n	8002026 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002012:	f7fe fadb 	bl	80005cc <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d902      	bls.n	8002026 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	73fb      	strb	r3, [r7, #15]
        break;
 8002024:	e005      	b.n	8002032 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002026:	4b2c      	ldr	r3, [pc, #176]	; (80020d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1ef      	bne.n	8002012 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002032:	7bfb      	ldrb	r3, [r7, #15]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d14a      	bne.n	80020ce <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d111      	bne.n	8002062 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800203e:	4826      	ldr	r0, [pc, #152]	; (80020d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002040:	4b25      	ldr	r3, [pc, #148]	; (80020d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6892      	ldr	r2, [r2, #8]
 8002050:	0211      	lsls	r1, r2, #8
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	68d2      	ldr	r2, [r2, #12]
 8002056:	0912      	lsrs	r2, r2, #4
 8002058:	0452      	lsls	r2, r2, #17
 800205a:	430a      	orrs	r2, r1
 800205c:	4313      	orrs	r3, r2
 800205e:	6143      	str	r3, [r0, #20]
 8002060:	e011      	b.n	8002086 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002062:	481d      	ldr	r0, [pc, #116]	; (80020d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002064:	4b1c      	ldr	r3, [pc, #112]	; (80020d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800206c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	6892      	ldr	r2, [r2, #8]
 8002074:	0211      	lsls	r1, r2, #8
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6912      	ldr	r2, [r2, #16]
 800207a:	0852      	lsrs	r2, r2, #1
 800207c:	3a01      	subs	r2, #1
 800207e:	0652      	lsls	r2, r2, #25
 8002080:	430a      	orrs	r2, r1
 8002082:	4313      	orrs	r3, r2
 8002084:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002086:	4a14      	ldr	r2, [pc, #80]	; (80020d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002088:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002090:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002092:	f7fe fa9b 	bl	80005cc <HAL_GetTick>
 8002096:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002098:	e009      	b.n	80020ae <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800209a:	f7fe fa97 	bl	80005cc <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d902      	bls.n	80020ae <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	73fb      	strb	r3, [r7, #15]
          break;
 80020ac:	e005      	b.n	80020ba <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80020ae:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0ef      	beq.n	800209a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d106      	bne.n	80020ce <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80020c0:	4905      	ldr	r1, [pc, #20]	; (80020d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80020c2:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80020c4:	695a      	ldr	r2, [r3, #20]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40021000 	.word	0x40021000

080020dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e01d      	b.n	800212a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d106      	bne.n	8002108 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f815 	bl	8002132 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2202      	movs	r2, #2
 800210c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3304      	adds	r3, #4
 8002118:	4619      	mov	r1, r3
 800211a:	4610      	mov	r0, r2
 800211c:	f000 f988 	bl	8002430 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
	...

08002148 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6812      	ldr	r2, [r2, #0]
 8002158:	68d2      	ldr	r2, [r2, #12]
 800215a:	f042 0201 	orr.w	r2, r2, #1
 800215e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	4b0d      	ldr	r3, [pc, #52]	; (800219c <HAL_TIM_Base_Start_IT+0x54>)
 8002168:	4013      	ands	r3, r2
 800216a:	2b06      	cmp	r3, #6
 800216c:	d00f      	beq.n	800218e <HAL_TIM_Base_Start_IT+0x46>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	4b09      	ldr	r3, [pc, #36]	; (800219c <HAL_TIM_Base_Start_IT+0x54>)
 8002176:	4013      	ands	r3, r2
 8002178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800217c:	d007      	beq.n	800218e <HAL_TIM_Base_Start_IT+0x46>
  {
    __HAL_TIM_ENABLE(htim);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6812      	ldr	r2, [r2, #0]
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	f042 0201 	orr.w	r2, r2, #1
 800218c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	00010007 	.word	0x00010007

080021a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d122      	bne.n	80021fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d11b      	bne.n	80021fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f06f 0202 	mvn.w	r2, #2
 80021cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f905 	bl	80023f2 <HAL_TIM_IC_CaptureCallback>
 80021e8:	e005      	b.n	80021f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f8f7 	bl	80023de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f908 	bl	8002406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	f003 0304 	and.w	r3, r3, #4
 8002206:	2b04      	cmp	r3, #4
 8002208:	d122      	bne.n	8002250 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b04      	cmp	r3, #4
 8002216:	d11b      	bne.n	8002250 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f06f 0204 	mvn.w	r2, #4
 8002220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2202      	movs	r2, #2
 8002226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f8db 	bl	80023f2 <HAL_TIM_IC_CaptureCallback>
 800223c:	e005      	b.n	800224a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f8cd 	bl	80023de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f8de 	bl	8002406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b08      	cmp	r3, #8
 800225c:	d122      	bne.n	80022a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	2b08      	cmp	r3, #8
 800226a:	d11b      	bne.n	80022a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f06f 0208 	mvn.w	r2, #8
 8002274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2204      	movs	r2, #4
 800227a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f8b1 	bl	80023f2 <HAL_TIM_IC_CaptureCallback>
 8002290:	e005      	b.n	800229e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f8a3 	bl	80023de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 f8b4 	bl	8002406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	f003 0310 	and.w	r3, r3, #16
 80022ae:	2b10      	cmp	r3, #16
 80022b0:	d122      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f003 0310 	and.w	r3, r3, #16
 80022bc:	2b10      	cmp	r3, #16
 80022be:	d11b      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f06f 0210 	mvn.w	r2, #16
 80022c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2208      	movs	r2, #8
 80022ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f887 	bl	80023f2 <HAL_TIM_IC_CaptureCallback>
 80022e4:	e005      	b.n	80022f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f879 	bl	80023de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f88a 	bl	8002406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b01      	cmp	r3, #1
 8002304:	d10e      	bne.n	8002324 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b01      	cmp	r3, #1
 8002312:	d107      	bne.n	8002324 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0201 	mvn.w	r2, #1
 800231c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f003 fac6 	bl	80058b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800232e:	2b80      	cmp	r3, #128	; 0x80
 8002330:	d10e      	bne.n	8002350 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800233c:	2b80      	cmp	r3, #128	; 0x80
 800233e:	d107      	bne.n	8002350 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f914 	bl	8002578 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800235e:	d10e      	bne.n	800237e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800236a:	2b80      	cmp	r3, #128	; 0x80
 800236c:	d107      	bne.n	800237e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 f907 	bl	800258c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002388:	2b40      	cmp	r3, #64	; 0x40
 800238a:	d10e      	bne.n	80023aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002396:	2b40      	cmp	r3, #64	; 0x40
 8002398:	d107      	bne.n	80023aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 f838 	bl	800241a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	f003 0320 	and.w	r3, r3, #32
 80023b4:	2b20      	cmp	r3, #32
 80023b6:	d10e      	bne.n	80023d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f003 0320 	and.w	r3, r3, #32
 80023c2:	2b20      	cmp	r3, #32
 80023c4:	d107      	bne.n	80023d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f06f 0220 	mvn.w	r2, #32
 80023ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f8c7 	bl	8002564 <HAL_TIMEx_CommutationCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023d6:	bf00      	nop
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
	...

08002430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a40      	ldr	r2, [pc, #256]	; (8002544 <TIM_Base_SetConfig+0x114>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d013      	beq.n	8002470 <TIM_Base_SetConfig+0x40>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800244e:	d00f      	beq.n	8002470 <TIM_Base_SetConfig+0x40>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a3d      	ldr	r2, [pc, #244]	; (8002548 <TIM_Base_SetConfig+0x118>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d00b      	beq.n	8002470 <TIM_Base_SetConfig+0x40>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a3c      	ldr	r2, [pc, #240]	; (800254c <TIM_Base_SetConfig+0x11c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d007      	beq.n	8002470 <TIM_Base_SetConfig+0x40>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a3b      	ldr	r2, [pc, #236]	; (8002550 <TIM_Base_SetConfig+0x120>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d003      	beq.n	8002470 <TIM_Base_SetConfig+0x40>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a3a      	ldr	r2, [pc, #232]	; (8002554 <TIM_Base_SetConfig+0x124>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d108      	bne.n	8002482 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002476:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	4313      	orrs	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a2f      	ldr	r2, [pc, #188]	; (8002544 <TIM_Base_SetConfig+0x114>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d01f      	beq.n	80024ca <TIM_Base_SetConfig+0x9a>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002490:	d01b      	beq.n	80024ca <TIM_Base_SetConfig+0x9a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a2c      	ldr	r2, [pc, #176]	; (8002548 <TIM_Base_SetConfig+0x118>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d017      	beq.n	80024ca <TIM_Base_SetConfig+0x9a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a2b      	ldr	r2, [pc, #172]	; (800254c <TIM_Base_SetConfig+0x11c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d013      	beq.n	80024ca <TIM_Base_SetConfig+0x9a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a2a      	ldr	r2, [pc, #168]	; (8002550 <TIM_Base_SetConfig+0x120>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d00f      	beq.n	80024ca <TIM_Base_SetConfig+0x9a>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a29      	ldr	r2, [pc, #164]	; (8002554 <TIM_Base_SetConfig+0x124>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00b      	beq.n	80024ca <TIM_Base_SetConfig+0x9a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a28      	ldr	r2, [pc, #160]	; (8002558 <TIM_Base_SetConfig+0x128>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d007      	beq.n	80024ca <TIM_Base_SetConfig+0x9a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a27      	ldr	r2, [pc, #156]	; (800255c <TIM_Base_SetConfig+0x12c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d003      	beq.n	80024ca <TIM_Base_SetConfig+0x9a>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a26      	ldr	r2, [pc, #152]	; (8002560 <TIM_Base_SetConfig+0x130>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d108      	bne.n	80024dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	4313      	orrs	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a10      	ldr	r2, [pc, #64]	; (8002544 <TIM_Base_SetConfig+0x114>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d00f      	beq.n	8002528 <TIM_Base_SetConfig+0xf8>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a12      	ldr	r2, [pc, #72]	; (8002554 <TIM_Base_SetConfig+0x124>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d00b      	beq.n	8002528 <TIM_Base_SetConfig+0xf8>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a11      	ldr	r2, [pc, #68]	; (8002558 <TIM_Base_SetConfig+0x128>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d007      	beq.n	8002528 <TIM_Base_SetConfig+0xf8>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a10      	ldr	r2, [pc, #64]	; (800255c <TIM_Base_SetConfig+0x12c>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d003      	beq.n	8002528 <TIM_Base_SetConfig+0xf8>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a0f      	ldr	r2, [pc, #60]	; (8002560 <TIM_Base_SetConfig+0x130>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d103      	bne.n	8002530 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	615a      	str	r2, [r3, #20]
}
 8002536:	bf00      	nop
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	40012c00 	.word	0x40012c00
 8002548:	40000400 	.word	0x40000400
 800254c:	40000800 	.word	0x40000800
 8002550:	40000c00 	.word	0x40000c00
 8002554:	40013400 	.word	0x40013400
 8002558:	40014000 	.word	0x40014000
 800255c:	40014400 	.word	0x40014400
 8002560:	40014800 	.word	0x40014800

08002564 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e043      	b.n	800263a <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d106      	bne.n	80025cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f003 f9b4 	bl	8005934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2224      	movs	r2, #36	; 0x24
 80025d0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	6812      	ldr	r2, [r2, #0]
 80025de:	f022 0201 	bic.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 f8b9 	bl	800275c <UART_SetConfig>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e022      	b.n	800263a <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 fbeb 	bl	8002dd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6812      	ldr	r2, [r2, #0]
 800260a:	6852      	ldr	r2, [r2, #4]
 800260c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002610:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6812      	ldr	r2, [r2, #0]
 800261a:	6892      	ldr	r2, [r2, #8]
 800261c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002620:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	6812      	ldr	r2, [r2, #0]
 800262c:	f042 0201 	orr.w	r2, r2, #1
 8002630:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 fc72 	bl	8002f1c <UART_CheckIdleState>
 8002638:	4603      	mov	r3, r0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b088      	sub	sp, #32
 8002646:	af02      	add	r7, sp, #8
 8002648:	60f8      	str	r0, [r7, #12]
 800264a:	60b9      	str	r1, [r7, #8]
 800264c:	603b      	str	r3, [r7, #0]
 800264e:	4613      	mov	r3, r2
 8002650:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b20      	cmp	r3, #32
 8002660:	d177      	bne.n	8002752 <HAL_UART_Transmit+0x110>
  {
    if ((pData == NULL) || (Size == 0U))
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <HAL_UART_Transmit+0x2c>
 8002668:	88fb      	ldrh	r3, [r7, #6]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e070      	b.n	8002754 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_UART_Transmit+0x3e>
 800267c:	2302      	movs	r3, #2
 800267e:	e069      	b.n	8002754 <HAL_UART_Transmit+0x112>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	675a      	str	r2, [r3, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2221      	movs	r2, #33	; 0x21
 8002692:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002696:	f7fd ff99 	bl	80005cc <HAL_GetTick>
 800269a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	88fa      	ldrh	r2, [r7, #6]
 80026a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	88fa      	ldrh	r2, [r7, #6]
 80026a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    while (huart->TxXferCount > 0U)
 80026ac:	e034      	b.n	8002718 <HAL_UART_Transmit+0xd6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2200      	movs	r2, #0
 80026b6:	2180      	movs	r1, #128	; 0x80
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 fc78 	bl	8002fae <UART_WaitOnFlagUntilTimeout>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <HAL_UART_Transmit+0x86>
      {
        return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e045      	b.n	8002754 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d0:	d111      	bne.n	80026f6 <HAL_UART_Transmit+0xb4>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10d      	bne.n	80026f6 <HAL_UART_Transmit+0xb4>
      {
        tmp = (uint16_t *) pData;
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	8812      	ldrh	r2, [r2, #0]
 80026e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026ea:	b292      	uxth	r2, r2
 80026ec:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	3302      	adds	r3, #2
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	e007      	b.n	8002706 <HAL_UART_Transmit+0xc4>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	1c59      	adds	r1, r3, #1
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	b29b      	uxth	r3, r3
 8002704:	8513      	strh	r3, [r2, #40]	; 0x28
      }
      huart->TxXferCount--;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800270c:	b29b      	uxth	r3, r3
 800270e:	3b01      	subs	r3, #1
 8002710:	b29a      	uxth	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800271e:	b29b      	uxth	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1c4      	bne.n	80026ae <HAL_UART_Transmit+0x6c>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	2200      	movs	r2, #0
 800272c:	2140      	movs	r1, #64	; 0x40
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 fc3d 	bl	8002fae <UART_WaitOnFlagUntilTimeout>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e00a      	b.n	8002754 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2220      	movs	r2, #32
 8002742:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	e000      	b.n	8002754 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 8002752:	2302      	movs	r3, #2
  }
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800275c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002760:	b088      	sub	sp, #32
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002766:	2300      	movs	r3, #0
 8002768:	61fb      	str	r3, [r7, #28]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800276a:	2310      	movs	r3, #16
 800276c:	76fb      	strb	r3, [r7, #27]
  uint16_t brrtemp                    = 0x0000U;
 800276e:	2300      	movs	r3, #0
 8002770:	817b      	strh	r3, [r7, #10]
  uint32_t usartdiv                   = 0x00000000U;
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	431a      	orrs	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	4313      	orrs	r3, r2
 8002794:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6819      	ldr	r1, [r3, #0]
 80027a0:	4baa      	ldr	r3, [pc, #680]	; (8002a4c <UART_SetConfig+0x2f0>)
 80027a2:	400b      	ands	r3, r1
 80027a4:	69f9      	ldr	r1, [r7, #28]
 80027a6:	430b      	orrs	r3, r1
 80027a8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6812      	ldr	r2, [r2, #0]
 80027b2:	6852      	ldr	r2, [r2, #4]
 80027b4:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	68d2      	ldr	r2, [r2, #12]
 80027bc:	430a      	orrs	r2, r1
 80027be:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4aa1      	ldr	r2, [pc, #644]	; (8002a50 <UART_SetConfig+0x2f4>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d004      	beq.n	80027da <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	69fa      	ldr	r2, [r7, #28]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	6892      	ldr	r2, [r2, #8]
 80027e4:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 80027e8:	69fa      	ldr	r2, [r7, #28]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a98      	ldr	r2, [pc, #608]	; (8002a54 <UART_SetConfig+0x2f8>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d121      	bne.n	800283c <UART_SetConfig+0xe0>
 80027f8:	4b97      	ldr	r3, [pc, #604]	; (8002a58 <UART_SetConfig+0x2fc>)
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	2b03      	cmp	r3, #3
 8002804:	d816      	bhi.n	8002834 <UART_SetConfig+0xd8>
 8002806:	a201      	add	r2, pc, #4	; (adr r2, 800280c <UART_SetConfig+0xb0>)
 8002808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800280c:	0800281d 	.word	0x0800281d
 8002810:	08002829 	.word	0x08002829
 8002814:	08002823 	.word	0x08002823
 8002818:	0800282f 	.word	0x0800282f
 800281c:	2301      	movs	r3, #1
 800281e:	76fb      	strb	r3, [r7, #27]
 8002820:	e0e4      	b.n	80029ec <UART_SetConfig+0x290>
 8002822:	2302      	movs	r3, #2
 8002824:	76fb      	strb	r3, [r7, #27]
 8002826:	e0e1      	b.n	80029ec <UART_SetConfig+0x290>
 8002828:	2304      	movs	r3, #4
 800282a:	76fb      	strb	r3, [r7, #27]
 800282c:	e0de      	b.n	80029ec <UART_SetConfig+0x290>
 800282e:	2308      	movs	r3, #8
 8002830:	76fb      	strb	r3, [r7, #27]
 8002832:	e0db      	b.n	80029ec <UART_SetConfig+0x290>
 8002834:	2310      	movs	r3, #16
 8002836:	76fb      	strb	r3, [r7, #27]
 8002838:	bf00      	nop
 800283a:	e0d7      	b.n	80029ec <UART_SetConfig+0x290>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a86      	ldr	r2, [pc, #536]	; (8002a5c <UART_SetConfig+0x300>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d134      	bne.n	80028b0 <UART_SetConfig+0x154>
 8002846:	4b84      	ldr	r3, [pc, #528]	; (8002a58 <UART_SetConfig+0x2fc>)
 8002848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284c:	f003 030c 	and.w	r3, r3, #12
 8002850:	2b0c      	cmp	r3, #12
 8002852:	d829      	bhi.n	80028a8 <UART_SetConfig+0x14c>
 8002854:	a201      	add	r2, pc, #4	; (adr r2, 800285c <UART_SetConfig+0x100>)
 8002856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800285a:	bf00      	nop
 800285c:	08002891 	.word	0x08002891
 8002860:	080028a9 	.word	0x080028a9
 8002864:	080028a9 	.word	0x080028a9
 8002868:	080028a9 	.word	0x080028a9
 800286c:	0800289d 	.word	0x0800289d
 8002870:	080028a9 	.word	0x080028a9
 8002874:	080028a9 	.word	0x080028a9
 8002878:	080028a9 	.word	0x080028a9
 800287c:	08002897 	.word	0x08002897
 8002880:	080028a9 	.word	0x080028a9
 8002884:	080028a9 	.word	0x080028a9
 8002888:	080028a9 	.word	0x080028a9
 800288c:	080028a3 	.word	0x080028a3
 8002890:	2300      	movs	r3, #0
 8002892:	76fb      	strb	r3, [r7, #27]
 8002894:	e0aa      	b.n	80029ec <UART_SetConfig+0x290>
 8002896:	2302      	movs	r3, #2
 8002898:	76fb      	strb	r3, [r7, #27]
 800289a:	e0a7      	b.n	80029ec <UART_SetConfig+0x290>
 800289c:	2304      	movs	r3, #4
 800289e:	76fb      	strb	r3, [r7, #27]
 80028a0:	e0a4      	b.n	80029ec <UART_SetConfig+0x290>
 80028a2:	2308      	movs	r3, #8
 80028a4:	76fb      	strb	r3, [r7, #27]
 80028a6:	e0a1      	b.n	80029ec <UART_SetConfig+0x290>
 80028a8:	2310      	movs	r3, #16
 80028aa:	76fb      	strb	r3, [r7, #27]
 80028ac:	bf00      	nop
 80028ae:	e09d      	b.n	80029ec <UART_SetConfig+0x290>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a6a      	ldr	r2, [pc, #424]	; (8002a60 <UART_SetConfig+0x304>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d120      	bne.n	80028fc <UART_SetConfig+0x1a0>
 80028ba:	4b67      	ldr	r3, [pc, #412]	; (8002a58 <UART_SetConfig+0x2fc>)
 80028bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80028c4:	2b10      	cmp	r3, #16
 80028c6:	d00f      	beq.n	80028e8 <UART_SetConfig+0x18c>
 80028c8:	2b10      	cmp	r3, #16
 80028ca:	d802      	bhi.n	80028d2 <UART_SetConfig+0x176>
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <UART_SetConfig+0x180>
 80028d0:	e010      	b.n	80028f4 <UART_SetConfig+0x198>
 80028d2:	2b20      	cmp	r3, #32
 80028d4:	d005      	beq.n	80028e2 <UART_SetConfig+0x186>
 80028d6:	2b30      	cmp	r3, #48	; 0x30
 80028d8:	d009      	beq.n	80028ee <UART_SetConfig+0x192>
 80028da:	e00b      	b.n	80028f4 <UART_SetConfig+0x198>
 80028dc:	2300      	movs	r3, #0
 80028de:	76fb      	strb	r3, [r7, #27]
 80028e0:	e084      	b.n	80029ec <UART_SetConfig+0x290>
 80028e2:	2302      	movs	r3, #2
 80028e4:	76fb      	strb	r3, [r7, #27]
 80028e6:	e081      	b.n	80029ec <UART_SetConfig+0x290>
 80028e8:	2304      	movs	r3, #4
 80028ea:	76fb      	strb	r3, [r7, #27]
 80028ec:	e07e      	b.n	80029ec <UART_SetConfig+0x290>
 80028ee:	2308      	movs	r3, #8
 80028f0:	76fb      	strb	r3, [r7, #27]
 80028f2:	e07b      	b.n	80029ec <UART_SetConfig+0x290>
 80028f4:	2310      	movs	r3, #16
 80028f6:	76fb      	strb	r3, [r7, #27]
 80028f8:	bf00      	nop
 80028fa:	e077      	b.n	80029ec <UART_SetConfig+0x290>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a58      	ldr	r2, [pc, #352]	; (8002a64 <UART_SetConfig+0x308>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d120      	bne.n	8002948 <UART_SetConfig+0x1ec>
 8002906:	4b54      	ldr	r3, [pc, #336]	; (8002a58 <UART_SetConfig+0x2fc>)
 8002908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002910:	2b40      	cmp	r3, #64	; 0x40
 8002912:	d00f      	beq.n	8002934 <UART_SetConfig+0x1d8>
 8002914:	2b40      	cmp	r3, #64	; 0x40
 8002916:	d802      	bhi.n	800291e <UART_SetConfig+0x1c2>
 8002918:	2b00      	cmp	r3, #0
 800291a:	d005      	beq.n	8002928 <UART_SetConfig+0x1cc>
 800291c:	e010      	b.n	8002940 <UART_SetConfig+0x1e4>
 800291e:	2b80      	cmp	r3, #128	; 0x80
 8002920:	d005      	beq.n	800292e <UART_SetConfig+0x1d2>
 8002922:	2bc0      	cmp	r3, #192	; 0xc0
 8002924:	d009      	beq.n	800293a <UART_SetConfig+0x1de>
 8002926:	e00b      	b.n	8002940 <UART_SetConfig+0x1e4>
 8002928:	2300      	movs	r3, #0
 800292a:	76fb      	strb	r3, [r7, #27]
 800292c:	e05e      	b.n	80029ec <UART_SetConfig+0x290>
 800292e:	2302      	movs	r3, #2
 8002930:	76fb      	strb	r3, [r7, #27]
 8002932:	e05b      	b.n	80029ec <UART_SetConfig+0x290>
 8002934:	2304      	movs	r3, #4
 8002936:	76fb      	strb	r3, [r7, #27]
 8002938:	e058      	b.n	80029ec <UART_SetConfig+0x290>
 800293a:	2308      	movs	r3, #8
 800293c:	76fb      	strb	r3, [r7, #27]
 800293e:	e055      	b.n	80029ec <UART_SetConfig+0x290>
 8002940:	2310      	movs	r3, #16
 8002942:	76fb      	strb	r3, [r7, #27]
 8002944:	bf00      	nop
 8002946:	e051      	b.n	80029ec <UART_SetConfig+0x290>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a46      	ldr	r2, [pc, #280]	; (8002a68 <UART_SetConfig+0x30c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d124      	bne.n	800299c <UART_SetConfig+0x240>
 8002952:	4b41      	ldr	r3, [pc, #260]	; (8002a58 <UART_SetConfig+0x2fc>)
 8002954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002958:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800295c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002960:	d012      	beq.n	8002988 <UART_SetConfig+0x22c>
 8002962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002966:	d802      	bhi.n	800296e <UART_SetConfig+0x212>
 8002968:	2b00      	cmp	r3, #0
 800296a:	d007      	beq.n	800297c <UART_SetConfig+0x220>
 800296c:	e012      	b.n	8002994 <UART_SetConfig+0x238>
 800296e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002972:	d006      	beq.n	8002982 <UART_SetConfig+0x226>
 8002974:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002978:	d009      	beq.n	800298e <UART_SetConfig+0x232>
 800297a:	e00b      	b.n	8002994 <UART_SetConfig+0x238>
 800297c:	2300      	movs	r3, #0
 800297e:	76fb      	strb	r3, [r7, #27]
 8002980:	e034      	b.n	80029ec <UART_SetConfig+0x290>
 8002982:	2302      	movs	r3, #2
 8002984:	76fb      	strb	r3, [r7, #27]
 8002986:	e031      	b.n	80029ec <UART_SetConfig+0x290>
 8002988:	2304      	movs	r3, #4
 800298a:	76fb      	strb	r3, [r7, #27]
 800298c:	e02e      	b.n	80029ec <UART_SetConfig+0x290>
 800298e:	2308      	movs	r3, #8
 8002990:	76fb      	strb	r3, [r7, #27]
 8002992:	e02b      	b.n	80029ec <UART_SetConfig+0x290>
 8002994:	2310      	movs	r3, #16
 8002996:	76fb      	strb	r3, [r7, #27]
 8002998:	bf00      	nop
 800299a:	e027      	b.n	80029ec <UART_SetConfig+0x290>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a2b      	ldr	r2, [pc, #172]	; (8002a50 <UART_SetConfig+0x2f4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d123      	bne.n	80029ee <UART_SetConfig+0x292>
 80029a6:	4b2c      	ldr	r3, [pc, #176]	; (8002a58 <UART_SetConfig+0x2fc>)
 80029a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b4:	d012      	beq.n	80029dc <UART_SetConfig+0x280>
 80029b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ba:	d802      	bhi.n	80029c2 <UART_SetConfig+0x266>
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d007      	beq.n	80029d0 <UART_SetConfig+0x274>
 80029c0:	e012      	b.n	80029e8 <UART_SetConfig+0x28c>
 80029c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029c6:	d006      	beq.n	80029d6 <UART_SetConfig+0x27a>
 80029c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029cc:	d009      	beq.n	80029e2 <UART_SetConfig+0x286>
 80029ce:	e00b      	b.n	80029e8 <UART_SetConfig+0x28c>
 80029d0:	2300      	movs	r3, #0
 80029d2:	76fb      	strb	r3, [r7, #27]
 80029d4:	e00a      	b.n	80029ec <UART_SetConfig+0x290>
 80029d6:	2302      	movs	r3, #2
 80029d8:	76fb      	strb	r3, [r7, #27]
 80029da:	e007      	b.n	80029ec <UART_SetConfig+0x290>
 80029dc:	2304      	movs	r3, #4
 80029de:	76fb      	strb	r3, [r7, #27]
 80029e0:	e004      	b.n	80029ec <UART_SetConfig+0x290>
 80029e2:	2308      	movs	r3, #8
 80029e4:	76fb      	strb	r3, [r7, #27]
 80029e6:	e001      	b.n	80029ec <UART_SetConfig+0x290>
 80029e8:	2310      	movs	r3, #16
 80029ea:	76fb      	strb	r3, [r7, #27]
 80029ec:	bf00      	nop

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a17      	ldr	r2, [pc, #92]	; (8002a50 <UART_SetConfig+0x2f4>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	f040 80ee 	bne.w	8002bd6 <UART_SetConfig+0x47a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80029fa:	7efb      	ldrb	r3, [r7, #27]
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d837      	bhi.n	8002a70 <UART_SetConfig+0x314>
 8002a00:	a201      	add	r2, pc, #4	; (adr r2, 8002a08 <UART_SetConfig+0x2ac>)
 8002a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a06:	bf00      	nop
 8002a08:	08002a2d 	.word	0x08002a2d
 8002a0c:	08002a71 	.word	0x08002a71
 8002a10:	08002a35 	.word	0x08002a35
 8002a14:	08002a71 	.word	0x08002a71
 8002a18:	08002a3b 	.word	0x08002a3b
 8002a1c:	08002a71 	.word	0x08002a71
 8002a20:	08002a71 	.word	0x08002a71
 8002a24:	08002a71 	.word	0x08002a71
 8002a28:	08002a43 	.word	0x08002a43
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002a2c:	f7fe fde8 	bl	8001600 <HAL_RCC_GetPCLK1Freq>
 8002a30:	60f8      	str	r0, [r7, #12]
#endif
        break;
 8002a32:	e020      	b.n	8002a76 <UART_SetConfig+0x31a>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002a34:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <UART_SetConfig+0x310>)
 8002a36:	60fb      	str	r3, [r7, #12]
#endif
        break;
 8002a38:	e01d      	b.n	8002a76 <UART_SetConfig+0x31a>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002a3a:	f7fe fd39 	bl	80014b0 <HAL_RCC_GetSysClockFreq>
 8002a3e:	60f8      	str	r0, [r7, #12]
#endif
        break;
 8002a40:	e019      	b.n	8002a76 <UART_SetConfig+0x31a>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a46:	60fb      	str	r3, [r7, #12]
#endif
        break;
 8002a48:	e015      	b.n	8002a76 <UART_SetConfig+0x31a>
 8002a4a:	bf00      	nop
 8002a4c:	efff69f3 	.word	0xefff69f3
 8002a50:	40008000 	.word	0x40008000
 8002a54:	40013800 	.word	0x40013800
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	40004400 	.word	0x40004400
 8002a60:	40004800 	.word	0x40004800
 8002a64:	40004c00 	.word	0x40004c00
 8002a68:	40005000 	.word	0x40005000
 8002a6c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	74fb      	strb	r3, [r7, #19]
        break;
 8002a74:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 819e 	beq.w	8002dba <UART_SetConfig+0x65e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	441a      	add	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d805      	bhi.n	8002a9a <UART_SetConfig+0x33e>
          (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate)))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d202      	bcs.n	8002aa0 <UART_SetConfig+0x344>
      {
        ret = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	74fb      	strb	r3, [r7, #19]
 8002a9e:	e18c      	b.n	8002dba <UART_SetConfig+0x65e>
      }
      else
      {
        switch (clocksource)
 8002aa0:	7efb      	ldrb	r3, [r7, #27]
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	f200 8084 	bhi.w	8002bb0 <UART_SetConfig+0x454>
 8002aa8:	a201      	add	r2, pc, #4	; (adr r2, 8002ab0 <UART_SetConfig+0x354>)
 8002aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aae:	bf00      	nop
 8002ab0:	08002ad5 	.word	0x08002ad5
 8002ab4:	08002bb1 	.word	0x08002bb1
 8002ab8:	08002b15 	.word	0x08002b15
 8002abc:	08002bb1 	.word	0x08002bb1
 8002ac0:	08002b49 	.word	0x08002b49
 8002ac4:	08002bb1 	.word	0x08002bb1
 8002ac8:	08002bb1 	.word	0x08002bb1
 8002acc:	08002bb1 	.word	0x08002bb1
 8002ad0:	08002b87 	.word	0x08002b87
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002ad4:	f7fe fd94 	bl	8001600 <HAL_RCC_GetPCLK1Freq>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	f04f 0400 	mov.w	r4, #0
 8002ade:	ea4f 2904 	mov.w	r9, r4, lsl #8
 8002ae2:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 8002ae6:	ea4f 2803 	mov.w	r8, r3, lsl #8
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	085b      	lsrs	r3, r3, #1
 8002af0:	f04f 0400 	mov.w	r4, #0
 8002af4:	eb18 0003 	adds.w	r0, r8, r3
 8002af8:	eb49 0104 	adc.w	r1, r9, r4
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f04f 0400 	mov.w	r4, #0
 8002b04:	461a      	mov	r2, r3
 8002b06:	4623      	mov	r3, r4
 8002b08:	f7fd fbb2 	bl	8000270 <__aeabi_uldivmod>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	460c      	mov	r4, r1
 8002b10:	617b      	str	r3, [r7, #20]
#endif
            break;
 8002b12:	e050      	b.n	8002bb6 <UART_SetConfig+0x45a>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	085b      	lsrs	r3, r3, #1
 8002b1a:	f04f 0400 	mov.w	r4, #0
 8002b1e:	49ad      	ldr	r1, [pc, #692]	; (8002dd4 <UART_SetConfig+0x678>)
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	eb13 0801 	adds.w	r8, r3, r1
 8002b28:	eb44 0902 	adc.w	r9, r4, r2
 8002b2c:	4640      	mov	r0, r8
 8002b2e:	4649      	mov	r1, r9
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f04f 0400 	mov.w	r4, #0
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4623      	mov	r3, r4
 8002b3c:	f7fd fb98 	bl	8000270 <__aeabi_uldivmod>
 8002b40:	4603      	mov	r3, r0
 8002b42:	460c      	mov	r4, r1
 8002b44:	617b      	str	r3, [r7, #20]
#endif
            break;
 8002b46:	e036      	b.n	8002bb6 <UART_SetConfig+0x45a>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002b48:	f7fe fcb2 	bl	80014b0 <HAL_RCC_GetSysClockFreq>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	461a      	mov	r2, r3
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	021d      	lsls	r5, r3, #8
 8002b56:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 8002b5a:	0214      	lsls	r4, r2, #8
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	085b      	lsrs	r3, r3, #1
 8002b62:	461a      	mov	r2, r3
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	18a0      	adds	r0, r4, r2
 8002b6a:	eb45 0103 	adc.w	r1, r5, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f04f 0400 	mov.w	r4, #0
 8002b76:	461a      	mov	r2, r3
 8002b78:	4623      	mov	r3, r4
 8002b7a:	f7fd fb79 	bl	8000270 <__aeabi_uldivmod>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	460c      	mov	r4, r1
 8002b82:	617b      	str	r3, [r7, #20]
#endif
            break;
 8002b84:	e017      	b.n	8002bb6 <UART_SetConfig+0x45a>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	085b      	lsrs	r3, r3, #1
 8002b8c:	f04f 0400 	mov.w	r4, #0
 8002b90:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8002b94:	f144 0100 	adc.w	r1, r4, #0
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f04f 0400 	mov.w	r4, #0
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4623      	mov	r3, r4
 8002ba4:	f7fd fb64 	bl	8000270 <__aeabi_uldivmod>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	460c      	mov	r4, r1
 8002bac:	617b      	str	r3, [r7, #20]
#endif
            break;
 8002bae:	e002      	b.n	8002bb6 <UART_SetConfig+0x45a>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	74fb      	strb	r3, [r7, #19]
            break;
 8002bb4:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bbc:	d308      	bcc.n	8002bd0 <UART_SetConfig+0x474>
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bc4:	d204      	bcs.n	8002bd0 <UART_SetConfig+0x474>
        {
          huart->Instance->BRR = usartdiv;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	60da      	str	r2, [r3, #12]
 8002bce:	e0f4      	b.n	8002dba <UART_SetConfig+0x65e>
        }
        else
        {
          ret = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	74fb      	strb	r3, [r7, #19]
 8002bd4:	e0f1      	b.n	8002dba <UART_SetConfig+0x65e>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bde:	d17e      	bne.n	8002cde <UART_SetConfig+0x582>
  {
    switch (clocksource)
 8002be0:	7efb      	ldrb	r3, [r7, #27]
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d85b      	bhi.n	8002c9e <UART_SetConfig+0x542>
 8002be6:	a201      	add	r2, pc, #4	; (adr r2, 8002bec <UART_SetConfig+0x490>)
 8002be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bec:	08002c11 	.word	0x08002c11
 8002bf0:	08002c2f 	.word	0x08002c2f
 8002bf4:	08002c4d 	.word	0x08002c4d
 8002bf8:	08002c9f 	.word	0x08002c9f
 8002bfc:	08002c69 	.word	0x08002c69
 8002c00:	08002c9f 	.word	0x08002c9f
 8002c04:	08002c9f 	.word	0x08002c9f
 8002c08:	08002c9f 	.word	0x08002c9f
 8002c0c:	08002c87 	.word	0x08002c87
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002c10:	f7fe fcf6 	bl	8001600 <HAL_RCC_GetPCLK1Freq>
 8002c14:	4603      	mov	r3, r0
 8002c16:	005a      	lsls	r2, r3, #1
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	085b      	lsrs	r3, r3, #1
 8002c1e:	441a      	add	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	617b      	str	r3, [r7, #20]
#endif
        break;
 8002c2c:	e03a      	b.n	8002ca4 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002c2e:	f7fe fcfd 	bl	800162c <HAL_RCC_GetPCLK2Freq>
 8002c32:	4603      	mov	r3, r0
 8002c34:	005a      	lsls	r2, r3, #1
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	085b      	lsrs	r3, r3, #1
 8002c3c:	441a      	add	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	617b      	str	r3, [r7, #20]
#endif
        break;
 8002c4a:	e02b      	b.n	8002ca4 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	085b      	lsrs	r3, r3, #1
 8002c52:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002c56:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6852      	ldr	r2, [r2, #4]
 8002c5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	617b      	str	r3, [r7, #20]
#endif
        break;
 8002c66:	e01d      	b.n	8002ca4 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002c68:	f7fe fc22 	bl	80014b0 <HAL_RCC_GetSysClockFreq>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	005a      	lsls	r2, r3, #1
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	085b      	lsrs	r3, r3, #1
 8002c76:	441a      	add	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	617b      	str	r3, [r7, #20]
#endif
        break;
 8002c84:	e00e      	b.n	8002ca4 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	085b      	lsrs	r3, r3, #1
 8002c8c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	617b      	str	r3, [r7, #20]
#endif
        break;
 8002c9c:	e002      	b.n	8002ca4 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	74fb      	strb	r3, [r7, #19]
        break;
 8002ca2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	2b0f      	cmp	r3, #15
 8002ca8:	d916      	bls.n	8002cd8 <UART_SetConfig+0x57c>
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb0:	d212      	bcs.n	8002cd8 <UART_SetConfig+0x57c>
    {
      brrtemp = usartdiv & 0xFFF0U;
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	f023 030f 	bic.w	r3, r3, #15
 8002cba:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	085b      	lsrs	r3, r3, #1
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	897b      	ldrh	r3, [r7, #10]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	897a      	ldrh	r2, [r7, #10]
 8002cd4:	60da      	str	r2, [r3, #12]
 8002cd6:	e070      	b.n	8002dba <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	74fb      	strb	r3, [r7, #19]
 8002cdc:	e06d      	b.n	8002dba <UART_SetConfig+0x65e>
    }
  }
  else
  {
    switch (clocksource)
 8002cde:	7efb      	ldrb	r3, [r7, #27]
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d859      	bhi.n	8002d98 <UART_SetConfig+0x63c>
 8002ce4:	a201      	add	r2, pc, #4	; (adr r2, 8002cec <UART_SetConfig+0x590>)
 8002ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cea:	bf00      	nop
 8002cec:	08002d11 	.word	0x08002d11
 8002cf0:	08002d2d 	.word	0x08002d2d
 8002cf4:	08002d49 	.word	0x08002d49
 8002cf8:	08002d99 	.word	0x08002d99
 8002cfc:	08002d65 	.word	0x08002d65
 8002d00:	08002d99 	.word	0x08002d99
 8002d04:	08002d99 	.word	0x08002d99
 8002d08:	08002d99 	.word	0x08002d99
 8002d0c:	08002d81 	.word	0x08002d81
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002d10:	f7fe fc76 	bl	8001600 <HAL_RCC_GetPCLK1Freq>
 8002d14:	4602      	mov	r2, r0
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	085b      	lsrs	r3, r3, #1
 8002d1c:	441a      	add	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	617b      	str	r3, [r7, #20]
#endif
        break;
 8002d2a:	e038      	b.n	8002d9e <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002d2c:	f7fe fc7e 	bl	800162c <HAL_RCC_GetPCLK2Freq>
 8002d30:	4602      	mov	r2, r0
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	085b      	lsrs	r3, r3, #1
 8002d38:	441a      	add	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	617b      	str	r3, [r7, #20]
#endif
        break;
 8002d46:	e02a      	b.n	8002d9e <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	085b      	lsrs	r3, r3, #1
 8002d4e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002d52:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6852      	ldr	r2, [r2, #4]
 8002d5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	617b      	str	r3, [r7, #20]
#endif
        break;
 8002d62:	e01c      	b.n	8002d9e <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d64:	f7fe fba4 	bl	80014b0 <HAL_RCC_GetSysClockFreq>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	085b      	lsrs	r3, r3, #1
 8002d70:	441a      	add	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	617b      	str	r3, [r7, #20]
#endif
        break;
 8002d7e:	e00e      	b.n	8002d9e <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	085b      	lsrs	r3, r3, #1
 8002d86:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	617b      	str	r3, [r7, #20]
#endif
        break;
 8002d96:	e002      	b.n	8002d9e <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	74fb      	strb	r3, [r7, #19]
        break;
 8002d9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2b0f      	cmp	r3, #15
 8002da2:	d908      	bls.n	8002db6 <UART_SetConfig+0x65a>
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002daa:	d204      	bcs.n	8002db6 <UART_SetConfig+0x65a>
    {
      huart->Instance->BRR = usartdiv;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	60da      	str	r2, [r3, #12]
 8002db4:	e001      	b.n	8002dba <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002dc6:	7cfb      	ldrb	r3, [r7, #19]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3720      	adds	r7, #32
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002dd2:	bf00      	nop
 8002dd4:	f4240000 	.word	0xf4240000

08002dd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00a      	beq.n	8002e02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6812      	ldr	r2, [r2, #0]
 8002df4:	6852      	ldr	r2, [r2, #4]
 8002df6:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00a      	beq.n	8002e24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6812      	ldr	r2, [r2, #0]
 8002e16:	6852      	ldr	r2, [r2, #4]
 8002e18:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e20:	430a      	orrs	r2, r1
 8002e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00a      	beq.n	8002e46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6812      	ldr	r2, [r2, #0]
 8002e38:	6852      	ldr	r2, [r2, #4]
 8002e3a:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e42:	430a      	orrs	r2, r1
 8002e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00a      	beq.n	8002e68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6812      	ldr	r2, [r2, #0]
 8002e5a:	6852      	ldr	r2, [r2, #4]
 8002e5c:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e64:	430a      	orrs	r2, r1
 8002e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00a      	beq.n	8002e8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	6892      	ldr	r2, [r2, #8]
 8002e7e:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e86:	430a      	orrs	r2, r1
 8002e88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	f003 0320 	and.w	r3, r3, #32
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6812      	ldr	r2, [r2, #0]
 8002e9e:	6892      	ldr	r2, [r2, #8]
 8002ea0:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d01a      	beq.n	8002eee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6812      	ldr	r2, [r2, #0]
 8002ec0:	6852      	ldr	r2, [r2, #4]
 8002ec2:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ed6:	d10a      	bne.n	8002eee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	6852      	ldr	r2, [r2, #4]
 8002ee2:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002eea:	430a      	orrs	r2, r1
 8002eec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6812      	ldr	r2, [r2, #0]
 8002f02:	6852      	ldr	r2, [r2, #4]
 8002f04:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	605a      	str	r2, [r3, #4]
  }
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af02      	add	r7, sp, #8
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002f2e:	f7fd fb4d 	bl	80005cc <HAL_GetTick>
 8002f32:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d10e      	bne.n	8002f60 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 f82c 	bl	8002fae <UART_WaitOnFlagUntilTimeout>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e022      	b.n	8002fa6 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d10e      	bne.n	8002f8c <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f6e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f816 	bl	8002fae <UART_WaitOnFlagUntilTimeout>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e00c      	b.n	8002fa6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b084      	sub	sp, #16
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	60f8      	str	r0, [r7, #12]
 8002fb6:	60b9      	str	r1, [r7, #8]
 8002fb8:	603b      	str	r3, [r7, #0]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fbe:	e02c      	b.n	800301a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc6:	d028      	beq.n	800301a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d007      	beq.n	8002fde <UART_WaitOnFlagUntilTimeout+0x30>
 8002fce:	f7fd fafd 	bl	80005cc <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	1ad2      	subs	r2, r2, r3
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d91d      	bls.n	800301a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	6812      	ldr	r2, [r2, #0]
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002fec:	601a      	str	r2, [r3, #0]
#endif
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	6812      	ldr	r2, [r2, #0]
 8002ff6:	6892      	ldr	r2, [r2, #8]
 8002ff8:	f022 0201 	bic.w	r2, r2, #1
 8002ffc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2220      	movs	r2, #32
 8003002:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e00f      	b.n	800303a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	69da      	ldr	r2, [r3, #28]
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	401a      	ands	r2, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	429a      	cmp	r2, r3
 8003028:	bf0c      	ite	eq
 800302a:	2301      	moveq	r3, #1
 800302c:	2300      	movne	r3, #0
 800302e:	b2db      	uxtb	r3, r3
 8003030:	461a      	mov	r2, r3
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	429a      	cmp	r2, r3
 8003036:	d0c3      	beq.n	8002fc0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003042:	b480      	push	{r7}
 8003044:	b085      	sub	sp, #20
 8003046:	af00      	add	r7, sp, #0
 8003048:	4603      	mov	r3, r0
 800304a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800304c:	2300      	movs	r3, #0
 800304e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003050:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003054:	2b84      	cmp	r3, #132	; 0x84
 8003056:	d005      	beq.n	8003064 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003058:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4413      	add	r3, r2
 8003060:	3303      	adds	r3, #3
 8003062:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003064:	68fb      	ldr	r3, [r7, #12]
}
 8003066:	4618      	mov	r0, r3
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003078:	f3ef 8305 	mrs	r3, IPSR
 800307c:	607b      	str	r3, [r7, #4]
  return(result);
 800307e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003080:	2b00      	cmp	r3, #0
 8003082:	bf14      	ite	ne
 8003084:	2301      	movne	r3, #1
 8003086:	2300      	moveq	r3, #0
 8003088:	b2db      	uxtb	r3, r3
}
 800308a:	4618      	mov	r0, r3
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800309a:	f001 fc2f 	bl	80048fc <vTaskStartScheduler>
  
  return osOK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80030a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685c      	ldr	r4, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030ba:	b29e      	uxth	r6, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff ffbd 	bl	8003042 <makeFreeRtosPriority>
 80030c8:	4602      	mov	r2, r0
 80030ca:	f107 030c 	add.w	r3, r7, #12
 80030ce:	9301      	str	r3, [sp, #4]
 80030d0:	9200      	str	r2, [sp, #0]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	4632      	mov	r2, r6
 80030d6:	4629      	mov	r1, r5
 80030d8:	4620      	mov	r0, r4
 80030da:	f001 fab2 	bl	8004642 <xTaskCreate>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d001      	beq.n	80030e8 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	e000      	b.n	80030ea <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80030e8:	68fb      	ldr	r3, [r7, #12]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030f2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b084      	sub	sp, #16
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <osDelay+0x16>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	e000      	b.n	800310a <osDelay+0x18>
 8003108:	2301      	movs	r3, #1
 800310a:	4618      	mov	r0, r3
 800310c:	f001 fbc2 	bl	8004894 <vTaskDelay>
  
  return osOK;
 8003110:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800311a:	b580      	push	{r7, lr}
 800311c:	b084      	sub	sp, #16
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
 8003122:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d110      	bne.n	800314c <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 800312a:	2203      	movs	r2, #3
 800312c:	2100      	movs	r1, #0
 800312e:	2001      	movs	r0, #1
 8003130:	f000 fdcc 	bl	8003ccc <xQueueGenericCreate>
 8003134:	60f8      	str	r0, [r7, #12]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <osSemaphoreCreate+0x2e>
 800313c:	2300      	movs	r3, #0
 800313e:	2200      	movs	r2, #0
 8003140:	2100      	movs	r1, #0
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 fe4c 	bl	8003de0 <xQueueGenericSend>
    return sema;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	e006      	b.n	800315a <osSemaphoreCreate+0x40>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	4611      	mov	r1, r2
 8003152:	4618      	mov	r0, r3
 8003154:	f000 fe12 	bl	8003d7c <xQueueCreateCountingSemaphore>
 8003158:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 800315a:	4618      	mov	r0, r3
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
	...

08003164 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800316e:	2300      	movs	r3, #0
 8003170:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8003178:	2380      	movs	r3, #128	; 0x80
 800317a:	e03a      	b.n	80031f2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800317c:	2300      	movs	r3, #0
 800317e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003186:	d103      	bne.n	8003190 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8003188:	f04f 33ff 	mov.w	r3, #4294967295
 800318c:	60fb      	str	r3, [r7, #12]
 800318e:	e009      	b.n	80031a4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d006      	beq.n	80031a4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <osSemaphoreWait+0x40>
      ticks = 1;
 80031a0:	2301      	movs	r3, #1
 80031a2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80031a4:	f7ff ff65 	bl	8003072 <inHandlerMode>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d017      	beq.n	80031de <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80031ae:	f107 0308 	add.w	r3, r7, #8
 80031b2:	461a      	mov	r2, r3
 80031b4:	2100      	movs	r1, #0
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f001 f89e 	bl	80042f8 <xQueueReceiveFromISR>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d001      	beq.n	80031c6 <osSemaphoreWait+0x62>
      return osErrorOS;
 80031c2:	23ff      	movs	r3, #255	; 0xff
 80031c4:	e015      	b.n	80031f2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d011      	beq.n	80031f0 <osSemaphoreWait+0x8c>
 80031cc:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <osSemaphoreWait+0x98>)
 80031ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	f3bf 8f4f 	dsb	sy
 80031d8:	f3bf 8f6f 	isb	sy
 80031dc:	e008      	b.n	80031f0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80031de:	68f9      	ldr	r1, [r7, #12]
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 ff81 	bl	80040e8 <xQueueSemaphoreTake>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d001      	beq.n	80031f0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80031ec:	23ff      	movs	r3, #255	; 0xff
 80031ee:	e000      	b.n	80031f2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	e000ed04 	.word	0xe000ed04

08003200 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003208:	2300      	movs	r3, #0
 800320a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800320c:	2300      	movs	r3, #0
 800320e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8003210:	f7ff ff2f 	bl	8003072 <inHandlerMode>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d016      	beq.n	8003248 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800321a:	f107 0308 	add.w	r3, r7, #8
 800321e:	4619      	mov	r1, r3
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 fed7 	bl	8003fd4 <xQueueGiveFromISR>
 8003226:	4603      	mov	r3, r0
 8003228:	2b01      	cmp	r3, #1
 800322a:	d001      	beq.n	8003230 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800322c:	23ff      	movs	r3, #255	; 0xff
 800322e:	e017      	b.n	8003260 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d013      	beq.n	800325e <osSemaphoreRelease+0x5e>
 8003236:	4b0c      	ldr	r3, [pc, #48]	; (8003268 <osSemaphoreRelease+0x68>)
 8003238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	f3bf 8f4f 	dsb	sy
 8003242:	f3bf 8f6f 	isb	sy
 8003246:	e00a      	b.n	800325e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8003248:	2300      	movs	r3, #0
 800324a:	2200      	movs	r2, #0
 800324c:	2100      	movs	r1, #0
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 fdc6 	bl	8003de0 <xQueueGenericSend>
 8003254:	4603      	mov	r3, r0
 8003256:	2b01      	cmp	r3, #1
 8003258:	d001      	beq.n	800325e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800325a:	23ff      	movs	r3, #255	; 0xff
 800325c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800325e:	68fb      	ldr	r3, [r7, #12]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	e000ed04 	.word	0xe000ed04

0800326c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f103 0208 	add.w	r2, r3, #8
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f04f 32ff 	mov.w	r2, #4294967295
 8003284:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f103 0208 	add.w	r2, r3, #8
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f103 0208 	add.w	r2, r3, #8
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032c6:	b480      	push	{r7}
 80032c8:	b085      	sub	sp, #20
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	1c5a      	adds	r2, r3, #1
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	601a      	str	r2, [r3, #0]
}
 8003302:	bf00      	nop
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800330e:	b480      	push	{r7}
 8003310:	b085      	sub	sp, #20
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
 8003316:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003324:	d103      	bne.n	800332e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	e00c      	b.n	8003348 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3308      	adds	r3, #8
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	e002      	b.n	800333c <vListInsert+0x2e>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	429a      	cmp	r2, r3
 8003346:	d9f6      	bls.n	8003336 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	601a      	str	r2, [r3, #0]
}
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6892      	ldr	r2, [r2, #8]
 8003396:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6852      	ldr	r2, [r2, #4]
 80033a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d103      	bne.n	80033b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	1e5a      	subs	r2, r3, #1
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	3b04      	subs	r3, #4
 80033e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	3b04      	subs	r3, #4
 80033f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f023 0201 	bic.w	r2, r3, #1
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	3b04      	subs	r3, #4
 8003402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003404:	4a0c      	ldr	r2, [pc, #48]	; (8003438 <pxPortInitialiseStack+0x64>)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	3b14      	subs	r3, #20
 800340e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	3b04      	subs	r3, #4
 800341a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f06f 0202 	mvn.w	r2, #2
 8003422:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	3b20      	subs	r3, #32
 8003428:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800342a:	68fb      	ldr	r3, [r7, #12]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	0800343d 	.word	0x0800343d

0800343c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003442:	2300      	movs	r3, #0
 8003444:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003446:	4b11      	ldr	r3, [pc, #68]	; (800348c <prvTaskExitError+0x50>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344e:	d009      	beq.n	8003464 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003454:	f383 8811 	msr	BASEPRI, r3
 8003458:	f3bf 8f6f 	isb	sy
 800345c:	f3bf 8f4f 	dsb	sy
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	e7fe      	b.n	8003462 <prvTaskExitError+0x26>
 8003464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003468:	f383 8811 	msr	BASEPRI, r3
 800346c:	f3bf 8f6f 	isb	sy
 8003470:	f3bf 8f4f 	dsb	sy
 8003474:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003476:	bf00      	nop
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0fc      	beq.n	8003478 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800347e:	bf00      	nop
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	20000000 	.word	0x20000000

08003490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003490:	4b07      	ldr	r3, [pc, #28]	; (80034b0 <pxCurrentTCBConst2>)
 8003492:	6819      	ldr	r1, [r3, #0]
 8003494:	6808      	ldr	r0, [r1, #0]
 8003496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800349a:	f380 8809 	msr	PSP, r0
 800349e:	f3bf 8f6f 	isb	sy
 80034a2:	f04f 0000 	mov.w	r0, #0
 80034a6:	f380 8811 	msr	BASEPRI, r0
 80034aa:	4770      	bx	lr
 80034ac:	f3af 8000 	nop.w

080034b0 <pxCurrentTCBConst2>:
 80034b0:	200027b8 	.word	0x200027b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80034b4:	bf00      	nop
 80034b6:	bf00      	nop

080034b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80034b8:	4808      	ldr	r0, [pc, #32]	; (80034dc <prvPortStartFirstTask+0x24>)
 80034ba:	6800      	ldr	r0, [r0, #0]
 80034bc:	6800      	ldr	r0, [r0, #0]
 80034be:	f380 8808 	msr	MSP, r0
 80034c2:	f04f 0000 	mov.w	r0, #0
 80034c6:	f380 8814 	msr	CONTROL, r0
 80034ca:	b662      	cpsie	i
 80034cc:	b661      	cpsie	f
 80034ce:	f3bf 8f4f 	dsb	sy
 80034d2:	f3bf 8f6f 	isb	sy
 80034d6:	df00      	svc	0
 80034d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80034da:	bf00      	nop
 80034dc:	e000ed08 	.word	0xe000ed08

080034e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80034e6:	4b44      	ldr	r3, [pc, #272]	; (80035f8 <xPortStartScheduler+0x118>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a44      	ldr	r2, [pc, #272]	; (80035fc <xPortStartScheduler+0x11c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d109      	bne.n	8003504 <xPortStartScheduler+0x24>
 80034f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f4:	f383 8811 	msr	BASEPRI, r3
 80034f8:	f3bf 8f6f 	isb	sy
 80034fc:	f3bf 8f4f 	dsb	sy
 8003500:	613b      	str	r3, [r7, #16]
 8003502:	e7fe      	b.n	8003502 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003504:	4b3c      	ldr	r3, [pc, #240]	; (80035f8 <xPortStartScheduler+0x118>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a3d      	ldr	r2, [pc, #244]	; (8003600 <xPortStartScheduler+0x120>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d109      	bne.n	8003522 <xPortStartScheduler+0x42>
 800350e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003512:	f383 8811 	msr	BASEPRI, r3
 8003516:	f3bf 8f6f 	isb	sy
 800351a:	f3bf 8f4f 	dsb	sy
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	e7fe      	b.n	8003520 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003522:	4b38      	ldr	r3, [pc, #224]	; (8003604 <xPortStartScheduler+0x124>)
 8003524:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	b2db      	uxtb	r3, r3
 800352c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	22ff      	movs	r2, #255	; 0xff
 8003532:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	b2db      	uxtb	r3, r3
 800353a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	b2db      	uxtb	r3, r3
 8003540:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003544:	b2da      	uxtb	r2, r3
 8003546:	4b30      	ldr	r3, [pc, #192]	; (8003608 <xPortStartScheduler+0x128>)
 8003548:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800354a:	4b30      	ldr	r3, [pc, #192]	; (800360c <xPortStartScheduler+0x12c>)
 800354c:	2207      	movs	r2, #7
 800354e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003550:	e009      	b.n	8003566 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003552:	4b2e      	ldr	r3, [pc, #184]	; (800360c <xPortStartScheduler+0x12c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	3b01      	subs	r3, #1
 8003558:	4a2c      	ldr	r2, [pc, #176]	; (800360c <xPortStartScheduler+0x12c>)
 800355a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800355c:	78fb      	ldrb	r3, [r7, #3]
 800355e:	b2db      	uxtb	r3, r3
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	b2db      	uxtb	r3, r3
 8003564:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003566:	78fb      	ldrb	r3, [r7, #3]
 8003568:	b2db      	uxtb	r3, r3
 800356a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356e:	2b80      	cmp	r3, #128	; 0x80
 8003570:	d0ef      	beq.n	8003552 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003572:	4b26      	ldr	r3, [pc, #152]	; (800360c <xPortStartScheduler+0x12c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f1c3 0307 	rsb	r3, r3, #7
 800357a:	2b04      	cmp	r3, #4
 800357c:	d009      	beq.n	8003592 <xPortStartScheduler+0xb2>
 800357e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003582:	f383 8811 	msr	BASEPRI, r3
 8003586:	f3bf 8f6f 	isb	sy
 800358a:	f3bf 8f4f 	dsb	sy
 800358e:	60bb      	str	r3, [r7, #8]
 8003590:	e7fe      	b.n	8003590 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003592:	4b1e      	ldr	r3, [pc, #120]	; (800360c <xPortStartScheduler+0x12c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	021b      	lsls	r3, r3, #8
 8003598:	4a1c      	ldr	r2, [pc, #112]	; (800360c <xPortStartScheduler+0x12c>)
 800359a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800359c:	4b1b      	ldr	r3, [pc, #108]	; (800360c <xPortStartScheduler+0x12c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035a4:	4a19      	ldr	r2, [pc, #100]	; (800360c <xPortStartScheduler+0x12c>)
 80035a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80035b0:	4a17      	ldr	r2, [pc, #92]	; (8003610 <xPortStartScheduler+0x130>)
 80035b2:	4b17      	ldr	r3, [pc, #92]	; (8003610 <xPortStartScheduler+0x130>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80035bc:	4a14      	ldr	r2, [pc, #80]	; (8003610 <xPortStartScheduler+0x130>)
 80035be:	4b14      	ldr	r3, [pc, #80]	; (8003610 <xPortStartScheduler+0x130>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80035c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80035c8:	f000 f8d6 	bl	8003778 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80035cc:	4b11      	ldr	r3, [pc, #68]	; (8003614 <xPortStartScheduler+0x134>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80035d2:	f000 f8f5 	bl	80037c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80035d6:	4a10      	ldr	r2, [pc, #64]	; (8003618 <xPortStartScheduler+0x138>)
 80035d8:	4b0f      	ldr	r3, [pc, #60]	; (8003618 <xPortStartScheduler+0x138>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80035e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80035e2:	f7ff ff69 	bl	80034b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80035e6:	f001 fb35 	bl	8004c54 <vTaskSwitchContext>
	prvTaskExitError();
 80035ea:	f7ff ff27 	bl	800343c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	e000ed00 	.word	0xe000ed00
 80035fc:	410fc271 	.word	0x410fc271
 8003600:	410fc270 	.word	0x410fc270
 8003604:	e000e400 	.word	0xe000e400
 8003608:	20000088 	.word	0x20000088
 800360c:	2000008c 	.word	0x2000008c
 8003610:	e000ed20 	.word	0xe000ed20
 8003614:	20000000 	.word	0x20000000
 8003618:	e000ef34 	.word	0xe000ef34

0800361c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003626:	f383 8811 	msr	BASEPRI, r3
 800362a:	f3bf 8f6f 	isb	sy
 800362e:	f3bf 8f4f 	dsb	sy
 8003632:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003634:	4b0e      	ldr	r3, [pc, #56]	; (8003670 <vPortEnterCritical+0x54>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	3301      	adds	r3, #1
 800363a:	4a0d      	ldr	r2, [pc, #52]	; (8003670 <vPortEnterCritical+0x54>)
 800363c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800363e:	4b0c      	ldr	r3, [pc, #48]	; (8003670 <vPortEnterCritical+0x54>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d10e      	bne.n	8003664 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003646:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <vPortEnterCritical+0x58>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d009      	beq.n	8003664 <vPortEnterCritical+0x48>
 8003650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003654:	f383 8811 	msr	BASEPRI, r3
 8003658:	f3bf 8f6f 	isb	sy
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	603b      	str	r3, [r7, #0]
 8003662:	e7fe      	b.n	8003662 <vPortEnterCritical+0x46>
	}
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	20000000 	.word	0x20000000
 8003674:	e000ed04 	.word	0xe000ed04

08003678 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800367e:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <vPortExitCritical+0x4c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d109      	bne.n	800369a <vPortExitCritical+0x22>
 8003686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368a:	f383 8811 	msr	BASEPRI, r3
 800368e:	f3bf 8f6f 	isb	sy
 8003692:	f3bf 8f4f 	dsb	sy
 8003696:	607b      	str	r3, [r7, #4]
 8003698:	e7fe      	b.n	8003698 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800369a:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <vPortExitCritical+0x4c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	3b01      	subs	r3, #1
 80036a0:	4a08      	ldr	r2, [pc, #32]	; (80036c4 <vPortExitCritical+0x4c>)
 80036a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80036a4:	4b07      	ldr	r3, [pc, #28]	; (80036c4 <vPortExitCritical+0x4c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d104      	bne.n	80036b6 <vPortExitCritical+0x3e>
 80036ac:	2300      	movs	r3, #0
 80036ae:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	20000000 	.word	0x20000000
	...

080036d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80036d0:	f3ef 8009 	mrs	r0, PSP
 80036d4:	f3bf 8f6f 	isb	sy
 80036d8:	4b15      	ldr	r3, [pc, #84]	; (8003730 <pxCurrentTCBConst>)
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	f01e 0f10 	tst.w	lr, #16
 80036e0:	bf08      	it	eq
 80036e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80036e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036ea:	6010      	str	r0, [r2, #0]
 80036ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80036f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80036f4:	f380 8811 	msr	BASEPRI, r0
 80036f8:	f3bf 8f4f 	dsb	sy
 80036fc:	f3bf 8f6f 	isb	sy
 8003700:	f001 faa8 	bl	8004c54 <vTaskSwitchContext>
 8003704:	f04f 0000 	mov.w	r0, #0
 8003708:	f380 8811 	msr	BASEPRI, r0
 800370c:	bc09      	pop	{r0, r3}
 800370e:	6819      	ldr	r1, [r3, #0]
 8003710:	6808      	ldr	r0, [r1, #0]
 8003712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003716:	f01e 0f10 	tst.w	lr, #16
 800371a:	bf08      	it	eq
 800371c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003720:	f380 8809 	msr	PSP, r0
 8003724:	f3bf 8f6f 	isb	sy
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	f3af 8000 	nop.w

08003730 <pxCurrentTCBConst>:
 8003730:	200027b8 	.word	0x200027b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003734:	bf00      	nop
 8003736:	bf00      	nop

08003738 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
	__asm volatile
 800373e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003742:	f383 8811 	msr	BASEPRI, r3
 8003746:	f3bf 8f6f 	isb	sy
 800374a:	f3bf 8f4f 	dsb	sy
 800374e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003750:	f001 f9c4 	bl	8004adc <xTaskIncrementTick>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800375a:	4b06      	ldr	r3, [pc, #24]	; (8003774 <SysTick_Handler+0x3c>)
 800375c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	2300      	movs	r3, #0
 8003764:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800376c:	bf00      	nop
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	e000ed04 	.word	0xe000ed04

08003778 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800377c:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <vPortSetupTimerInterrupt+0x34>)
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003782:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <vPortSetupTimerInterrupt+0x38>)
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003788:	4a0a      	ldr	r2, [pc, #40]	; (80037b4 <vPortSetupTimerInterrupt+0x3c>)
 800378a:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <vPortSetupTimerInterrupt+0x40>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	490b      	ldr	r1, [pc, #44]	; (80037bc <vPortSetupTimerInterrupt+0x44>)
 8003790:	fba1 1303 	umull	r1, r3, r1, r3
 8003794:	099b      	lsrs	r3, r3, #6
 8003796:	3b01      	subs	r3, #1
 8003798:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800379a:	4b04      	ldr	r3, [pc, #16]	; (80037ac <vPortSetupTimerInterrupt+0x34>)
 800379c:	2207      	movs	r2, #7
 800379e:	601a      	str	r2, [r3, #0]
}
 80037a0:	bf00      	nop
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	e000e010 	.word	0xe000e010
 80037b0:	e000e018 	.word	0xe000e018
 80037b4:	e000e014 	.word	0xe000e014
 80037b8:	20000004 	.word	0x20000004
 80037bc:	10624dd3 	.word	0x10624dd3

080037c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80037c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80037d0 <vPortEnableVFP+0x10>
 80037c4:	6801      	ldr	r1, [r0, #0]
 80037c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80037ca:	6001      	str	r1, [r0, #0]
 80037cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80037ce:	bf00      	nop
 80037d0:	e000ed88 	.word	0xe000ed88

080037d4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80037da:	f3ef 8305 	mrs	r3, IPSR
 80037de:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2b0f      	cmp	r3, #15
 80037e4:	d913      	bls.n	800380e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80037e6:	4a16      	ldr	r2, [pc, #88]	; (8003840 <vPortValidateInterruptPriority+0x6c>)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4413      	add	r3, r2
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80037f0:	4b14      	ldr	r3, [pc, #80]	; (8003844 <vPortValidateInterruptPriority+0x70>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	7afa      	ldrb	r2, [r7, #11]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d209      	bcs.n	800380e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80037fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fe:	f383 8811 	msr	BASEPRI, r3
 8003802:	f3bf 8f6f 	isb	sy
 8003806:	f3bf 8f4f 	dsb	sy
 800380a:	607b      	str	r3, [r7, #4]
 800380c:	e7fe      	b.n	800380c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800380e:	4b0e      	ldr	r3, [pc, #56]	; (8003848 <vPortValidateInterruptPriority+0x74>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003816:	4b0d      	ldr	r3, [pc, #52]	; (800384c <vPortValidateInterruptPriority+0x78>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d909      	bls.n	8003832 <vPortValidateInterruptPriority+0x5e>
 800381e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003822:	f383 8811 	msr	BASEPRI, r3
 8003826:	f3bf 8f6f 	isb	sy
 800382a:	f3bf 8f4f 	dsb	sy
 800382e:	603b      	str	r3, [r7, #0]
 8003830:	e7fe      	b.n	8003830 <vPortValidateInterruptPriority+0x5c>
	}
 8003832:	bf00      	nop
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	e000e3f0 	.word	0xe000e3f0
 8003844:	20000088 	.word	0x20000088
 8003848:	e000ed0c 	.word	0xe000ed0c
 800384c:	2000008c 	.word	0x2000008c

08003850 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b08a      	sub	sp, #40	; 0x28
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003858:	2300      	movs	r3, #0
 800385a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800385c:	f001 f894 	bl	8004988 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003860:	4b57      	ldr	r3, [pc, #348]	; (80039c0 <pvPortMalloc+0x170>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003868:	f000 f90c 	bl	8003a84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800386c:	4b55      	ldr	r3, [pc, #340]	; (80039c4 <pvPortMalloc+0x174>)
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4013      	ands	r3, r2
 8003874:	2b00      	cmp	r3, #0
 8003876:	f040 808c 	bne.w	8003992 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d01c      	beq.n	80038ba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003880:	2208      	movs	r2, #8
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4413      	add	r3, r2
 8003886:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	2b00      	cmp	r3, #0
 8003890:	d013      	beq.n	80038ba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f023 0307 	bic.w	r3, r3, #7
 8003898:	3308      	adds	r3, #8
 800389a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d009      	beq.n	80038ba <pvPortMalloc+0x6a>
 80038a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038aa:	f383 8811 	msr	BASEPRI, r3
 80038ae:	f3bf 8f6f 	isb	sy
 80038b2:	f3bf 8f4f 	dsb	sy
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	e7fe      	b.n	80038b8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d068      	beq.n	8003992 <pvPortMalloc+0x142>
 80038c0:	4b41      	ldr	r3, [pc, #260]	; (80039c8 <pvPortMalloc+0x178>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d863      	bhi.n	8003992 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80038ca:	4b40      	ldr	r3, [pc, #256]	; (80039cc <pvPortMalloc+0x17c>)
 80038cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80038ce:	4b3f      	ldr	r3, [pc, #252]	; (80039cc <pvPortMalloc+0x17c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038d4:	e004      	b.n	80038e0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d203      	bcs.n	80038f2 <pvPortMalloc+0xa2>
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f1      	bne.n	80038d6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80038f2:	4b33      	ldr	r3, [pc, #204]	; (80039c0 <pvPortMalloc+0x170>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d04a      	beq.n	8003992 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2208      	movs	r2, #8
 8003902:	4413      	add	r3, r2
 8003904:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	6a3b      	ldr	r3, [r7, #32]
 800390c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	1ad2      	subs	r2, r2, r3
 8003916:	2308      	movs	r3, #8
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	429a      	cmp	r2, r3
 800391c:	d91e      	bls.n	800395c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800391e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4413      	add	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	2b00      	cmp	r3, #0
 800392e:	d009      	beq.n	8003944 <pvPortMalloc+0xf4>
 8003930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003934:	f383 8811 	msr	BASEPRI, r3
 8003938:	f3bf 8f6f 	isb	sy
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	613b      	str	r3, [r7, #16]
 8003942:	e7fe      	b.n	8003942 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	1ad2      	subs	r2, r2, r3
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003956:	69b8      	ldr	r0, [r7, #24]
 8003958:	f000 f8f6 	bl	8003b48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800395c:	4b1a      	ldr	r3, [pc, #104]	; (80039c8 <pvPortMalloc+0x178>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	4a18      	ldr	r2, [pc, #96]	; (80039c8 <pvPortMalloc+0x178>)
 8003968:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800396a:	4b17      	ldr	r3, [pc, #92]	; (80039c8 <pvPortMalloc+0x178>)
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	4b18      	ldr	r3, [pc, #96]	; (80039d0 <pvPortMalloc+0x180>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d203      	bcs.n	800397e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003976:	4b14      	ldr	r3, [pc, #80]	; (80039c8 <pvPortMalloc+0x178>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a15      	ldr	r2, [pc, #84]	; (80039d0 <pvPortMalloc+0x180>)
 800397c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	4b10      	ldr	r3, [pc, #64]	; (80039c4 <pvPortMalloc+0x174>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	431a      	orrs	r2, r3
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003992:	f001 f807 	bl	80049a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	2b00      	cmp	r3, #0
 800399e:	d009      	beq.n	80039b4 <pvPortMalloc+0x164>
 80039a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	e7fe      	b.n	80039b2 <pvPortMalloc+0x162>
	return pvReturn;
 80039b4:	69fb      	ldr	r3, [r7, #28]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3728      	adds	r7, #40	; 0x28
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	200027a8 	.word	0x200027a8
 80039c4:	200027b4 	.word	0x200027b4
 80039c8:	200027ac 	.word	0x200027ac
 80039cc:	200027a0 	.word	0x200027a0
 80039d0:	200027b0 	.word	0x200027b0

080039d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d046      	beq.n	8003a74 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80039e6:	2308      	movs	r3, #8
 80039e8:	425b      	negs	r3, r3
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	4413      	add	r3, r2
 80039ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	4b20      	ldr	r3, [pc, #128]	; (8003a7c <vPortFree+0xa8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4013      	ands	r3, r2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d109      	bne.n	8003a16 <vPortFree+0x42>
 8003a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a06:	f383 8811 	msr	BASEPRI, r3
 8003a0a:	f3bf 8f6f 	isb	sy
 8003a0e:	f3bf 8f4f 	dsb	sy
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	e7fe      	b.n	8003a14 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d009      	beq.n	8003a32 <vPortFree+0x5e>
 8003a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a22:	f383 8811 	msr	BASEPRI, r3
 8003a26:	f3bf 8f6f 	isb	sy
 8003a2a:	f3bf 8f4f 	dsb	sy
 8003a2e:	60bb      	str	r3, [r7, #8]
 8003a30:	e7fe      	b.n	8003a30 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <vPortFree+0xa8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d019      	beq.n	8003a74 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d115      	bne.n	8003a74 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <vPortFree+0xa8>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	43db      	mvns	r3, r3
 8003a52:	401a      	ands	r2, r3
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003a58:	f000 ff96 	bl	8004988 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	4b07      	ldr	r3, [pc, #28]	; (8003a80 <vPortFree+0xac>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4413      	add	r3, r2
 8003a66:	4a06      	ldr	r2, [pc, #24]	; (8003a80 <vPortFree+0xac>)
 8003a68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a6a:	6938      	ldr	r0, [r7, #16]
 8003a6c:	f000 f86c 	bl	8003b48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003a70:	f000 ff98 	bl	80049a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003a74:	bf00      	nop
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	200027b4 	.word	0x200027b4
 8003a80:	200027ac 	.word	0x200027ac

08003a84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003a8a:	f242 7310 	movw	r3, #10000	; 0x2710
 8003a8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003a90:	4b27      	ldr	r3, [pc, #156]	; (8003b30 <prvHeapInit+0xac>)
 8003a92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00c      	beq.n	8003ab8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	3307      	adds	r3, #7
 8003aa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f023 0307 	bic.w	r3, r3, #7
 8003aaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	4a1f      	ldr	r2, [pc, #124]	; (8003b30 <prvHeapInit+0xac>)
 8003ab4:	4413      	add	r3, r2
 8003ab6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003abc:	4a1d      	ldr	r2, [pc, #116]	; (8003b34 <prvHeapInit+0xb0>)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003ac2:	4b1c      	ldr	r3, [pc, #112]	; (8003b34 <prvHeapInit+0xb0>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	4413      	add	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003ad0:	2208      	movs	r2, #8
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	1a9b      	subs	r3, r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f023 0307 	bic.w	r3, r3, #7
 8003ade:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4a15      	ldr	r2, [pc, #84]	; (8003b38 <prvHeapInit+0xb4>)
 8003ae4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003ae6:	4b14      	ldr	r3, [pc, #80]	; (8003b38 <prvHeapInit+0xb4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2200      	movs	r2, #0
 8003aec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003aee:	4b12      	ldr	r3, [pc, #72]	; (8003b38 <prvHeapInit+0xb4>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	1ad2      	subs	r2, r2, r3
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003b04:	4b0c      	ldr	r3, [pc, #48]	; (8003b38 <prvHeapInit+0xb4>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	4a0a      	ldr	r2, [pc, #40]	; (8003b3c <prvHeapInit+0xb8>)
 8003b12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	4a09      	ldr	r2, [pc, #36]	; (8003b40 <prvHeapInit+0xbc>)
 8003b1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003b1c:	4b09      	ldr	r3, [pc, #36]	; (8003b44 <prvHeapInit+0xc0>)
 8003b1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003b22:	601a      	str	r2, [r3, #0]
}
 8003b24:	bf00      	nop
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	20000090 	.word	0x20000090
 8003b34:	200027a0 	.word	0x200027a0
 8003b38:	200027a8 	.word	0x200027a8
 8003b3c:	200027b0 	.word	0x200027b0
 8003b40:	200027ac 	.word	0x200027ac
 8003b44:	200027b4 	.word	0x200027b4

08003b48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003b50:	4b28      	ldr	r3, [pc, #160]	; (8003bf4 <prvInsertBlockIntoFreeList+0xac>)
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	e002      	b.n	8003b5c <prvInsertBlockIntoFreeList+0x14>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d3f7      	bcc.n	8003b56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	441a      	add	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d108      	bne.n	8003b8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	441a      	add	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	441a      	add	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d118      	bne.n	8003bd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	4b15      	ldr	r3, [pc, #84]	; (8003bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d00d      	beq.n	8003bc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	441a      	add	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	e008      	b.n	8003bd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003bc6:	4b0c      	ldr	r3, [pc, #48]	; (8003bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	e003      	b.n	8003bd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d002      	beq.n	8003be6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003be6:	bf00      	nop
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	200027a0 	.word	0x200027a0
 8003bf8:	200027a8 	.word	0x200027a8

08003bfc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d109      	bne.n	8003c24 <xQueueGenericReset+0x28>
 8003c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c14:	f383 8811 	msr	BASEPRI, r3
 8003c18:	f3bf 8f6f 	isb	sy
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	60bb      	str	r3, [r7, #8]
 8003c22:	e7fe      	b.n	8003c22 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003c24:	f7ff fcfa 	bl	800361c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c30:	68f9      	ldr	r1, [r7, #12]
 8003c32:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c34:	fb01 f303 	mul.w	r3, r1, r3
 8003c38:	441a      	add	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c54:	3b01      	subs	r3, #1
 8003c56:	68f9      	ldr	r1, [r7, #12]
 8003c58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c5a:	fb01 f303 	mul.w	r3, r1, r3
 8003c5e:	441a      	add	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	22ff      	movs	r2, #255	; 0xff
 8003c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	22ff      	movs	r2, #255	; 0xff
 8003c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d114      	bne.n	8003ca4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d01a      	beq.n	8003cb8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	3310      	adds	r3, #16
 8003c86:	4618      	mov	r0, r3
 8003c88:	f001 f862 	bl	8004d50 <xTaskRemoveFromEventList>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d012      	beq.n	8003cb8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c92:	4b0d      	ldr	r3, [pc, #52]	; (8003cc8 <xQueueGenericReset+0xcc>)
 8003c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	f3bf 8f4f 	dsb	sy
 8003c9e:	f3bf 8f6f 	isb	sy
 8003ca2:	e009      	b.n	8003cb8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	3310      	adds	r3, #16
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff fadf 	bl	800326c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	3324      	adds	r3, #36	; 0x24
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff fada 	bl	800326c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003cb8:	f7ff fcde 	bl	8003678 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003cbc:	2301      	movs	r3, #1
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	e000ed04 	.word	0xe000ed04

08003ccc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08a      	sub	sp, #40	; 0x28
 8003cd0:	af02      	add	r7, sp, #8
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d109      	bne.n	8003cf4 <xQueueGenericCreate+0x28>
 8003ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce4:	f383 8811 	msr	BASEPRI, r3
 8003ce8:	f3bf 8f6f 	isb	sy
 8003cec:	f3bf 8f4f 	dsb	sy
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	e7fe      	b.n	8003cf2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d102      	bne.n	8003d00 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61fb      	str	r3, [r7, #28]
 8003cfe:	e004      	b.n	8003d0a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	fb02 f303 	mul.w	r3, r2, r3
 8003d08:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	3348      	adds	r3, #72	; 0x48
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff fd9e 	bl	8003850 <pvPortMalloc>
 8003d14:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00b      	beq.n	8003d34 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	3348      	adds	r3, #72	; 0x48
 8003d20:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d22:	79fa      	ldrb	r2, [r7, #7]
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	68b9      	ldr	r1, [r7, #8]
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 f805 	bl	8003d3e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003d34:	69bb      	ldr	r3, [r7, #24]
	}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3720      	adds	r7, #32
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b084      	sub	sp, #16
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	607a      	str	r2, [r7, #4]
 8003d4a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d103      	bne.n	8003d5a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	e002      	b.n	8003d60 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	69b8      	ldr	r0, [r7, #24]
 8003d70:	f7ff ff44 	bl	8003bfc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003d74:	bf00      	nop
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d109      	bne.n	8003da0 <xQueueCreateCountingSemaphore+0x24>
 8003d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d90:	f383 8811 	msr	BASEPRI, r3
 8003d94:	f3bf 8f6f 	isb	sy
 8003d98:	f3bf 8f4f 	dsb	sy
 8003d9c:	613b      	str	r3, [r7, #16]
 8003d9e:	e7fe      	b.n	8003d9e <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d909      	bls.n	8003dbc <xQueueCreateCountingSemaphore+0x40>
 8003da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dac:	f383 8811 	msr	BASEPRI, r3
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	60fb      	str	r3, [r7, #12]
 8003dba:	e7fe      	b.n	8003dba <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7ff ff83 	bl	8003ccc <xQueueGenericCreate>
 8003dc6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003dd4:	697b      	ldr	r3, [r7, #20]
	}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3718      	adds	r7, #24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
	...

08003de0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b08e      	sub	sp, #56	; 0x38
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
 8003dec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003dee:	2300      	movs	r3, #0
 8003df0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d109      	bne.n	8003e10 <xQueueGenericSend+0x30>
 8003dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e00:	f383 8811 	msr	BASEPRI, r3
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e0e:	e7fe      	b.n	8003e0e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d103      	bne.n	8003e1e <xQueueGenericSend+0x3e>
 8003e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <xQueueGenericSend+0x42>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e000      	b.n	8003e24 <xQueueGenericSend+0x44>
 8003e22:	2300      	movs	r3, #0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d109      	bne.n	8003e3c <xQueueGenericSend+0x5c>
 8003e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2c:	f383 8811 	msr	BASEPRI, r3
 8003e30:	f3bf 8f6f 	isb	sy
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3a:	e7fe      	b.n	8003e3a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d103      	bne.n	8003e4a <xQueueGenericSend+0x6a>
 8003e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d101      	bne.n	8003e4e <xQueueGenericSend+0x6e>
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e000      	b.n	8003e50 <xQueueGenericSend+0x70>
 8003e4e:	2300      	movs	r3, #0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d109      	bne.n	8003e68 <xQueueGenericSend+0x88>
 8003e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e58:	f383 8811 	msr	BASEPRI, r3
 8003e5c:	f3bf 8f6f 	isb	sy
 8003e60:	f3bf 8f4f 	dsb	sy
 8003e64:	623b      	str	r3, [r7, #32]
 8003e66:	e7fe      	b.n	8003e66 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e68:	f001 f910 	bl	800508c <xTaskGetSchedulerState>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d102      	bne.n	8003e78 <xQueueGenericSend+0x98>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <xQueueGenericSend+0x9c>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e000      	b.n	8003e7e <xQueueGenericSend+0x9e>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d109      	bne.n	8003e96 <xQueueGenericSend+0xb6>
 8003e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	61fb      	str	r3, [r7, #28]
 8003e94:	e7fe      	b.n	8003e94 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e96:	f7ff fbc1 	bl	800361c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d302      	bcc.n	8003eac <xQueueGenericSend+0xcc>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d129      	bne.n	8003f00 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	68b9      	ldr	r1, [r7, #8]
 8003eb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003eb2:	f000 fab6 	bl	8004422 <prvCopyDataToQueue>
 8003eb6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d010      	beq.n	8003ee2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec2:	3324      	adds	r3, #36	; 0x24
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 ff43 	bl	8004d50 <xTaskRemoveFromEventList>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d013      	beq.n	8003ef8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ed0:	4b3f      	ldr	r3, [pc, #252]	; (8003fd0 <xQueueGenericSend+0x1f0>)
 8003ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	f3bf 8f4f 	dsb	sy
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	e00a      	b.n	8003ef8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d007      	beq.n	8003ef8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ee8:	4b39      	ldr	r3, [pc, #228]	; (8003fd0 <xQueueGenericSend+0x1f0>)
 8003eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	f3bf 8f4f 	dsb	sy
 8003ef4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003ef8:	f7ff fbbe 	bl	8003678 <vPortExitCritical>
				return pdPASS;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e063      	b.n	8003fc8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d103      	bne.n	8003f0e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f06:	f7ff fbb7 	bl	8003678 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	e05c      	b.n	8003fc8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d106      	bne.n	8003f22 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f14:	f107 0314 	add.w	r3, r7, #20
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 ff7b 	bl	8004e14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f22:	f7ff fba9 	bl	8003678 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f26:	f000 fd2f 	bl	8004988 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f2a:	f7ff fb77 	bl	800361c <vPortEnterCritical>
 8003f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f34:	b25b      	sxtb	r3, r3
 8003f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3a:	d103      	bne.n	8003f44 <xQueueGenericSend+0x164>
 8003f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f4a:	b25b      	sxtb	r3, r3
 8003f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f50:	d103      	bne.n	8003f5a <xQueueGenericSend+0x17a>
 8003f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f5a:	f7ff fb8d 	bl	8003678 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f5e:	1d3a      	adds	r2, r7, #4
 8003f60:	f107 0314 	add.w	r3, r7, #20
 8003f64:	4611      	mov	r1, r2
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 ff6a 	bl	8004e40 <xTaskCheckForTimeOut>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d124      	bne.n	8003fbc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003f72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f74:	f000 fb4d 	bl	8004612 <prvIsQueueFull>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d018      	beq.n	8003fb0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f80:	3310      	adds	r3, #16
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	4611      	mov	r1, r2
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 febe 	bl	8004d08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003f8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f8e:	f000 fad8 	bl	8004542 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003f92:	f000 fd07 	bl	80049a4 <xTaskResumeAll>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f47f af7c 	bne.w	8003e96 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003f9e:	4b0c      	ldr	r3, [pc, #48]	; (8003fd0 <xQueueGenericSend+0x1f0>)
 8003fa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	f3bf 8f4f 	dsb	sy
 8003faa:	f3bf 8f6f 	isb	sy
 8003fae:	e772      	b.n	8003e96 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003fb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fb2:	f000 fac6 	bl	8004542 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fb6:	f000 fcf5 	bl	80049a4 <xTaskResumeAll>
 8003fba:	e76c      	b.n	8003e96 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003fbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fbe:	f000 fac0 	bl	8004542 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003fc2:	f000 fcef 	bl	80049a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003fc6:	2300      	movs	r3, #0
		}
	}
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3738      	adds	r7, #56	; 0x38
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	e000ed04 	.word	0xe000ed04

08003fd4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b08e      	sub	sp, #56	; 0x38
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d109      	bne.n	8003ffc <xQueueGiveFromISR+0x28>
 8003fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fec:	f383 8811 	msr	BASEPRI, r3
 8003ff0:	f3bf 8f6f 	isb	sy
 8003ff4:	f3bf 8f4f 	dsb	sy
 8003ff8:	623b      	str	r3, [r7, #32]
 8003ffa:	e7fe      	b.n	8003ffa <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004000:	2b00      	cmp	r3, #0
 8004002:	d009      	beq.n	8004018 <xQueueGiveFromISR+0x44>
 8004004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004008:	f383 8811 	msr	BASEPRI, r3
 800400c:	f3bf 8f6f 	isb	sy
 8004010:	f3bf 8f4f 	dsb	sy
 8004014:	61fb      	str	r3, [r7, #28]
 8004016:	e7fe      	b.n	8004016 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8004018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d103      	bne.n	8004028 <xQueueGiveFromISR+0x54>
 8004020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <xQueueGiveFromISR+0x58>
 8004028:	2301      	movs	r3, #1
 800402a:	e000      	b.n	800402e <xQueueGiveFromISR+0x5a>
 800402c:	2300      	movs	r3, #0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d109      	bne.n	8004046 <xQueueGiveFromISR+0x72>
 8004032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004036:	f383 8811 	msr	BASEPRI, r3
 800403a:	f3bf 8f6f 	isb	sy
 800403e:	f3bf 8f4f 	dsb	sy
 8004042:	61bb      	str	r3, [r7, #24]
 8004044:	e7fe      	b.n	8004044 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004046:	f7ff fbc5 	bl	80037d4 <vPortValidateInterruptPriority>
	__asm volatile
 800404a:	f3ef 8211 	mrs	r2, BASEPRI
 800404e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	617a      	str	r2, [r7, #20]
 8004060:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004062:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004064:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800406c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004072:	429a      	cmp	r2, r3
 8004074:	d92b      	bls.n	80040ce <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004078:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800407c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004086:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004088:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800408c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004090:	d112      	bne.n	80040b8 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	2b00      	cmp	r3, #0
 8004098:	d016      	beq.n	80040c8 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800409a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409c:	3324      	adds	r3, #36	; 0x24
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 fe56 	bl	8004d50 <xTaskRemoveFromEventList>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00e      	beq.n	80040c8 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00b      	beq.n	80040c8 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2201      	movs	r2, #1
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	e007      	b.n	80040c8 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80040b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040bc:	3301      	adds	r3, #1
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	b25a      	sxtb	r2, r3
 80040c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80040c8:	2301      	movs	r3, #1
 80040ca:	637b      	str	r3, [r7, #52]	; 0x34
 80040cc:	e001      	b.n	80040d2 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80040ce:	2300      	movs	r3, #0
 80040d0:	637b      	str	r3, [r7, #52]	; 0x34
 80040d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80040dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3738      	adds	r7, #56	; 0x38
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
	...

080040e8 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b08e      	sub	sp, #56	; 0x38
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80040f2:	2300      	movs	r3, #0
 80040f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80040fa:	2300      	movs	r3, #0
 80040fc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80040fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004100:	2b00      	cmp	r3, #0
 8004102:	d109      	bne.n	8004118 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8004104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004108:	f383 8811 	msr	BASEPRI, r3
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	623b      	str	r3, [r7, #32]
 8004116:	e7fe      	b.n	8004116 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411c:	2b00      	cmp	r3, #0
 800411e:	d009      	beq.n	8004134 <xQueueSemaphoreTake+0x4c>
 8004120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004124:	f383 8811 	msr	BASEPRI, r3
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	61fb      	str	r3, [r7, #28]
 8004132:	e7fe      	b.n	8004132 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004134:	f000 ffaa 	bl	800508c <xTaskGetSchedulerState>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d102      	bne.n	8004144 <xQueueSemaphoreTake+0x5c>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <xQueueSemaphoreTake+0x60>
 8004144:	2301      	movs	r3, #1
 8004146:	e000      	b.n	800414a <xQueueSemaphoreTake+0x62>
 8004148:	2300      	movs	r3, #0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d109      	bne.n	8004162 <xQueueSemaphoreTake+0x7a>
 800414e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004152:	f383 8811 	msr	BASEPRI, r3
 8004156:	f3bf 8f6f 	isb	sy
 800415a:	f3bf 8f4f 	dsb	sy
 800415e:	61bb      	str	r3, [r7, #24]
 8004160:	e7fe      	b.n	8004160 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004162:	f7ff fa5b 	bl	800361c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800416c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416e:	2b00      	cmp	r3, #0
 8004170:	d024      	beq.n	80041bc <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004174:	1e5a      	subs	r2, r3, #1
 8004176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004178:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800417a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d104      	bne.n	800418c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004182:	f001 f949 	bl	8005418 <pvTaskIncrementMutexHeldCount>
 8004186:	4602      	mov	r2, r0
 8004188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800418c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00f      	beq.n	80041b4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004196:	3310      	adds	r3, #16
 8004198:	4618      	mov	r0, r3
 800419a:	f000 fdd9 	bl	8004d50 <xTaskRemoveFromEventList>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d007      	beq.n	80041b4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80041a4:	4b53      	ldr	r3, [pc, #332]	; (80042f4 <xQueueSemaphoreTake+0x20c>)
 80041a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80041b4:	f7ff fa60 	bl	8003678 <vPortExitCritical>
				return pdPASS;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e096      	b.n	80042ea <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d110      	bne.n	80041e4 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80041c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d009      	beq.n	80041dc <xQueueSemaphoreTake+0xf4>
 80041c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041cc:	f383 8811 	msr	BASEPRI, r3
 80041d0:	f3bf 8f6f 	isb	sy
 80041d4:	f3bf 8f4f 	dsb	sy
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	e7fe      	b.n	80041da <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80041dc:	f7ff fa4c 	bl	8003678 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80041e0:	2300      	movs	r3, #0
 80041e2:	e082      	b.n	80042ea <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d106      	bne.n	80041f8 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041ea:	f107 030c 	add.w	r3, r7, #12
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 fe10 	bl	8004e14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041f4:	2301      	movs	r3, #1
 80041f6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041f8:	f7ff fa3e 	bl	8003678 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041fc:	f000 fbc4 	bl	8004988 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004200:	f7ff fa0c 	bl	800361c <vPortEnterCritical>
 8004204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004206:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800420a:	b25b      	sxtb	r3, r3
 800420c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004210:	d103      	bne.n	800421a <xQueueSemaphoreTake+0x132>
 8004212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800421a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004220:	b25b      	sxtb	r3, r3
 8004222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004226:	d103      	bne.n	8004230 <xQueueSemaphoreTake+0x148>
 8004228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004230:	f7ff fa22 	bl	8003678 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004234:	463a      	mov	r2, r7
 8004236:	f107 030c 	add.w	r3, r7, #12
 800423a:	4611      	mov	r1, r2
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fdff 	bl	8004e40 <xTaskCheckForTimeOut>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d132      	bne.n	80042ae <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004248:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800424a:	f000 f9cc 	bl	80045e6 <prvIsQueueEmpty>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d026      	beq.n	80042a2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d109      	bne.n	8004270 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800425c:	f7ff f9de 	bl	800361c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	4618      	mov	r0, r3
 8004266:	f000 ff2f 	bl	80050c8 <xTaskPriorityInherit>
 800426a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800426c:	f7ff fa04 	bl	8003678 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004272:	3324      	adds	r3, #36	; 0x24
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	4611      	mov	r1, r2
 8004278:	4618      	mov	r0, r3
 800427a:	f000 fd45 	bl	8004d08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800427e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004280:	f000 f95f 	bl	8004542 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004284:	f000 fb8e 	bl	80049a4 <xTaskResumeAll>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	f47f af69 	bne.w	8004162 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8004290:	4b18      	ldr	r3, [pc, #96]	; (80042f4 <xQueueSemaphoreTake+0x20c>)
 8004292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	e75f      	b.n	8004162 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80042a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80042a4:	f000 f94d 	bl	8004542 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042a8:	f000 fb7c 	bl	80049a4 <xTaskResumeAll>
 80042ac:	e759      	b.n	8004162 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80042ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80042b0:	f000 f947 	bl	8004542 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042b4:	f000 fb76 	bl	80049a4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80042ba:	f000 f994 	bl	80045e6 <prvIsQueueEmpty>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f43f af4e 	beq.w	8004162 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80042c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00d      	beq.n	80042e8 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80042cc:	f7ff f9a6 	bl	800361c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80042d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80042d2:	f000 f88e 	bl	80043f2 <prvGetDisinheritPriorityAfterTimeout>
 80042d6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80042d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 fffc 	bl	80052dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80042e4:	f7ff f9c8 	bl	8003678 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80042e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3738      	adds	r7, #56	; 0x38
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	e000ed04 	.word	0xe000ed04

080042f8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b08e      	sub	sp, #56	; 0x38
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430a:	2b00      	cmp	r3, #0
 800430c:	d109      	bne.n	8004322 <xQueueReceiveFromISR+0x2a>
 800430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	623b      	str	r3, [r7, #32]
 8004320:	e7fe      	b.n	8004320 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d103      	bne.n	8004330 <xQueueReceiveFromISR+0x38>
 8004328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <xQueueReceiveFromISR+0x3c>
 8004330:	2301      	movs	r3, #1
 8004332:	e000      	b.n	8004336 <xQueueReceiveFromISR+0x3e>
 8004334:	2300      	movs	r3, #0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d109      	bne.n	800434e <xQueueReceiveFromISR+0x56>
 800433a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433e:	f383 8811 	msr	BASEPRI, r3
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	61fb      	str	r3, [r7, #28]
 800434c:	e7fe      	b.n	800434c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800434e:	f7ff fa41 	bl	80037d4 <vPortValidateInterruptPriority>
	__asm volatile
 8004352:	f3ef 8211 	mrs	r2, BASEPRI
 8004356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	61ba      	str	r2, [r7, #24]
 8004368:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800436a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800436c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800436e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004372:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004376:	2b00      	cmp	r3, #0
 8004378:	d02f      	beq.n	80043da <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800437a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004380:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004384:	68b9      	ldr	r1, [r7, #8]
 8004386:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004388:	f000 f8b5 	bl	80044f6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800438c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438e:	1e5a      	subs	r2, r3, #1
 8004390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004392:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004394:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800439c:	d112      	bne.n	80043c4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800439e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d016      	beq.n	80043d4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a8:	3310      	adds	r3, #16
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 fcd0 	bl	8004d50 <xTaskRemoveFromEventList>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00e      	beq.n	80043d4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00b      	beq.n	80043d4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	e007      	b.n	80043d4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80043c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043c8:	3301      	adds	r3, #1
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	b25a      	sxtb	r2, r3
 80043ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80043d4:	2301      	movs	r3, #1
 80043d6:	637b      	str	r3, [r7, #52]	; 0x34
 80043d8:	e001      	b.n	80043de <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80043da:	2300      	movs	r3, #0
 80043dc:	637b      	str	r3, [r7, #52]	; 0x34
 80043de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80043e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3738      	adds	r7, #56	; 0x38
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80043f2:	b480      	push	{r7}
 80043f4:	b085      	sub	sp, #20
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d006      	beq.n	8004410 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f1c3 0307 	rsb	r3, r3, #7
 800440c:	60fb      	str	r3, [r7, #12]
 800440e:	e001      	b.n	8004414 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004410:	2300      	movs	r3, #0
 8004412:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004414:	68fb      	ldr	r3, [r7, #12]
	}
 8004416:	4618      	mov	r0, r3
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b086      	sub	sp, #24
 8004426:	af00      	add	r7, sp, #0
 8004428:	60f8      	str	r0, [r7, #12]
 800442a:	60b9      	str	r1, [r7, #8]
 800442c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800442e:	2300      	movs	r3, #0
 8004430:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004436:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10d      	bne.n	800445c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d14d      	bne.n	80044e4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	4618      	mov	r0, r3
 800444e:	f000 fec1 	bl	80051d4 <xTaskPriorityDisinherit>
 8004452:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	605a      	str	r2, [r3, #4]
 800445a:	e043      	b.n	80044e4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d119      	bne.n	8004496 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6898      	ldr	r0, [r3, #8]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	461a      	mov	r2, r3
 800446c:	68b9      	ldr	r1, [r7, #8]
 800446e:	f001 fbab 	bl	8005bc8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	441a      	add	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	429a      	cmp	r2, r3
 800448a:	d32b      	bcc.n	80044e4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	609a      	str	r2, [r3, #8]
 8004494:	e026      	b.n	80044e4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	68d8      	ldr	r0, [r3, #12]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	461a      	mov	r2, r3
 80044a0:	68b9      	ldr	r1, [r7, #8]
 80044a2:	f001 fb91 	bl	8005bc8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	68da      	ldr	r2, [r3, #12]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	425b      	negs	r3, r3
 80044b0:	441a      	add	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	68da      	ldr	r2, [r3, #12]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d207      	bcs.n	80044d2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	425b      	negs	r3, r3
 80044cc:	441a      	add	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d105      	bne.n	80044e4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	3b01      	subs	r3, #1
 80044e2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	1c5a      	adds	r2, r3, #1
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80044ec:	697b      	ldr	r3, [r7, #20]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3718      	adds	r7, #24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b082      	sub	sp, #8
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	2b00      	cmp	r3, #0
 8004506:	d018      	beq.n	800453a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004510:	441a      	add	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68da      	ldr	r2, [r3, #12]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	429a      	cmp	r2, r3
 8004520:	d303      	bcc.n	800452a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68d9      	ldr	r1, [r3, #12]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	461a      	mov	r2, r3
 8004534:	6838      	ldr	r0, [r7, #0]
 8004536:	f001 fb47 	bl	8005bc8 <memcpy>
	}
}
 800453a:	bf00      	nop
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b084      	sub	sp, #16
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800454a:	f7ff f867 	bl	800361c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004554:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004556:	e011      	b.n	800457c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	2b00      	cmp	r3, #0
 800455e:	d012      	beq.n	8004586 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3324      	adds	r3, #36	; 0x24
 8004564:	4618      	mov	r0, r3
 8004566:	f000 fbf3 	bl	8004d50 <xTaskRemoveFromEventList>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004570:	f000 fcc6 	bl	8004f00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004574:	7bfb      	ldrb	r3, [r7, #15]
 8004576:	3b01      	subs	r3, #1
 8004578:	b2db      	uxtb	r3, r3
 800457a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800457c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004580:	2b00      	cmp	r3, #0
 8004582:	dce9      	bgt.n	8004558 <prvUnlockQueue+0x16>
 8004584:	e000      	b.n	8004588 <prvUnlockQueue+0x46>
					break;
 8004586:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	22ff      	movs	r2, #255	; 0xff
 800458c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004590:	f7ff f872 	bl	8003678 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004594:	f7ff f842 	bl	800361c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800459e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045a0:	e011      	b.n	80045c6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d012      	beq.n	80045d0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	3310      	adds	r3, #16
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 fbce 	bl	8004d50 <xTaskRemoveFromEventList>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80045ba:	f000 fca1 	bl	8004f00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80045be:	7bbb      	ldrb	r3, [r7, #14]
 80045c0:	3b01      	subs	r3, #1
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	dce9      	bgt.n	80045a2 <prvUnlockQueue+0x60>
 80045ce:	e000      	b.n	80045d2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80045d0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	22ff      	movs	r2, #255	; 0xff
 80045d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80045da:	f7ff f84d 	bl	8003678 <vPortExitCritical>
}
 80045de:	bf00      	nop
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b084      	sub	sp, #16
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045ee:	f7ff f815 	bl	800361c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d102      	bne.n	8004600 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80045fa:	2301      	movs	r3, #1
 80045fc:	60fb      	str	r3, [r7, #12]
 80045fe:	e001      	b.n	8004604 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004600:	2300      	movs	r3, #0
 8004602:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004604:	f7ff f838 	bl	8003678 <vPortExitCritical>

	return xReturn;
 8004608:	68fb      	ldr	r3, [r7, #12]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b084      	sub	sp, #16
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800461a:	f7fe ffff 	bl	800361c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004626:	429a      	cmp	r2, r3
 8004628:	d102      	bne.n	8004630 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800462a:	2301      	movs	r3, #1
 800462c:	60fb      	str	r3, [r7, #12]
 800462e:	e001      	b.n	8004634 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004630:	2300      	movs	r3, #0
 8004632:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004634:	f7ff f820 	bl	8003678 <vPortExitCritical>

	return xReturn;
 8004638:	68fb      	ldr	r3, [r7, #12]
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004642:	b580      	push	{r7, lr}
 8004644:	b08c      	sub	sp, #48	; 0x30
 8004646:	af04      	add	r7, sp, #16
 8004648:	60f8      	str	r0, [r7, #12]
 800464a:	60b9      	str	r1, [r7, #8]
 800464c:	603b      	str	r3, [r7, #0]
 800464e:	4613      	mov	r3, r2
 8004650:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004652:	88fb      	ldrh	r3, [r7, #6]
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4618      	mov	r0, r3
 8004658:	f7ff f8fa 	bl	8003850 <pvPortMalloc>
 800465c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00e      	beq.n	8004682 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004664:	2054      	movs	r0, #84	; 0x54
 8004666:	f7ff f8f3 	bl	8003850 <pvPortMalloc>
 800466a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	631a      	str	r2, [r3, #48]	; 0x30
 8004678:	e005      	b.n	8004686 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800467a:	6978      	ldr	r0, [r7, #20]
 800467c:	f7ff f9aa 	bl	80039d4 <vPortFree>
 8004680:	e001      	b.n	8004686 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004682:	2300      	movs	r3, #0
 8004684:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d013      	beq.n	80046b4 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800468c:	88fa      	ldrh	r2, [r7, #6]
 800468e:	2300      	movs	r3, #0
 8004690:	9303      	str	r3, [sp, #12]
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	9302      	str	r3, [sp, #8]
 8004696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004698:	9301      	str	r3, [sp, #4]
 800469a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	68b9      	ldr	r1, [r7, #8]
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f000 f80e 	bl	80046c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046a8:	69f8      	ldr	r0, [r7, #28]
 80046aa:	f000 f889 	bl	80047c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80046ae:	2301      	movs	r3, #1
 80046b0:	61bb      	str	r3, [r7, #24]
 80046b2:	e002      	b.n	80046ba <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80046b4:	f04f 33ff 	mov.w	r3, #4294967295
 80046b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80046ba:	69bb      	ldr	r3, [r7, #24]
	}
 80046bc:	4618      	mov	r0, r3
 80046be:	3720      	adds	r7, #32
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b088      	sub	sp, #32
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
 80046d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80046d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80046dc:	3b01      	subs	r3, #1
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	f023 0307 	bic.w	r3, r3, #7
 80046ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	f003 0307 	and.w	r3, r3, #7
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d009      	beq.n	800470a <prvInitialiseNewTask+0x46>
	__asm volatile
 80046f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fa:	f383 8811 	msr	BASEPRI, r3
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f3bf 8f4f 	dsb	sy
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	e7fe      	b.n	8004708 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800470a:	2300      	movs	r3, #0
 800470c:	61fb      	str	r3, [r7, #28]
 800470e:	e012      	b.n	8004736 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	4413      	add	r3, r2
 8004716:	7819      	ldrb	r1, [r3, #0]
 8004718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	4413      	add	r3, r2
 800471e:	3334      	adds	r3, #52	; 0x34
 8004720:	460a      	mov	r2, r1
 8004722:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	4413      	add	r3, r2
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d006      	beq.n	800473e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	3301      	adds	r3, #1
 8004734:	61fb      	str	r3, [r7, #28]
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	2b0f      	cmp	r3, #15
 800473a:	d9e9      	bls.n	8004710 <prvInitialiseNewTask+0x4c>
 800473c:	e000      	b.n	8004740 <prvInitialiseNewTask+0x7c>
		{
			break;
 800473e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004742:	2200      	movs	r2, #0
 8004744:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474a:	2b06      	cmp	r3, #6
 800474c:	d901      	bls.n	8004752 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800474e:	2306      	movs	r3, #6
 8004750:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004754:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004756:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800475c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800475e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004760:	2200      	movs	r2, #0
 8004762:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004766:	3304      	adds	r3, #4
 8004768:	4618      	mov	r0, r3
 800476a:	f7fe fd9f 	bl	80032ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800476e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004770:	3318      	adds	r3, #24
 8004772:	4618      	mov	r0, r3
 8004774:	f7fe fd9a 	bl	80032ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800477c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800477e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004780:	f1c3 0207 	rsb	r2, r3, #7
 8004784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004786:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800478c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800478e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004790:	2200      	movs	r2, #0
 8004792:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	68f9      	ldr	r1, [r7, #12]
 80047a0:	69b8      	ldr	r0, [r7, #24]
 80047a2:	f7fe fe17 	bl	80033d4 <pxPortInitialiseStack>
 80047a6:	4602      	mov	r2, r0
 80047a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047aa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80047ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80047b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047b8:	bf00      	nop
 80047ba:	3720      	adds	r7, #32
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80047c8:	f7fe ff28 	bl	800361c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80047cc:	4b2a      	ldr	r3, [pc, #168]	; (8004878 <prvAddNewTaskToReadyList+0xb8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3301      	adds	r3, #1
 80047d2:	4a29      	ldr	r2, [pc, #164]	; (8004878 <prvAddNewTaskToReadyList+0xb8>)
 80047d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80047d6:	4b29      	ldr	r3, [pc, #164]	; (800487c <prvAddNewTaskToReadyList+0xbc>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d109      	bne.n	80047f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80047de:	4a27      	ldr	r2, [pc, #156]	; (800487c <prvAddNewTaskToReadyList+0xbc>)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80047e4:	4b24      	ldr	r3, [pc, #144]	; (8004878 <prvAddNewTaskToReadyList+0xb8>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d110      	bne.n	800480e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80047ec:	f000 fbac 	bl	8004f48 <prvInitialiseTaskLists>
 80047f0:	e00d      	b.n	800480e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80047f2:	4b23      	ldr	r3, [pc, #140]	; (8004880 <prvAddNewTaskToReadyList+0xc0>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d109      	bne.n	800480e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80047fa:	4b20      	ldr	r3, [pc, #128]	; (800487c <prvAddNewTaskToReadyList+0xbc>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004804:	429a      	cmp	r2, r3
 8004806:	d802      	bhi.n	800480e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004808:	4a1c      	ldr	r2, [pc, #112]	; (800487c <prvAddNewTaskToReadyList+0xbc>)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800480e:	4b1d      	ldr	r3, [pc, #116]	; (8004884 <prvAddNewTaskToReadyList+0xc4>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3301      	adds	r3, #1
 8004814:	4a1b      	ldr	r2, [pc, #108]	; (8004884 <prvAddNewTaskToReadyList+0xc4>)
 8004816:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481c:	2201      	movs	r2, #1
 800481e:	409a      	lsls	r2, r3
 8004820:	4b19      	ldr	r3, [pc, #100]	; (8004888 <prvAddNewTaskToReadyList+0xc8>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4313      	orrs	r3, r2
 8004826:	4a18      	ldr	r2, [pc, #96]	; (8004888 <prvAddNewTaskToReadyList+0xc8>)
 8004828:	6013      	str	r3, [r2, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800482e:	4613      	mov	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4413      	add	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4a15      	ldr	r2, [pc, #84]	; (800488c <prvAddNewTaskToReadyList+0xcc>)
 8004838:	441a      	add	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3304      	adds	r3, #4
 800483e:	4619      	mov	r1, r3
 8004840:	4610      	mov	r0, r2
 8004842:	f7fe fd40 	bl	80032c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004846:	f7fe ff17 	bl	8003678 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800484a:	4b0d      	ldr	r3, [pc, #52]	; (8004880 <prvAddNewTaskToReadyList+0xc0>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00e      	beq.n	8004870 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004852:	4b0a      	ldr	r3, [pc, #40]	; (800487c <prvAddNewTaskToReadyList+0xbc>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485c:	429a      	cmp	r2, r3
 800485e:	d207      	bcs.n	8004870 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004860:	4b0b      	ldr	r3, [pc, #44]	; (8004890 <prvAddNewTaskToReadyList+0xd0>)
 8004862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004870:	bf00      	nop
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	200028b8 	.word	0x200028b8
 800487c:	200027b8 	.word	0x200027b8
 8004880:	200028c4 	.word	0x200028c4
 8004884:	200028d4 	.word	0x200028d4
 8004888:	200028c0 	.word	0x200028c0
 800488c:	200027bc 	.word	0x200027bc
 8004890:	e000ed04 	.word	0xe000ed04

08004894 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800489c:	2300      	movs	r3, #0
 800489e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d016      	beq.n	80048d4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80048a6:	4b13      	ldr	r3, [pc, #76]	; (80048f4 <vTaskDelay+0x60>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d009      	beq.n	80048c2 <vTaskDelay+0x2e>
 80048ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b2:	f383 8811 	msr	BASEPRI, r3
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	60bb      	str	r3, [r7, #8]
 80048c0:	e7fe      	b.n	80048c0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80048c2:	f000 f861 	bl	8004988 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80048c6:	2100      	movs	r1, #0
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 fdb9 	bl	8005440 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80048ce:	f000 f869 	bl	80049a4 <xTaskResumeAll>
 80048d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d107      	bne.n	80048ea <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80048da:	4b07      	ldr	r3, [pc, #28]	; (80048f8 <vTaskDelay+0x64>)
 80048dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	f3bf 8f4f 	dsb	sy
 80048e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80048ea:	bf00      	nop
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	200028e0 	.word	0x200028e0
 80048f8:	e000ed04 	.word	0xe000ed04

080048fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004902:	4b1b      	ldr	r3, [pc, #108]	; (8004970 <vTaskStartScheduler+0x74>)
 8004904:	9301      	str	r3, [sp, #4]
 8004906:	2300      	movs	r3, #0
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	2300      	movs	r3, #0
 800490c:	2280      	movs	r2, #128	; 0x80
 800490e:	4919      	ldr	r1, [pc, #100]	; (8004974 <vTaskStartScheduler+0x78>)
 8004910:	4819      	ldr	r0, [pc, #100]	; (8004978 <vTaskStartScheduler+0x7c>)
 8004912:	f7ff fe96 	bl	8004642 <xTaskCreate>
 8004916:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d115      	bne.n	800494a <vTaskStartScheduler+0x4e>
 800491e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004930:	4b12      	ldr	r3, [pc, #72]	; (800497c <vTaskStartScheduler+0x80>)
 8004932:	f04f 32ff 	mov.w	r2, #4294967295
 8004936:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004938:	4b11      	ldr	r3, [pc, #68]	; (8004980 <vTaskStartScheduler+0x84>)
 800493a:	2201      	movs	r2, #1
 800493c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800493e:	4b11      	ldr	r3, [pc, #68]	; (8004984 <vTaskStartScheduler+0x88>)
 8004940:	2200      	movs	r2, #0
 8004942:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004944:	f7fe fdcc 	bl	80034e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004948:	e00d      	b.n	8004966 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004950:	d109      	bne.n	8004966 <vTaskStartScheduler+0x6a>
 8004952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	607b      	str	r3, [r7, #4]
 8004964:	e7fe      	b.n	8004964 <vTaskStartScheduler+0x68>
}
 8004966:	bf00      	nop
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	200028dc 	.word	0x200028dc
 8004974:	08006a64 	.word	0x08006a64
 8004978:	08004f19 	.word	0x08004f19
 800497c:	200028d8 	.word	0x200028d8
 8004980:	200028c4 	.word	0x200028c4
 8004984:	200028bc 	.word	0x200028bc

08004988 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800498c:	4b04      	ldr	r3, [pc, #16]	; (80049a0 <vTaskSuspendAll+0x18>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	3301      	adds	r3, #1
 8004992:	4a03      	ldr	r2, [pc, #12]	; (80049a0 <vTaskSuspendAll+0x18>)
 8004994:	6013      	str	r3, [r2, #0]
}
 8004996:	bf00      	nop
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	200028e0 	.word	0x200028e0

080049a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80049ae:	2300      	movs	r3, #0
 80049b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80049b2:	4b41      	ldr	r3, [pc, #260]	; (8004ab8 <xTaskResumeAll+0x114>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d109      	bne.n	80049ce <xTaskResumeAll+0x2a>
 80049ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	603b      	str	r3, [r7, #0]
 80049cc:	e7fe      	b.n	80049cc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80049ce:	f7fe fe25 	bl	800361c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80049d2:	4b39      	ldr	r3, [pc, #228]	; (8004ab8 <xTaskResumeAll+0x114>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	4a37      	ldr	r2, [pc, #220]	; (8004ab8 <xTaskResumeAll+0x114>)
 80049da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049dc:	4b36      	ldr	r3, [pc, #216]	; (8004ab8 <xTaskResumeAll+0x114>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d161      	bne.n	8004aa8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80049e4:	4b35      	ldr	r3, [pc, #212]	; (8004abc <xTaskResumeAll+0x118>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d05d      	beq.n	8004aa8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049ec:	e02e      	b.n	8004a4c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80049ee:	4b34      	ldr	r3, [pc, #208]	; (8004ac0 <xTaskResumeAll+0x11c>)
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	3318      	adds	r3, #24
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fe fcc0 	bl	8003380 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	3304      	adds	r3, #4
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fe fcbb 	bl	8003380 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0e:	2201      	movs	r2, #1
 8004a10:	409a      	lsls	r2, r3
 8004a12:	4b2c      	ldr	r3, [pc, #176]	; (8004ac4 <xTaskResumeAll+0x120>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	4a2a      	ldr	r2, [pc, #168]	; (8004ac4 <xTaskResumeAll+0x120>)
 8004a1a:	6013      	str	r3, [r2, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a20:	4613      	mov	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4a27      	ldr	r2, [pc, #156]	; (8004ac8 <xTaskResumeAll+0x124>)
 8004a2a:	441a      	add	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	3304      	adds	r3, #4
 8004a30:	4619      	mov	r1, r3
 8004a32:	4610      	mov	r0, r2
 8004a34:	f7fe fc47 	bl	80032c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a3c:	4b23      	ldr	r3, [pc, #140]	; (8004acc <xTaskResumeAll+0x128>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d302      	bcc.n	8004a4c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004a46:	4b22      	ldr	r3, [pc, #136]	; (8004ad0 <xTaskResumeAll+0x12c>)
 8004a48:	2201      	movs	r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a4c:	4b1c      	ldr	r3, [pc, #112]	; (8004ac0 <xTaskResumeAll+0x11c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1cc      	bne.n	80049ee <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004a5a:	f000 faf1 	bl	8005040 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004a5e:	4b1d      	ldr	r3, [pc, #116]	; (8004ad4 <xTaskResumeAll+0x130>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d010      	beq.n	8004a8c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004a6a:	f000 f837 	bl	8004adc <xTaskIncrementTick>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d002      	beq.n	8004a7a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004a74:	4b16      	ldr	r3, [pc, #88]	; (8004ad0 <xTaskResumeAll+0x12c>)
 8004a76:	2201      	movs	r2, #1
 8004a78:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1f1      	bne.n	8004a6a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004a86:	4b13      	ldr	r3, [pc, #76]	; (8004ad4 <xTaskResumeAll+0x130>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a8c:	4b10      	ldr	r3, [pc, #64]	; (8004ad0 <xTaskResumeAll+0x12c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d009      	beq.n	8004aa8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004a94:	2301      	movs	r3, #1
 8004a96:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004a98:	4b0f      	ldr	r3, [pc, #60]	; (8004ad8 <xTaskResumeAll+0x134>)
 8004a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004aa8:	f7fe fde6 	bl	8003678 <vPortExitCritical>

	return xAlreadyYielded;
 8004aac:	68bb      	ldr	r3, [r7, #8]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	200028e0 	.word	0x200028e0
 8004abc:	200028b8 	.word	0x200028b8
 8004ac0:	20002878 	.word	0x20002878
 8004ac4:	200028c0 	.word	0x200028c0
 8004ac8:	200027bc 	.word	0x200027bc
 8004acc:	200027b8 	.word	0x200027b8
 8004ad0:	200028cc 	.word	0x200028cc
 8004ad4:	200028c8 	.word	0x200028c8
 8004ad8:	e000ed04 	.word	0xe000ed04

08004adc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ae6:	4b50      	ldr	r3, [pc, #320]	; (8004c28 <xTaskIncrementTick+0x14c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f040 808c 	bne.w	8004c08 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004af0:	4b4e      	ldr	r3, [pc, #312]	; (8004c2c <xTaskIncrementTick+0x150>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	3301      	adds	r3, #1
 8004af6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004af8:	4a4c      	ldr	r2, [pc, #304]	; (8004c2c <xTaskIncrementTick+0x150>)
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d11f      	bne.n	8004b44 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004b04:	4b4a      	ldr	r3, [pc, #296]	; (8004c30 <xTaskIncrementTick+0x154>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d009      	beq.n	8004b22 <xTaskIncrementTick+0x46>
 8004b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	e7fe      	b.n	8004b20 <xTaskIncrementTick+0x44>
 8004b22:	4b43      	ldr	r3, [pc, #268]	; (8004c30 <xTaskIncrementTick+0x154>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	4b42      	ldr	r3, [pc, #264]	; (8004c34 <xTaskIncrementTick+0x158>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a40      	ldr	r2, [pc, #256]	; (8004c30 <xTaskIncrementTick+0x154>)
 8004b2e:	6013      	str	r3, [r2, #0]
 8004b30:	4a40      	ldr	r2, [pc, #256]	; (8004c34 <xTaskIncrementTick+0x158>)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	4b40      	ldr	r3, [pc, #256]	; (8004c38 <xTaskIncrementTick+0x15c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	4a3e      	ldr	r2, [pc, #248]	; (8004c38 <xTaskIncrementTick+0x15c>)
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	f000 fa7e 	bl	8005040 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b44:	4b3d      	ldr	r3, [pc, #244]	; (8004c3c <xTaskIncrementTick+0x160>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d34d      	bcc.n	8004bea <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b4e:	4b38      	ldr	r3, [pc, #224]	; (8004c30 <xTaskIncrementTick+0x154>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <xTaskIncrementTick+0x80>
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e000      	b.n	8004b5e <xTaskIncrementTick+0x82>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d004      	beq.n	8004b6c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b62:	4b36      	ldr	r3, [pc, #216]	; (8004c3c <xTaskIncrementTick+0x160>)
 8004b64:	f04f 32ff 	mov.w	r2, #4294967295
 8004b68:	601a      	str	r2, [r3, #0]
					break;
 8004b6a:	e03e      	b.n	8004bea <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b6c:	4b30      	ldr	r3, [pc, #192]	; (8004c30 <xTaskIncrementTick+0x154>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d203      	bcs.n	8004b8c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b84:	4a2d      	ldr	r2, [pc, #180]	; (8004c3c <xTaskIncrementTick+0x160>)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6013      	str	r3, [r2, #0]
						break;
 8004b8a:	e02e      	b.n	8004bea <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7fe fbf5 	bl	8003380 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d004      	beq.n	8004ba8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	3318      	adds	r3, #24
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7fe fbec 	bl	8003380 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bac:	2201      	movs	r2, #1
 8004bae:	409a      	lsls	r2, r3
 8004bb0:	4b23      	ldr	r3, [pc, #140]	; (8004c40 <xTaskIncrementTick+0x164>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	4a22      	ldr	r2, [pc, #136]	; (8004c40 <xTaskIncrementTick+0x164>)
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4a1f      	ldr	r2, [pc, #124]	; (8004c44 <xTaskIncrementTick+0x168>)
 8004bc8:	441a      	add	r2, r3
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	3304      	adds	r3, #4
 8004bce:	4619      	mov	r1, r3
 8004bd0:	4610      	mov	r0, r2
 8004bd2:	f7fe fb78 	bl	80032c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bda:	4b1b      	ldr	r3, [pc, #108]	; (8004c48 <xTaskIncrementTick+0x16c>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d3b4      	bcc.n	8004b4e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004be4:	2301      	movs	r3, #1
 8004be6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004be8:	e7b1      	b.n	8004b4e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004bea:	4b17      	ldr	r3, [pc, #92]	; (8004c48 <xTaskIncrementTick+0x16c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf0:	4914      	ldr	r1, [pc, #80]	; (8004c44 <xTaskIncrementTick+0x168>)
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	440b      	add	r3, r1
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d907      	bls.n	8004c12 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8004c02:	2301      	movs	r3, #1
 8004c04:	617b      	str	r3, [r7, #20]
 8004c06:	e004      	b.n	8004c12 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004c08:	4b10      	ldr	r3, [pc, #64]	; (8004c4c <xTaskIncrementTick+0x170>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	4a0f      	ldr	r2, [pc, #60]	; (8004c4c <xTaskIncrementTick+0x170>)
 8004c10:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004c12:	4b0f      	ldr	r3, [pc, #60]	; (8004c50 <xTaskIncrementTick+0x174>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004c1e:	697b      	ldr	r3, [r7, #20]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3718      	adds	r7, #24
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	200028e0 	.word	0x200028e0
 8004c2c:	200028bc 	.word	0x200028bc
 8004c30:	20002870 	.word	0x20002870
 8004c34:	20002874 	.word	0x20002874
 8004c38:	200028d0 	.word	0x200028d0
 8004c3c:	200028d8 	.word	0x200028d8
 8004c40:	200028c0 	.word	0x200028c0
 8004c44:	200027bc 	.word	0x200027bc
 8004c48:	200027b8 	.word	0x200027b8
 8004c4c:	200028c8 	.word	0x200028c8
 8004c50:	200028cc 	.word	0x200028cc

08004c54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004c54:	b480      	push	{r7}
 8004c56:	b087      	sub	sp, #28
 8004c58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c5a:	4b26      	ldr	r3, [pc, #152]	; (8004cf4 <vTaskSwitchContext+0xa0>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c62:	4b25      	ldr	r3, [pc, #148]	; (8004cf8 <vTaskSwitchContext+0xa4>)
 8004c64:	2201      	movs	r2, #1
 8004c66:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c68:	e03e      	b.n	8004ce8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004c6a:	4b23      	ldr	r3, [pc, #140]	; (8004cf8 <vTaskSwitchContext+0xa4>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004c70:	4b22      	ldr	r3, [pc, #136]	; (8004cfc <vTaskSwitchContext+0xa8>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	fab3 f383 	clz	r3, r3
 8004c7c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004c7e:	7afb      	ldrb	r3, [r7, #11]
 8004c80:	f1c3 031f 	rsb	r3, r3, #31
 8004c84:	617b      	str	r3, [r7, #20]
 8004c86:	491e      	ldr	r1, [pc, #120]	; (8004d00 <vTaskSwitchContext+0xac>)
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	440b      	add	r3, r1
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d109      	bne.n	8004cae <vTaskSwitchContext+0x5a>
	__asm volatile
 8004c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9e:	f383 8811 	msr	BASEPRI, r3
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	f3bf 8f4f 	dsb	sy
 8004caa:	607b      	str	r3, [r7, #4]
 8004cac:	e7fe      	b.n	8004cac <vTaskSwitchContext+0x58>
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4a11      	ldr	r2, [pc, #68]	; (8004d00 <vTaskSwitchContext+0xac>)
 8004cba:	4413      	add	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	605a      	str	r2, [r3, #4]
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	3308      	adds	r3, #8
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d104      	bne.n	8004cde <vTaskSwitchContext+0x8a>
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	605a      	str	r2, [r3, #4]
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	4a07      	ldr	r2, [pc, #28]	; (8004d04 <vTaskSwitchContext+0xb0>)
 8004ce6:	6013      	str	r3, [r2, #0]
}
 8004ce8:	bf00      	nop
 8004cea:	371c      	adds	r7, #28
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	200028e0 	.word	0x200028e0
 8004cf8:	200028cc 	.word	0x200028cc
 8004cfc:	200028c0 	.word	0x200028c0
 8004d00:	200027bc 	.word	0x200027bc
 8004d04:	200027b8 	.word	0x200027b8

08004d08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d109      	bne.n	8004d2c <vTaskPlaceOnEventList+0x24>
 8004d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1c:	f383 8811 	msr	BASEPRI, r3
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	60fb      	str	r3, [r7, #12]
 8004d2a:	e7fe      	b.n	8004d2a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d2c:	4b07      	ldr	r3, [pc, #28]	; (8004d4c <vTaskPlaceOnEventList+0x44>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3318      	adds	r3, #24
 8004d32:	4619      	mov	r1, r3
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f7fe faea 	bl	800330e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	6838      	ldr	r0, [r7, #0]
 8004d3e:	f000 fb7f 	bl	8005440 <prvAddCurrentTaskToDelayedList>
}
 8004d42:	bf00      	nop
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	200027b8 	.word	0x200027b8

08004d50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d109      	bne.n	8004d7a <xTaskRemoveFromEventList+0x2a>
 8004d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6a:	f383 8811 	msr	BASEPRI, r3
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f3bf 8f4f 	dsb	sy
 8004d76:	60fb      	str	r3, [r7, #12]
 8004d78:	e7fe      	b.n	8004d78 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	3318      	adds	r3, #24
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7fe fafe 	bl	8003380 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d84:	4b1d      	ldr	r3, [pc, #116]	; (8004dfc <xTaskRemoveFromEventList+0xac>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d11c      	bne.n	8004dc6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	3304      	adds	r3, #4
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7fe faf5 	bl	8003380 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	409a      	lsls	r2, r3
 8004d9e:	4b18      	ldr	r3, [pc, #96]	; (8004e00 <xTaskRemoveFromEventList+0xb0>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	4a16      	ldr	r2, [pc, #88]	; (8004e00 <xTaskRemoveFromEventList+0xb0>)
 8004da6:	6013      	str	r3, [r2, #0]
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dac:	4613      	mov	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4413      	add	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4a13      	ldr	r2, [pc, #76]	; (8004e04 <xTaskRemoveFromEventList+0xb4>)
 8004db6:	441a      	add	r2, r3
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	3304      	adds	r3, #4
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4610      	mov	r0, r2
 8004dc0:	f7fe fa81 	bl	80032c6 <vListInsertEnd>
 8004dc4:	e005      	b.n	8004dd2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	3318      	adds	r3, #24
 8004dca:	4619      	mov	r1, r3
 8004dcc:	480e      	ldr	r0, [pc, #56]	; (8004e08 <xTaskRemoveFromEventList+0xb8>)
 8004dce:	f7fe fa7a 	bl	80032c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd6:	4b0d      	ldr	r3, [pc, #52]	; (8004e0c <xTaskRemoveFromEventList+0xbc>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d905      	bls.n	8004dec <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004de0:	2301      	movs	r3, #1
 8004de2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004de4:	4b0a      	ldr	r3, [pc, #40]	; (8004e10 <xTaskRemoveFromEventList+0xc0>)
 8004de6:	2201      	movs	r2, #1
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	e001      	b.n	8004df0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8004dec:	2300      	movs	r3, #0
 8004dee:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004df0:	697b      	ldr	r3, [r7, #20]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3718      	adds	r7, #24
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	200028e0 	.word	0x200028e0
 8004e00:	200028c0 	.word	0x200028c0
 8004e04:	200027bc 	.word	0x200027bc
 8004e08:	20002878 	.word	0x20002878
 8004e0c:	200027b8 	.word	0x200027b8
 8004e10:	200028cc 	.word	0x200028cc

08004e14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004e1c:	4b06      	ldr	r3, [pc, #24]	; (8004e38 <vTaskInternalSetTimeOutState+0x24>)
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004e24:	4b05      	ldr	r3, [pc, #20]	; (8004e3c <vTaskInternalSetTimeOutState+0x28>)
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	605a      	str	r2, [r3, #4]
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	200028d0 	.word	0x200028d0
 8004e3c:	200028bc 	.word	0x200028bc

08004e40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b088      	sub	sp, #32
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d109      	bne.n	8004e64 <xTaskCheckForTimeOut+0x24>
 8004e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	613b      	str	r3, [r7, #16]
 8004e62:	e7fe      	b.n	8004e62 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d109      	bne.n	8004e7e <xTaskCheckForTimeOut+0x3e>
 8004e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6e:	f383 8811 	msr	BASEPRI, r3
 8004e72:	f3bf 8f6f 	isb	sy
 8004e76:	f3bf 8f4f 	dsb	sy
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	e7fe      	b.n	8004e7c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004e7e:	f7fe fbcd 	bl	800361c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004e82:	4b1d      	ldr	r3, [pc, #116]	; (8004ef8 <xTaskCheckForTimeOut+0xb8>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9a:	d102      	bne.n	8004ea2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	61fb      	str	r3, [r7, #28]
 8004ea0:	e023      	b.n	8004eea <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	4b15      	ldr	r3, [pc, #84]	; (8004efc <xTaskCheckForTimeOut+0xbc>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d007      	beq.n	8004ebe <xTaskCheckForTimeOut+0x7e>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685a      	ldr	r2, [r3, #4]
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d802      	bhi.n	8004ebe <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	61fb      	str	r3, [r7, #28]
 8004ebc:	e015      	b.n	8004eea <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d90b      	bls.n	8004ee0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	1ad2      	subs	r2, r2, r3
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f7ff ff9d 	bl	8004e14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004eda:	2300      	movs	r3, #0
 8004edc:	61fb      	str	r3, [r7, #28]
 8004ede:	e004      	b.n	8004eea <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004eea:	f7fe fbc5 	bl	8003678 <vPortExitCritical>

	return xReturn;
 8004eee:	69fb      	ldr	r3, [r7, #28]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3720      	adds	r7, #32
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	200028bc 	.word	0x200028bc
 8004efc:	200028d0 	.word	0x200028d0

08004f00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004f00:	b480      	push	{r7}
 8004f02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004f04:	4b03      	ldr	r3, [pc, #12]	; (8004f14 <vTaskMissedYield+0x14>)
 8004f06:	2201      	movs	r2, #1
 8004f08:	601a      	str	r2, [r3, #0]
}
 8004f0a:	bf00      	nop
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr
 8004f14:	200028cc 	.word	0x200028cc

08004f18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004f20:	f000 f852 	bl	8004fc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004f24:	4b06      	ldr	r3, [pc, #24]	; (8004f40 <prvIdleTask+0x28>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d9f9      	bls.n	8004f20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004f2c:	4b05      	ldr	r3, [pc, #20]	; (8004f44 <prvIdleTask+0x2c>)
 8004f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	f3bf 8f4f 	dsb	sy
 8004f38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004f3c:	e7f0      	b.n	8004f20 <prvIdleTask+0x8>
 8004f3e:	bf00      	nop
 8004f40:	200027bc 	.word	0x200027bc
 8004f44:	e000ed04 	.word	0xe000ed04

08004f48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f4e:	2300      	movs	r3, #0
 8004f50:	607b      	str	r3, [r7, #4]
 8004f52:	e00c      	b.n	8004f6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	4613      	mov	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4413      	add	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4a12      	ldr	r2, [pc, #72]	; (8004fa8 <prvInitialiseTaskLists+0x60>)
 8004f60:	4413      	add	r3, r2
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fe f982 	bl	800326c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	607b      	str	r3, [r7, #4]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b06      	cmp	r3, #6
 8004f72:	d9ef      	bls.n	8004f54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f74:	480d      	ldr	r0, [pc, #52]	; (8004fac <prvInitialiseTaskLists+0x64>)
 8004f76:	f7fe f979 	bl	800326c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f7a:	480d      	ldr	r0, [pc, #52]	; (8004fb0 <prvInitialiseTaskLists+0x68>)
 8004f7c:	f7fe f976 	bl	800326c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f80:	480c      	ldr	r0, [pc, #48]	; (8004fb4 <prvInitialiseTaskLists+0x6c>)
 8004f82:	f7fe f973 	bl	800326c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f86:	480c      	ldr	r0, [pc, #48]	; (8004fb8 <prvInitialiseTaskLists+0x70>)
 8004f88:	f7fe f970 	bl	800326c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f8c:	480b      	ldr	r0, [pc, #44]	; (8004fbc <prvInitialiseTaskLists+0x74>)
 8004f8e:	f7fe f96d 	bl	800326c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f92:	4b0b      	ldr	r3, [pc, #44]	; (8004fc0 <prvInitialiseTaskLists+0x78>)
 8004f94:	4a05      	ldr	r2, [pc, #20]	; (8004fac <prvInitialiseTaskLists+0x64>)
 8004f96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f98:	4b0a      	ldr	r3, [pc, #40]	; (8004fc4 <prvInitialiseTaskLists+0x7c>)
 8004f9a:	4a05      	ldr	r2, [pc, #20]	; (8004fb0 <prvInitialiseTaskLists+0x68>)
 8004f9c:	601a      	str	r2, [r3, #0]
}
 8004f9e:	bf00      	nop
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	200027bc 	.word	0x200027bc
 8004fac:	20002848 	.word	0x20002848
 8004fb0:	2000285c 	.word	0x2000285c
 8004fb4:	20002878 	.word	0x20002878
 8004fb8:	2000288c 	.word	0x2000288c
 8004fbc:	200028a4 	.word	0x200028a4
 8004fc0:	20002870 	.word	0x20002870
 8004fc4:	20002874 	.word	0x20002874

08004fc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fce:	e019      	b.n	8005004 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004fd0:	f7fe fb24 	bl	800361c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004fd4:	4b0f      	ldr	r3, [pc, #60]	; (8005014 <prvCheckTasksWaitingTermination+0x4c>)
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	3304      	adds	r3, #4
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7fe f9cd 	bl	8003380 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004fe6:	4b0c      	ldr	r3, [pc, #48]	; (8005018 <prvCheckTasksWaitingTermination+0x50>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	3b01      	subs	r3, #1
 8004fec:	4a0a      	ldr	r2, [pc, #40]	; (8005018 <prvCheckTasksWaitingTermination+0x50>)
 8004fee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ff0:	4b0a      	ldr	r3, [pc, #40]	; (800501c <prvCheckTasksWaitingTermination+0x54>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	4a09      	ldr	r2, [pc, #36]	; (800501c <prvCheckTasksWaitingTermination+0x54>)
 8004ff8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004ffa:	f7fe fb3d 	bl	8003678 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f80e 	bl	8005020 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005004:	4b05      	ldr	r3, [pc, #20]	; (800501c <prvCheckTasksWaitingTermination+0x54>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1e1      	bne.n	8004fd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800500c:	bf00      	nop
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	2000288c 	.word	0x2000288c
 8005018:	200028b8 	.word	0x200028b8
 800501c:	200028a0 	.word	0x200028a0

08005020 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502c:	4618      	mov	r0, r3
 800502e:	f7fe fcd1 	bl	80039d4 <vPortFree>
			vPortFree( pxTCB );
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7fe fcce 	bl	80039d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005038:	bf00      	nop
 800503a:	3708      	adds	r7, #8
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005046:	4b0f      	ldr	r3, [pc, #60]	; (8005084 <prvResetNextTaskUnblockTime+0x44>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <prvResetNextTaskUnblockTime+0x14>
 8005050:	2301      	movs	r3, #1
 8005052:	e000      	b.n	8005056 <prvResetNextTaskUnblockTime+0x16>
 8005054:	2300      	movs	r3, #0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d004      	beq.n	8005064 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800505a:	4b0b      	ldr	r3, [pc, #44]	; (8005088 <prvResetNextTaskUnblockTime+0x48>)
 800505c:	f04f 32ff 	mov.w	r2, #4294967295
 8005060:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005062:	e008      	b.n	8005076 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005064:	4b07      	ldr	r3, [pc, #28]	; (8005084 <prvResetNextTaskUnblockTime+0x44>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	4a05      	ldr	r2, [pc, #20]	; (8005088 <prvResetNextTaskUnblockTime+0x48>)
 8005074:	6013      	str	r3, [r2, #0]
}
 8005076:	bf00      	nop
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	20002870 	.word	0x20002870
 8005088:	200028d8 	.word	0x200028d8

0800508c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005092:	4b0b      	ldr	r3, [pc, #44]	; (80050c0 <xTaskGetSchedulerState+0x34>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d102      	bne.n	80050a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800509a:	2301      	movs	r3, #1
 800509c:	607b      	str	r3, [r7, #4]
 800509e:	e008      	b.n	80050b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050a0:	4b08      	ldr	r3, [pc, #32]	; (80050c4 <xTaskGetSchedulerState+0x38>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d102      	bne.n	80050ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80050a8:	2302      	movs	r3, #2
 80050aa:	607b      	str	r3, [r7, #4]
 80050ac:	e001      	b.n	80050b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80050ae:	2300      	movs	r3, #0
 80050b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80050b2:	687b      	ldr	r3, [r7, #4]
	}
 80050b4:	4618      	mov	r0, r3
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	200028c4 	.word	0x200028c4
 80050c4:	200028e0 	.word	0x200028e0

080050c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80050d4:	2300      	movs	r3, #0
 80050d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d06e      	beq.n	80051bc <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e2:	4b39      	ldr	r3, [pc, #228]	; (80051c8 <xTaskPriorityInherit+0x100>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d25e      	bcs.n	80051aa <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	db06      	blt.n	8005102 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050f4:	4b34      	ldr	r3, [pc, #208]	; (80051c8 <xTaskPriorityInherit+0x100>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fa:	f1c3 0207 	rsb	r2, r3, #7
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	6959      	ldr	r1, [r3, #20]
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800510a:	4613      	mov	r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	4413      	add	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4a2e      	ldr	r2, [pc, #184]	; (80051cc <xTaskPriorityInherit+0x104>)
 8005114:	4413      	add	r3, r2
 8005116:	4299      	cmp	r1, r3
 8005118:	d101      	bne.n	800511e <xTaskPriorityInherit+0x56>
 800511a:	2301      	movs	r3, #1
 800511c:	e000      	b.n	8005120 <xTaskPriorityInherit+0x58>
 800511e:	2300      	movs	r3, #0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d03a      	beq.n	800519a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	3304      	adds	r3, #4
 8005128:	4618      	mov	r0, r3
 800512a:	f7fe f929 	bl	8003380 <uxListRemove>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d115      	bne.n	8005160 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005138:	4924      	ldr	r1, [pc, #144]	; (80051cc <xTaskPriorityInherit+0x104>)
 800513a:	4613      	mov	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4413      	add	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	440b      	add	r3, r1
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10a      	bne.n	8005160 <xTaskPriorityInherit+0x98>
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514e:	2201      	movs	r2, #1
 8005150:	fa02 f303 	lsl.w	r3, r2, r3
 8005154:	43da      	mvns	r2, r3
 8005156:	4b1e      	ldr	r3, [pc, #120]	; (80051d0 <xTaskPriorityInherit+0x108>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4013      	ands	r3, r2
 800515c:	4a1c      	ldr	r2, [pc, #112]	; (80051d0 <xTaskPriorityInherit+0x108>)
 800515e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005160:	4b19      	ldr	r3, [pc, #100]	; (80051c8 <xTaskPriorityInherit+0x100>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516e:	2201      	movs	r2, #1
 8005170:	409a      	lsls	r2, r3
 8005172:	4b17      	ldr	r3, [pc, #92]	; (80051d0 <xTaskPriorityInherit+0x108>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4313      	orrs	r3, r2
 8005178:	4a15      	ldr	r2, [pc, #84]	; (80051d0 <xTaskPriorityInherit+0x108>)
 800517a:	6013      	str	r3, [r2, #0]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005180:	4613      	mov	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4a10      	ldr	r2, [pc, #64]	; (80051cc <xTaskPriorityInherit+0x104>)
 800518a:	441a      	add	r2, r3
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	3304      	adds	r3, #4
 8005190:	4619      	mov	r1, r3
 8005192:	4610      	mov	r0, r2
 8005194:	f7fe f897 	bl	80032c6 <vListInsertEnd>
 8005198:	e004      	b.n	80051a4 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800519a:	4b0b      	ldr	r3, [pc, #44]	; (80051c8 <xTaskPriorityInherit+0x100>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80051a4:	2301      	movs	r3, #1
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	e008      	b.n	80051bc <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ae:	4b06      	ldr	r3, [pc, #24]	; (80051c8 <xTaskPriorityInherit+0x100>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d201      	bcs.n	80051bc <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80051b8:	2301      	movs	r3, #1
 80051ba:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80051bc:	68fb      	ldr	r3, [r7, #12]
	}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	200027b8 	.word	0x200027b8
 80051cc:	200027bc 	.word	0x200027bc
 80051d0:	200028c0 	.word	0x200028c0

080051d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80051e0:	2300      	movs	r3, #0
 80051e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d06c      	beq.n	80052c4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80051ea:	4b39      	ldr	r3, [pc, #228]	; (80052d0 <xTaskPriorityDisinherit+0xfc>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d009      	beq.n	8005208 <xTaskPriorityDisinherit+0x34>
 80051f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	60fb      	str	r3, [r7, #12]
 8005206:	e7fe      	b.n	8005206 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800520c:	2b00      	cmp	r3, #0
 800520e:	d109      	bne.n	8005224 <xTaskPriorityDisinherit+0x50>
 8005210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	60bb      	str	r3, [r7, #8]
 8005222:	e7fe      	b.n	8005222 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005228:	1e5a      	subs	r2, r3, #1
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005236:	429a      	cmp	r2, r3
 8005238:	d044      	beq.n	80052c4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800523e:	2b00      	cmp	r3, #0
 8005240:	d140      	bne.n	80052c4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	3304      	adds	r3, #4
 8005246:	4618      	mov	r0, r3
 8005248:	f7fe f89a 	bl	8003380 <uxListRemove>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d115      	bne.n	800527e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005256:	491f      	ldr	r1, [pc, #124]	; (80052d4 <xTaskPriorityDisinherit+0x100>)
 8005258:	4613      	mov	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4413      	add	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	440b      	add	r3, r1
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10a      	bne.n	800527e <xTaskPriorityDisinherit+0xaa>
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526c:	2201      	movs	r2, #1
 800526e:	fa02 f303 	lsl.w	r3, r2, r3
 8005272:	43da      	mvns	r2, r3
 8005274:	4b18      	ldr	r3, [pc, #96]	; (80052d8 <xTaskPriorityDisinherit+0x104>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4013      	ands	r3, r2
 800527a:	4a17      	ldr	r2, [pc, #92]	; (80052d8 <xTaskPriorityDisinherit+0x104>)
 800527c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528a:	f1c3 0207 	rsb	r2, r3, #7
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005296:	2201      	movs	r2, #1
 8005298:	409a      	lsls	r2, r3
 800529a:	4b0f      	ldr	r3, [pc, #60]	; (80052d8 <xTaskPriorityDisinherit+0x104>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4313      	orrs	r3, r2
 80052a0:	4a0d      	ldr	r2, [pc, #52]	; (80052d8 <xTaskPriorityDisinherit+0x104>)
 80052a2:	6013      	str	r3, [r2, #0]
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a8:	4613      	mov	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4a08      	ldr	r2, [pc, #32]	; (80052d4 <xTaskPriorityDisinherit+0x100>)
 80052b2:	441a      	add	r2, r3
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	3304      	adds	r3, #4
 80052b8:	4619      	mov	r1, r3
 80052ba:	4610      	mov	r0, r2
 80052bc:	f7fe f803 	bl	80032c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80052c0:	2301      	movs	r3, #1
 80052c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052c4:	697b      	ldr	r3, [r7, #20]
	}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	200027b8 	.word	0x200027b8
 80052d4:	200027bc 	.word	0x200027bc
 80052d8:	200028c0 	.word	0x200028c0

080052dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b088      	sub	sp, #32
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80052ea:	2301      	movs	r3, #1
 80052ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 8086 	beq.w	8005402 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d109      	bne.n	8005312 <vTaskPriorityDisinheritAfterTimeout+0x36>
 80052fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	e7fe      	b.n	8005310 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	429a      	cmp	r2, r3
 800531a:	d202      	bcs.n	8005322 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	61fb      	str	r3, [r7, #28]
 8005320:	e002      	b.n	8005328 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005326:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	429a      	cmp	r2, r3
 8005330:	d067      	beq.n	8005402 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	429a      	cmp	r2, r3
 800533a:	d162      	bne.n	8005402 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800533c:	4b33      	ldr	r3, [pc, #204]	; (800540c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	429a      	cmp	r2, r3
 8005344:	d109      	bne.n	800535a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8005346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534a:	f383 8811 	msr	BASEPRI, r3
 800534e:	f3bf 8f6f 	isb	sy
 8005352:	f3bf 8f4f 	dsb	sy
 8005356:	60bb      	str	r3, [r7, #8]
 8005358:	e7fe      	b.n	8005358 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	69fa      	ldr	r2, [r7, #28]
 8005364:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	2b00      	cmp	r3, #0
 800536c:	db04      	blt.n	8005378 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	f1c3 0207 	rsb	r2, r3, #7
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	6959      	ldr	r1, [r3, #20]
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	4613      	mov	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4a22      	ldr	r2, [pc, #136]	; (8005410 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005388:	4413      	add	r3, r2
 800538a:	4299      	cmp	r1, r3
 800538c:	d101      	bne.n	8005392 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800538e:	2301      	movs	r3, #1
 8005390:	e000      	b.n	8005394 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8005392:	2300      	movs	r3, #0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d034      	beq.n	8005402 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	3304      	adds	r3, #4
 800539c:	4618      	mov	r0, r3
 800539e:	f7fd ffef 	bl	8003380 <uxListRemove>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d115      	bne.n	80053d4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ac:	4918      	ldr	r1, [pc, #96]	; (8005410 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80053ae:	4613      	mov	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	440b      	add	r3, r1
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10a      	bne.n	80053d4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c2:	2201      	movs	r2, #1
 80053c4:	fa02 f303 	lsl.w	r3, r2, r3
 80053c8:	43da      	mvns	r2, r3
 80053ca:	4b12      	ldr	r3, [pc, #72]	; (8005414 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4013      	ands	r3, r2
 80053d0:	4a10      	ldr	r2, [pc, #64]	; (8005414 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80053d2:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d8:	2201      	movs	r2, #1
 80053da:	409a      	lsls	r2, r3
 80053dc:	4b0d      	ldr	r3, [pc, #52]	; (8005414 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	4a0c      	ldr	r2, [pc, #48]	; (8005414 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ea:	4613      	mov	r3, r2
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	4413      	add	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4a07      	ldr	r2, [pc, #28]	; (8005410 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80053f4:	441a      	add	r2, r3
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	3304      	adds	r3, #4
 80053fa:	4619      	mov	r1, r3
 80053fc:	4610      	mov	r0, r2
 80053fe:	f7fd ff62 	bl	80032c6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005402:	bf00      	nop
 8005404:	3720      	adds	r7, #32
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	200027b8 	.word	0x200027b8
 8005410:	200027bc 	.word	0x200027bc
 8005414:	200028c0 	.word	0x200028c0

08005418 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005418:	b480      	push	{r7}
 800541a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800541c:	4b07      	ldr	r3, [pc, #28]	; (800543c <pvTaskIncrementMutexHeldCount+0x24>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d004      	beq.n	800542e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005424:	4b05      	ldr	r3, [pc, #20]	; (800543c <pvTaskIncrementMutexHeldCount+0x24>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800542a:	3201      	adds	r2, #1
 800542c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800542e:	4b03      	ldr	r3, [pc, #12]	; (800543c <pvTaskIncrementMutexHeldCount+0x24>)
 8005430:	681b      	ldr	r3, [r3, #0]
	}
 8005432:	4618      	mov	r0, r3
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	200027b8 	.word	0x200027b8

08005440 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800544a:	4b29      	ldr	r3, [pc, #164]	; (80054f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005450:	4b28      	ldr	r3, [pc, #160]	; (80054f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3304      	adds	r3, #4
 8005456:	4618      	mov	r0, r3
 8005458:	f7fd ff92 	bl	8003380 <uxListRemove>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10b      	bne.n	800547a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005462:	4b24      	ldr	r3, [pc, #144]	; (80054f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005468:	2201      	movs	r2, #1
 800546a:	fa02 f303 	lsl.w	r3, r2, r3
 800546e:	43da      	mvns	r2, r3
 8005470:	4b21      	ldr	r3, [pc, #132]	; (80054f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4013      	ands	r3, r2
 8005476:	4a20      	ldr	r2, [pc, #128]	; (80054f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005478:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005480:	d10a      	bne.n	8005498 <prvAddCurrentTaskToDelayedList+0x58>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d007      	beq.n	8005498 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005488:	4b1a      	ldr	r3, [pc, #104]	; (80054f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	3304      	adds	r3, #4
 800548e:	4619      	mov	r1, r3
 8005490:	481a      	ldr	r0, [pc, #104]	; (80054fc <prvAddCurrentTaskToDelayedList+0xbc>)
 8005492:	f7fd ff18 	bl	80032c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005496:	e026      	b.n	80054e6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4413      	add	r3, r2
 800549e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80054a0:	4b14      	ldr	r3, [pc, #80]	; (80054f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d209      	bcs.n	80054c4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054b0:	4b13      	ldr	r3, [pc, #76]	; (8005500 <prvAddCurrentTaskToDelayedList+0xc0>)
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	4b0f      	ldr	r3, [pc, #60]	; (80054f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	3304      	adds	r3, #4
 80054ba:	4619      	mov	r1, r3
 80054bc:	4610      	mov	r0, r2
 80054be:	f7fd ff26 	bl	800330e <vListInsert>
}
 80054c2:	e010      	b.n	80054e6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054c4:	4b0f      	ldr	r3, [pc, #60]	; (8005504 <prvAddCurrentTaskToDelayedList+0xc4>)
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	4b0a      	ldr	r3, [pc, #40]	; (80054f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3304      	adds	r3, #4
 80054ce:	4619      	mov	r1, r3
 80054d0:	4610      	mov	r0, r2
 80054d2:	f7fd ff1c 	bl	800330e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80054d6:	4b0c      	ldr	r3, [pc, #48]	; (8005508 <prvAddCurrentTaskToDelayedList+0xc8>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d202      	bcs.n	80054e6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80054e0:	4a09      	ldr	r2, [pc, #36]	; (8005508 <prvAddCurrentTaskToDelayedList+0xc8>)
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	6013      	str	r3, [r2, #0]
}
 80054e6:	bf00      	nop
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	200028bc 	.word	0x200028bc
 80054f4:	200027b8 	.word	0x200027b8
 80054f8:	200028c0 	.word	0x200028c0
 80054fc:	200028a4 	.word	0x200028a4
 8005500:	20002874 	.word	0x20002874
 8005504:	20002870 	.word	0x20002870
 8005508:	200028d8 	.word	0x200028d8

0800550c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	b29a      	uxth	r2, r3
 800551c:	230a      	movs	r3, #10
 800551e:	68b9      	ldr	r1, [r7, #8]
 8005520:	4803      	ldr	r0, [pc, #12]	; (8005530 <_write+0x24>)
 8005522:	f7fd f88e 	bl	8002642 <HAL_UART_Transmit>
  return len;
 8005526:	687b      	ldr	r3, [r7, #4]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	20002904 	.word	0x20002904

08005534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005534:	b5b0      	push	{r4, r5, r7, lr}
 8005536:	b090      	sub	sp, #64	; 0x40
 8005538:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800553a:	f7fb f821 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800553e:	f000 f857 	bl	80055f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005542:	f000 f8eb 	bl	800571c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8005546:	f000 f8b9 	bl	80056bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Application start \n\r");
 800554a:	4821      	ldr	r0, [pc, #132]	; (80055d0 <main+0x9c>)
 800554c:	f000 fb50 	bl	8005bf0 <iprintf>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myCountingSem01 */
  osSemaphoreDef(myCountingSem01);
 8005550:	2300      	movs	r3, #0
 8005552:	63fb      	str	r3, [r7, #60]	; 0x3c
  myCountingSem01Handle = osSemaphoreCreate(osSemaphore(myCountingSem01), 2);
 8005554:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005558:	2102      	movs	r1, #2
 800555a:	4618      	mov	r0, r3
 800555c:	f7fd fddd 	bl	800311a <osSemaphoreCreate>
 8005560:	4602      	mov	r2, r0
 8005562:	4b1c      	ldr	r3, [pc, #112]	; (80055d4 <main+0xa0>)
 8005564:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, StartTask1, osPriorityNormal, 0, 512);
 8005566:	4b1c      	ldr	r3, [pc, #112]	; (80055d8 <main+0xa4>)
 8005568:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800556c:	461d      	mov	r5, r3
 800556e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005572:	682b      	ldr	r3, [r5, #0]
 8005574:	6023      	str	r3, [r4, #0]
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 8005576:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800557a:	2100      	movs	r1, #0
 800557c:	4618      	mov	r0, r3
 800557e:	f7fd fd91 	bl	80030a4 <osThreadCreate>
 8005582:	4602      	mov	r2, r0
 8005584:	4b15      	ldr	r3, [pc, #84]	; (80055dc <main+0xa8>)
 8005586:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, StartTask2, osPriorityNormal, 0, 512);
 8005588:	4b15      	ldr	r3, [pc, #84]	; (80055e0 <main+0xac>)
 800558a:	f107 0414 	add.w	r4, r7, #20
 800558e:	461d      	mov	r5, r3
 8005590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005594:	682b      	ldr	r3, [r5, #0]
 8005596:	6023      	str	r3, [r4, #0]
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8005598:	f107 0314 	add.w	r3, r7, #20
 800559c:	2100      	movs	r1, #0
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fd fd80 	bl	80030a4 <osThreadCreate>
 80055a4:	4602      	mov	r2, r0
 80055a6:	4b0f      	ldr	r3, [pc, #60]	; (80055e4 <main+0xb0>)
 80055a8:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task3 */
  osThreadDef(Task3, StartTask3, osPriorityNormal, 0, 512);
 80055aa:	4b0f      	ldr	r3, [pc, #60]	; (80055e8 <main+0xb4>)
 80055ac:	463c      	mov	r4, r7
 80055ae:	461d      	mov	r5, r3
 80055b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055b4:	682b      	ldr	r3, [r5, #0]
 80055b6:	6023      	str	r3, [r4, #0]
  Task3Handle = osThreadCreate(osThread(Task3), NULL);
 80055b8:	463b      	mov	r3, r7
 80055ba:	2100      	movs	r1, #0
 80055bc:	4618      	mov	r0, r3
 80055be:	f7fd fd71 	bl	80030a4 <osThreadCreate>
 80055c2:	4602      	mov	r2, r0
 80055c4:	4b09      	ldr	r3, [pc, #36]	; (80055ec <main+0xb8>)
 80055c6:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 80055c8:	f7fd fd65 	bl	8003096 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80055cc:	e7fe      	b.n	80055cc <main+0x98>
 80055ce:	bf00      	nop
 80055d0:	08006a6c 	.word	0x08006a6c
 80055d4:	200028f8 	.word	0x200028f8
 80055d8:	08006a8c 	.word	0x08006a8c
 80055dc:	200028f4 	.word	0x200028f4
 80055e0:	08006aa8 	.word	0x08006aa8
 80055e4:	20002900 	.word	0x20002900
 80055e8:	08006ac4 	.word	0x08006ac4
 80055ec:	200028fc 	.word	0x200028fc

080055f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b0b8      	sub	sp, #224	; 0xe0
 80055f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80055f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80055fa:	2244      	movs	r2, #68	; 0x44
 80055fc:	2100      	movs	r1, #0
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 faed 	bl	8005bde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005604:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005608:	2200      	movs	r2, #0
 800560a:	601a      	str	r2, [r3, #0]
 800560c:	605a      	str	r2, [r3, #4]
 800560e:	609a      	str	r2, [r3, #8]
 8005610:	60da      	str	r2, [r3, #12]
 8005612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005614:	463b      	mov	r3, r7
 8005616:	2288      	movs	r2, #136	; 0x88
 8005618:	2100      	movs	r1, #0
 800561a:	4618      	mov	r0, r3
 800561c:	f000 fadf 	bl	8005bde <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8005620:	2310      	movs	r3, #16
 8005622:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005626:	2301      	movs	r3, #1
 8005628:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800562c:	2300      	movs	r3, #0
 800562e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8005632:	2360      	movs	r3, #96	; 0x60
 8005634:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005638:	2300      	movs	r3, #0
 800563a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800563e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005642:	4618      	mov	r0, r3
 8005644:	f7fb faf2 	bl	8000c2c <HAL_RCC_OscConfig>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800564e:	f000 f941 	bl	80058d4 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005652:	230f      	movs	r3, #15
 8005654:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8005658:	2300      	movs	r3, #0
 800565a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800565e:	2300      	movs	r3, #0
 8005660:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005664:	2300      	movs	r3, #0
 8005666:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800566a:	2300      	movs	r3, #0
 800566c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005670:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005674:	2100      	movs	r1, #0
 8005676:	4618      	mov	r0, r3
 8005678:	f7fb fe3c 	bl	80012f4 <HAL_RCC_ClockConfig>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8005682:	f000 f927 	bl	80058d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005686:	2302      	movs	r3, #2
 8005688:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800568a:	2300      	movs	r3, #0
 800568c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800568e:	463b      	mov	r3, r7
 8005690:	4618      	mov	r0, r3
 8005692:	f7fc f873 	bl	800177c <HAL_RCCEx_PeriphCLKConfig>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d001      	beq.n	80056a0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800569c:	f000 f91a 	bl	80058d4 <Error_Handler>
  }
  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80056a0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80056a4:	f7fb fa6c 	bl	8000b80 <HAL_PWREx_ControlVoltageScaling>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80056ae:	f000 f911 	bl	80058d4 <Error_Handler>
  }
}
 80056b2:	bf00      	nop
 80056b4:	37e0      	adds	r7, #224	; 0xe0
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
	...

080056bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80056c0:	4b14      	ldr	r3, [pc, #80]	; (8005714 <MX_USART2_UART_Init+0x58>)
 80056c2:	4a15      	ldr	r2, [pc, #84]	; (8005718 <MX_USART2_UART_Init+0x5c>)
 80056c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80056c6:	4b13      	ldr	r3, [pc, #76]	; (8005714 <MX_USART2_UART_Init+0x58>)
 80056c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80056cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80056ce:	4b11      	ldr	r3, [pc, #68]	; (8005714 <MX_USART2_UART_Init+0x58>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80056d4:	4b0f      	ldr	r3, [pc, #60]	; (8005714 <MX_USART2_UART_Init+0x58>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80056da:	4b0e      	ldr	r3, [pc, #56]	; (8005714 <MX_USART2_UART_Init+0x58>)
 80056dc:	2200      	movs	r2, #0
 80056de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80056e0:	4b0c      	ldr	r3, [pc, #48]	; (8005714 <MX_USART2_UART_Init+0x58>)
 80056e2:	220c      	movs	r2, #12
 80056e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80056e6:	4b0b      	ldr	r3, [pc, #44]	; (8005714 <MX_USART2_UART_Init+0x58>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80056ec:	4b09      	ldr	r3, [pc, #36]	; (8005714 <MX_USART2_UART_Init+0x58>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80056f2:	4b08      	ldr	r3, [pc, #32]	; (8005714 <MX_USART2_UART_Init+0x58>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80056f8:	4b06      	ldr	r3, [pc, #24]	; (8005714 <MX_USART2_UART_Init+0x58>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80056fe:	4805      	ldr	r0, [pc, #20]	; (8005714 <MX_USART2_UART_Init+0x58>)
 8005700:	f7fc ff4e 	bl	80025a0 <HAL_UART_Init>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d001      	beq.n	800570e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800570a:	f000 f8e3 	bl	80058d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800570e:	bf00      	nop
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	20002904 	.word	0x20002904
 8005718:	40004400 	.word	0x40004400

0800571c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b08a      	sub	sp, #40	; 0x28
 8005720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005722:	f107 0314 	add.w	r3, r7, #20
 8005726:	2200      	movs	r2, #0
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	605a      	str	r2, [r3, #4]
 800572c:	609a      	str	r2, [r3, #8]
 800572e:	60da      	str	r2, [r3, #12]
 8005730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005732:	4a38      	ldr	r2, [pc, #224]	; (8005814 <MX_GPIO_Init+0xf8>)
 8005734:	4b37      	ldr	r3, [pc, #220]	; (8005814 <MX_GPIO_Init+0xf8>)
 8005736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005738:	f043 0301 	orr.w	r3, r3, #1
 800573c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800573e:	4b35      	ldr	r3, [pc, #212]	; (8005814 <MX_GPIO_Init+0xf8>)
 8005740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	613b      	str	r3, [r7, #16]
 8005748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800574a:	4a32      	ldr	r2, [pc, #200]	; (8005814 <MX_GPIO_Init+0xf8>)
 800574c:	4b31      	ldr	r3, [pc, #196]	; (8005814 <MX_GPIO_Init+0xf8>)
 800574e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005750:	f043 0302 	orr.w	r3, r3, #2
 8005754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005756:	4b2f      	ldr	r3, [pc, #188]	; (8005814 <MX_GPIO_Init+0xf8>)
 8005758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	60fb      	str	r3, [r7, #12]
 8005760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005762:	4a2c      	ldr	r2, [pc, #176]	; (8005814 <MX_GPIO_Init+0xf8>)
 8005764:	4b2b      	ldr	r3, [pc, #172]	; (8005814 <MX_GPIO_Init+0xf8>)
 8005766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005768:	f043 0310 	orr.w	r3, r3, #16
 800576c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800576e:	4b29      	ldr	r3, [pc, #164]	; (8005814 <MX_GPIO_Init+0xf8>)
 8005770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005772:	f003 0310 	and.w	r3, r3, #16
 8005776:	60bb      	str	r3, [r7, #8]
 8005778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800577a:	4a26      	ldr	r2, [pc, #152]	; (8005814 <MX_GPIO_Init+0xf8>)
 800577c:	4b25      	ldr	r3, [pc, #148]	; (8005814 <MX_GPIO_Init+0xf8>)
 800577e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005780:	f043 0308 	orr.w	r3, r3, #8
 8005784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005786:	4b23      	ldr	r3, [pc, #140]	; (8005814 <MX_GPIO_Init+0xf8>)
 8005788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800578a:	f003 0308 	and.w	r3, r3, #8
 800578e:	607b      	str	r3, [r7, #4]
 8005790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8005792:	2200      	movs	r2, #0
 8005794:	2104      	movs	r1, #4
 8005796:	4820      	ldr	r0, [pc, #128]	; (8005818 <MX_GPIO_Init+0xfc>)
 8005798:	f7fb f9a8 	bl	8000aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800579c:	2200      	movs	r2, #0
 800579e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057a2:	481e      	ldr	r0, [pc, #120]	; (800581c <MX_GPIO_Init+0x100>)
 80057a4:	f7fb f9a2 	bl	8000aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : JOY_CENTER_Pin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin;
 80057a8:	2301      	movs	r3, #1
 80057aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80057ac:	4b1c      	ldr	r3, [pc, #112]	; (8005820 <MX_GPIO_Init+0x104>)
 80057ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057b0:	2300      	movs	r3, #0
 80057b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(JOY_CENTER_GPIO_Port, &GPIO_InitStruct);
 80057b4:	f107 0314 	add.w	r3, r7, #20
 80057b8:	4619      	mov	r1, r3
 80057ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80057be:	f7fa ffed 	bl	800079c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80057c2:	2304      	movs	r3, #4
 80057c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80057c6:	2301      	movs	r3, #1
 80057c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ca:	2300      	movs	r3, #0
 80057cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057ce:	2300      	movs	r3, #0
 80057d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80057d2:	f107 0314 	add.w	r3, r7, #20
 80057d6:	4619      	mov	r1, r3
 80057d8:	480f      	ldr	r0, [pc, #60]	; (8005818 <MX_GPIO_Init+0xfc>)
 80057da:	f7fa ffdf 	bl	800079c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80057de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80057e4:	2301      	movs	r3, #1
 80057e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057e8:	2300      	movs	r3, #0
 80057ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057ec:	2300      	movs	r3, #0
 80057ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80057f0:	f107 0314 	add.w	r3, r7, #20
 80057f4:	4619      	mov	r1, r3
 80057f6:	4809      	ldr	r0, [pc, #36]	; (800581c <MX_GPIO_Init+0x100>)
 80057f8:	f7fa ffd0 	bl	800079c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80057fc:	2200      	movs	r2, #0
 80057fe:	2105      	movs	r1, #5
 8005800:	2006      	movs	r0, #6
 8005802:	f7fa ffa1 	bl	8000748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005806:	2006      	movs	r0, #6
 8005808:	f7fa ffba 	bl	8000780 <HAL_NVIC_EnableIRQ>

}
 800580c:	bf00      	nop
 800580e:	3728      	adds	r7, #40	; 0x28
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40021000 	.word	0x40021000
 8005818:	48000400 	.word	0x48000400
 800581c:	48001000 	.word	0x48001000
 8005820:	10110000 	.word	0x10110000

08005824 <StartTask1>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void const * argument)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1000);
 800582c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005830:	f7fd fc5f 	bl	80030f2 <osDelay>
	  printf("Task1 Release counting semaphore\n\r");
 8005834:	4804      	ldr	r0, [pc, #16]	; (8005848 <StartTask1+0x24>)
 8005836:	f000 f9db 	bl	8005bf0 <iprintf>
	  osSemaphoreRelease(myCountingSem01Handle);
 800583a:	4b04      	ldr	r3, [pc, #16]	; (800584c <StartTask1+0x28>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4618      	mov	r0, r3
 8005840:	f7fd fcde 	bl	8003200 <osSemaphoreRelease>
	  osDelay(1000);
 8005844:	e7f2      	b.n	800582c <StartTask1+0x8>
 8005846:	bf00      	nop
 8005848:	08006ad8 	.word	0x08006ad8
 800584c:	200028f8 	.word	0x200028f8

08005850 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void const * argument)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1000);
 8005858:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800585c:	f7fd fc49 	bl	80030f2 <osDelay>
	  printf("Task2 Release counting semaphore\n\r");
 8005860:	4804      	ldr	r0, [pc, #16]	; (8005874 <StartTask2+0x24>)
 8005862:	f000 f9c5 	bl	8005bf0 <iprintf>
	  osSemaphoreRelease(myCountingSem01Handle);
 8005866:	4b04      	ldr	r3, [pc, #16]	; (8005878 <StartTask2+0x28>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4618      	mov	r0, r3
 800586c:	f7fd fcc8 	bl	8003200 <osSemaphoreRelease>
	  osDelay(1000);
 8005870:	e7f2      	b.n	8005858 <StartTask2+0x8>
 8005872:	bf00      	nop
 8005874:	08006afc 	.word	0x08006afc
 8005878:	200028f8 	.word	0x200028f8

0800587c <StartTask3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask3 */
void StartTask3(void const * argument)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask3 */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(myCountingSem01Handle, 4000);
 8005884:	4b08      	ldr	r3, [pc, #32]	; (80058a8 <StartTask3+0x2c>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800588c:	4618      	mov	r0, r3
 800588e:	f7fd fc69 	bl	8003164 <osSemaphoreWait>
	  osSemaphoreWait(myCountingSem01Handle, 4000);
 8005892:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <StartTask3+0x2c>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800589a:	4618      	mov	r0, r3
 800589c:	f7fd fc62 	bl	8003164 <osSemaphoreWait>
	  printf("Task3 synchronized\n\r");
 80058a0:	4802      	ldr	r0, [pc, #8]	; (80058ac <StartTask3+0x30>)
 80058a2:	f000 f9a5 	bl	8005bf0 <iprintf>
	  osSemaphoreWait(myCountingSem01Handle, 4000);
 80058a6:	e7ed      	b.n	8005884 <StartTask3+0x8>
 80058a8:	200028f8 	.word	0x200028f8
 80058ac:	08006b20 	.word	0x08006b20

080058b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a04      	ldr	r2, [pc, #16]	; (80058d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d101      	bne.n	80058c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80058c2:	f7fa fe75 	bl	80005b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80058c6:	bf00      	nop
 80058c8:	3708      	adds	r7, #8
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	40001000 	.word	0x40001000

080058d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80058d4:	b480      	push	{r7}
 80058d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80058d8:	bf00      	nop
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
	...

080058e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058ea:	4a11      	ldr	r2, [pc, #68]	; (8005930 <HAL_MspInit+0x4c>)
 80058ec:	4b10      	ldr	r3, [pc, #64]	; (8005930 <HAL_MspInit+0x4c>)
 80058ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058f0:	f043 0301 	orr.w	r3, r3, #1
 80058f4:	6613      	str	r3, [r2, #96]	; 0x60
 80058f6:	4b0e      	ldr	r3, [pc, #56]	; (8005930 <HAL_MspInit+0x4c>)
 80058f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	607b      	str	r3, [r7, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005902:	4a0b      	ldr	r2, [pc, #44]	; (8005930 <HAL_MspInit+0x4c>)
 8005904:	4b0a      	ldr	r3, [pc, #40]	; (8005930 <HAL_MspInit+0x4c>)
 8005906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800590c:	6593      	str	r3, [r2, #88]	; 0x58
 800590e:	4b08      	ldr	r3, [pc, #32]	; (8005930 <HAL_MspInit+0x4c>)
 8005910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005916:	603b      	str	r3, [r7, #0]
 8005918:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800591a:	2200      	movs	r2, #0
 800591c:	210f      	movs	r1, #15
 800591e:	f06f 0001 	mvn.w	r0, #1
 8005922:	f7fa ff11 	bl	8000748 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005926:	bf00      	nop
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	40021000 	.word	0x40021000

08005934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b08a      	sub	sp, #40	; 0x28
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800593c:	f107 0314 	add.w	r3, r7, #20
 8005940:	2200      	movs	r2, #0
 8005942:	601a      	str	r2, [r3, #0]
 8005944:	605a      	str	r2, [r3, #4]
 8005946:	609a      	str	r2, [r3, #8]
 8005948:	60da      	str	r2, [r3, #12]
 800594a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a17      	ldr	r2, [pc, #92]	; (80059b0 <HAL_UART_MspInit+0x7c>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d127      	bne.n	80059a6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005956:	4a17      	ldr	r2, [pc, #92]	; (80059b4 <HAL_UART_MspInit+0x80>)
 8005958:	4b16      	ldr	r3, [pc, #88]	; (80059b4 <HAL_UART_MspInit+0x80>)
 800595a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800595c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005960:	6593      	str	r3, [r2, #88]	; 0x58
 8005962:	4b14      	ldr	r3, [pc, #80]	; (80059b4 <HAL_UART_MspInit+0x80>)
 8005964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800596a:	613b      	str	r3, [r7, #16]
 800596c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800596e:	4a11      	ldr	r2, [pc, #68]	; (80059b4 <HAL_UART_MspInit+0x80>)
 8005970:	4b10      	ldr	r3, [pc, #64]	; (80059b4 <HAL_UART_MspInit+0x80>)
 8005972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005974:	f043 0308 	orr.w	r3, r3, #8
 8005978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800597a:	4b0e      	ldr	r3, [pc, #56]	; (80059b4 <HAL_UART_MspInit+0x80>)
 800597c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800597e:	f003 0308 	and.w	r3, r3, #8
 8005982:	60fb      	str	r3, [r7, #12]
 8005984:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005986:	2360      	movs	r3, #96	; 0x60
 8005988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800598a:	2302      	movs	r3, #2
 800598c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800598e:	2300      	movs	r3, #0
 8005990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005992:	2303      	movs	r3, #3
 8005994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005996:	2307      	movs	r3, #7
 8005998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800599a:	f107 0314 	add.w	r3, r7, #20
 800599e:	4619      	mov	r1, r3
 80059a0:	4805      	ldr	r0, [pc, #20]	; (80059b8 <HAL_UART_MspInit+0x84>)
 80059a2:	f7fa fefb 	bl	800079c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80059a6:	bf00      	nop
 80059a8:	3728      	adds	r7, #40	; 0x28
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	40004400 	.word	0x40004400
 80059b4:	40021000 	.word	0x40021000
 80059b8:	48000c00 	.word	0x48000c00

080059bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b08c      	sub	sp, #48	; 0x30
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80059c4:	2300      	movs	r3, #0
 80059c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80059c8:	2300      	movs	r3, #0
 80059ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80059cc:	2200      	movs	r2, #0
 80059ce:	6879      	ldr	r1, [r7, #4]
 80059d0:	2036      	movs	r0, #54	; 0x36
 80059d2:	f7fa feb9 	bl	8000748 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80059d6:	2036      	movs	r0, #54	; 0x36
 80059d8:	f7fa fed2 	bl	8000780 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80059dc:	4a1e      	ldr	r2, [pc, #120]	; (8005a58 <HAL_InitTick+0x9c>)
 80059de:	4b1e      	ldr	r3, [pc, #120]	; (8005a58 <HAL_InitTick+0x9c>)
 80059e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059e2:	f043 0310 	orr.w	r3, r3, #16
 80059e6:	6593      	str	r3, [r2, #88]	; 0x58
 80059e8:	4b1b      	ldr	r3, [pc, #108]	; (8005a58 <HAL_InitTick+0x9c>)
 80059ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ec:	f003 0310 	and.w	r3, r3, #16
 80059f0:	60fb      	str	r3, [r7, #12]
 80059f2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80059f4:	f107 0210 	add.w	r2, r7, #16
 80059f8:	f107 0314 	add.w	r3, r7, #20
 80059fc:	4611      	mov	r1, r2
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fb fe2a 	bl	8001658 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005a04:	f7fb fdfc 	bl	8001600 <HAL_RCC_GetPCLK1Freq>
 8005a08:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0c:	4a13      	ldr	r2, [pc, #76]	; (8005a5c <HAL_InitTick+0xa0>)
 8005a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a12:	0c9b      	lsrs	r3, r3, #18
 8005a14:	3b01      	subs	r3, #1
 8005a16:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005a18:	4b11      	ldr	r3, [pc, #68]	; (8005a60 <HAL_InitTick+0xa4>)
 8005a1a:	4a12      	ldr	r2, [pc, #72]	; (8005a64 <HAL_InitTick+0xa8>)
 8005a1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8005a1e:	4b10      	ldr	r3, [pc, #64]	; (8005a60 <HAL_InitTick+0xa4>)
 8005a20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005a24:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005a26:	4a0e      	ldr	r2, [pc, #56]	; (8005a60 <HAL_InitTick+0xa4>)
 8005a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005a2c:	4b0c      	ldr	r3, [pc, #48]	; (8005a60 <HAL_InitTick+0xa4>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a32:	4b0b      	ldr	r3, [pc, #44]	; (8005a60 <HAL_InitTick+0xa4>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8005a38:	4809      	ldr	r0, [pc, #36]	; (8005a60 <HAL_InitTick+0xa4>)
 8005a3a:	f7fc fb4f 	bl	80020dc <HAL_TIM_Base_Init>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d104      	bne.n	8005a4e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8005a44:	4806      	ldr	r0, [pc, #24]	; (8005a60 <HAL_InitTick+0xa4>)
 8005a46:	f7fc fb7f 	bl	8002148 <HAL_TIM_Base_Start_IT>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	e000      	b.n	8005a50 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3730      	adds	r7, #48	; 0x30
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	40021000 	.word	0x40021000
 8005a5c:	431bde83 	.word	0x431bde83
 8005a60:	2000297c 	.word	0x2000297c
 8005a64:	40001000 	.word	0x40001000

08005a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005a6c:	bf00      	nop
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a76:	b480      	push	{r7}
 8005a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a7a:	e7fe      	b.n	8005a7a <HardFault_Handler+0x4>

08005a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005a80:	e7fe      	b.n	8005a80 <MemManage_Handler+0x4>

08005a82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005a82:	b480      	push	{r7}
 8005a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005a86:	e7fe      	b.n	8005a86 <BusFault_Handler+0x4>

08005a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005a8c:	e7fe      	b.n	8005a8c <UsageFault_Handler+0x4>

08005a8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005a92:	bf00      	nop
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005aa0:	2001      	movs	r0, #1
 8005aa2:	f7fb f83b 	bl	8000b1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005aa6:	bf00      	nop
 8005aa8:	bd80      	pop	{r7, pc}
	...

08005aac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005ab0:	4802      	ldr	r0, [pc, #8]	; (8005abc <TIM6_DAC_IRQHandler+0x10>)
 8005ab2:	f7fc fb75 	bl	80021a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005ab6:	bf00      	nop
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	2000297c 	.word	0x2000297c

08005ac0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005ac4:	4a17      	ldr	r2, [pc, #92]	; (8005b24 <SystemInit+0x64>)
 8005ac6:	4b17      	ldr	r3, [pc, #92]	; (8005b24 <SystemInit+0x64>)
 8005ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ad0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005ad4:	4a14      	ldr	r2, [pc, #80]	; (8005b28 <SystemInit+0x68>)
 8005ad6:	4b14      	ldr	r3, [pc, #80]	; (8005b28 <SystemInit+0x68>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f043 0301 	orr.w	r3, r3, #1
 8005ade:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8005ae0:	4b11      	ldr	r3, [pc, #68]	; (8005b28 <SystemInit+0x68>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8005ae6:	4a10      	ldr	r2, [pc, #64]	; (8005b28 <SystemInit+0x68>)
 8005ae8:	4b0f      	ldr	r3, [pc, #60]	; (8005b28 <SystemInit+0x68>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005af0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005af4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005af6:	4b0c      	ldr	r3, [pc, #48]	; (8005b28 <SystemInit+0x68>)
 8005af8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005afc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005afe:	4a0a      	ldr	r2, [pc, #40]	; (8005b28 <SystemInit+0x68>)
 8005b00:	4b09      	ldr	r3, [pc, #36]	; (8005b28 <SystemInit+0x68>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b08:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005b0a:	4b07      	ldr	r3, [pc, #28]	; (8005b28 <SystemInit+0x68>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005b10:	4b04      	ldr	r3, [pc, #16]	; (8005b24 <SystemInit+0x64>)
 8005b12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005b16:	609a      	str	r2, [r3, #8]
#endif
}
 8005b18:	bf00      	nop
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	e000ed00 	.word	0xe000ed00
 8005b28:	40021000 	.word	0x40021000

08005b2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005b64 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005b30:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005b32:	e003      	b.n	8005b3c <LoopCopyDataInit>

08005b34 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005b34:	4b0c      	ldr	r3, [pc, #48]	; (8005b68 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005b36:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005b38:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005b3a:	3104      	adds	r1, #4

08005b3c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005b3c:	480b      	ldr	r0, [pc, #44]	; (8005b6c <LoopForever+0xa>)
	ldr	r3, =_edata
 8005b3e:	4b0c      	ldr	r3, [pc, #48]	; (8005b70 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005b40:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005b42:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005b44:	d3f6      	bcc.n	8005b34 <CopyDataInit>
	ldr	r2, =_sbss
 8005b46:	4a0b      	ldr	r2, [pc, #44]	; (8005b74 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005b48:	e002      	b.n	8005b50 <LoopFillZerobss>

08005b4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005b4a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005b4c:	f842 3b04 	str.w	r3, [r2], #4

08005b50 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005b50:	4b09      	ldr	r3, [pc, #36]	; (8005b78 <LoopForever+0x16>)
	cmp	r2, r3
 8005b52:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005b54:	d3f9      	bcc.n	8005b4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005b56:	f7ff ffb3 	bl	8005ac0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005b5a:	f000 f811 	bl	8005b80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005b5e:	f7ff fce9 	bl	8005534 <main>

08005b62 <LoopForever>:

LoopForever:
    b LoopForever
 8005b62:	e7fe      	b.n	8005b62 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005b64:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8005b68:	08006c28 	.word	0x08006c28
	ldr	r0, =_sdata
 8005b6c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005b70:	2000006c 	.word	0x2000006c
	ldr	r2, =_sbss
 8005b74:	2000006c 	.word	0x2000006c
	ldr	r3, = _ebss
 8005b78:	200029c0 	.word	0x200029c0

08005b7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005b7c:	e7fe      	b.n	8005b7c <ADC1_2_IRQHandler>
	...

08005b80 <__libc_init_array>:
 8005b80:	b570      	push	{r4, r5, r6, lr}
 8005b82:	4e0d      	ldr	r6, [pc, #52]	; (8005bb8 <__libc_init_array+0x38>)
 8005b84:	4c0d      	ldr	r4, [pc, #52]	; (8005bbc <__libc_init_array+0x3c>)
 8005b86:	1ba4      	subs	r4, r4, r6
 8005b88:	10a4      	asrs	r4, r4, #2
 8005b8a:	2500      	movs	r5, #0
 8005b8c:	42a5      	cmp	r5, r4
 8005b8e:	d109      	bne.n	8005ba4 <__libc_init_array+0x24>
 8005b90:	4e0b      	ldr	r6, [pc, #44]	; (8005bc0 <__libc_init_array+0x40>)
 8005b92:	4c0c      	ldr	r4, [pc, #48]	; (8005bc4 <__libc_init_array+0x44>)
 8005b94:	f000 ff5a 	bl	8006a4c <_init>
 8005b98:	1ba4      	subs	r4, r4, r6
 8005b9a:	10a4      	asrs	r4, r4, #2
 8005b9c:	2500      	movs	r5, #0
 8005b9e:	42a5      	cmp	r5, r4
 8005ba0:	d105      	bne.n	8005bae <__libc_init_array+0x2e>
 8005ba2:	bd70      	pop	{r4, r5, r6, pc}
 8005ba4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ba8:	4798      	blx	r3
 8005baa:	3501      	adds	r5, #1
 8005bac:	e7ee      	b.n	8005b8c <__libc_init_array+0xc>
 8005bae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bb2:	4798      	blx	r3
 8005bb4:	3501      	adds	r5, #1
 8005bb6:	e7f2      	b.n	8005b9e <__libc_init_array+0x1e>
 8005bb8:	08006c20 	.word	0x08006c20
 8005bbc:	08006c20 	.word	0x08006c20
 8005bc0:	08006c20 	.word	0x08006c20
 8005bc4:	08006c24 	.word	0x08006c24

08005bc8 <memcpy>:
 8005bc8:	b510      	push	{r4, lr}
 8005bca:	1e43      	subs	r3, r0, #1
 8005bcc:	440a      	add	r2, r1
 8005bce:	4291      	cmp	r1, r2
 8005bd0:	d100      	bne.n	8005bd4 <memcpy+0xc>
 8005bd2:	bd10      	pop	{r4, pc}
 8005bd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bdc:	e7f7      	b.n	8005bce <memcpy+0x6>

08005bde <memset>:
 8005bde:	4402      	add	r2, r0
 8005be0:	4603      	mov	r3, r0
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d100      	bne.n	8005be8 <memset+0xa>
 8005be6:	4770      	bx	lr
 8005be8:	f803 1b01 	strb.w	r1, [r3], #1
 8005bec:	e7f9      	b.n	8005be2 <memset+0x4>
	...

08005bf0 <iprintf>:
 8005bf0:	b40f      	push	{r0, r1, r2, r3}
 8005bf2:	4b0a      	ldr	r3, [pc, #40]	; (8005c1c <iprintf+0x2c>)
 8005bf4:	b513      	push	{r0, r1, r4, lr}
 8005bf6:	681c      	ldr	r4, [r3, #0]
 8005bf8:	b124      	cbz	r4, 8005c04 <iprintf+0x14>
 8005bfa:	69a3      	ldr	r3, [r4, #24]
 8005bfc:	b913      	cbnz	r3, 8005c04 <iprintf+0x14>
 8005bfe:	4620      	mov	r0, r4
 8005c00:	f000 f84e 	bl	8005ca0 <__sinit>
 8005c04:	ab05      	add	r3, sp, #20
 8005c06:	9a04      	ldr	r2, [sp, #16]
 8005c08:	68a1      	ldr	r1, [r4, #8]
 8005c0a:	9301      	str	r3, [sp, #4]
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	f000 f959 	bl	8005ec4 <_vfiprintf_r>
 8005c12:	b002      	add	sp, #8
 8005c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c18:	b004      	add	sp, #16
 8005c1a:	4770      	bx	lr
 8005c1c:	20000008 	.word	0x20000008

08005c20 <_cleanup_r>:
 8005c20:	4901      	ldr	r1, [pc, #4]	; (8005c28 <_cleanup_r+0x8>)
 8005c22:	f000 b8a9 	b.w	8005d78 <_fwalk_reent>
 8005c26:	bf00      	nop
 8005c28:	08006799 	.word	0x08006799

08005c2c <std.isra.0>:
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	b510      	push	{r4, lr}
 8005c30:	4604      	mov	r4, r0
 8005c32:	6003      	str	r3, [r0, #0]
 8005c34:	6043      	str	r3, [r0, #4]
 8005c36:	6083      	str	r3, [r0, #8]
 8005c38:	8181      	strh	r1, [r0, #12]
 8005c3a:	6643      	str	r3, [r0, #100]	; 0x64
 8005c3c:	81c2      	strh	r2, [r0, #14]
 8005c3e:	6103      	str	r3, [r0, #16]
 8005c40:	6143      	str	r3, [r0, #20]
 8005c42:	6183      	str	r3, [r0, #24]
 8005c44:	4619      	mov	r1, r3
 8005c46:	2208      	movs	r2, #8
 8005c48:	305c      	adds	r0, #92	; 0x5c
 8005c4a:	f7ff ffc8 	bl	8005bde <memset>
 8005c4e:	4b05      	ldr	r3, [pc, #20]	; (8005c64 <std.isra.0+0x38>)
 8005c50:	6263      	str	r3, [r4, #36]	; 0x24
 8005c52:	4b05      	ldr	r3, [pc, #20]	; (8005c68 <std.isra.0+0x3c>)
 8005c54:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c56:	4b05      	ldr	r3, [pc, #20]	; (8005c6c <std.isra.0+0x40>)
 8005c58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c5a:	4b05      	ldr	r3, [pc, #20]	; (8005c70 <std.isra.0+0x44>)
 8005c5c:	6224      	str	r4, [r4, #32]
 8005c5e:	6323      	str	r3, [r4, #48]	; 0x30
 8005c60:	bd10      	pop	{r4, pc}
 8005c62:	bf00      	nop
 8005c64:	0800643d 	.word	0x0800643d
 8005c68:	0800645f 	.word	0x0800645f
 8005c6c:	08006497 	.word	0x08006497
 8005c70:	080064bb 	.word	0x080064bb

08005c74 <__sfmoreglue>:
 8005c74:	b570      	push	{r4, r5, r6, lr}
 8005c76:	1e4a      	subs	r2, r1, #1
 8005c78:	2568      	movs	r5, #104	; 0x68
 8005c7a:	4355      	muls	r5, r2
 8005c7c:	460e      	mov	r6, r1
 8005c7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005c82:	f000 f897 	bl	8005db4 <_malloc_r>
 8005c86:	4604      	mov	r4, r0
 8005c88:	b140      	cbz	r0, 8005c9c <__sfmoreglue+0x28>
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	e880 0042 	stmia.w	r0, {r1, r6}
 8005c90:	300c      	adds	r0, #12
 8005c92:	60a0      	str	r0, [r4, #8]
 8005c94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005c98:	f7ff ffa1 	bl	8005bde <memset>
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	bd70      	pop	{r4, r5, r6, pc}

08005ca0 <__sinit>:
 8005ca0:	6983      	ldr	r3, [r0, #24]
 8005ca2:	b510      	push	{r4, lr}
 8005ca4:	4604      	mov	r4, r0
 8005ca6:	bb33      	cbnz	r3, 8005cf6 <__sinit+0x56>
 8005ca8:	6483      	str	r3, [r0, #72]	; 0x48
 8005caa:	64c3      	str	r3, [r0, #76]	; 0x4c
 8005cac:	6503      	str	r3, [r0, #80]	; 0x50
 8005cae:	4b12      	ldr	r3, [pc, #72]	; (8005cf8 <__sinit+0x58>)
 8005cb0:	4a12      	ldr	r2, [pc, #72]	; (8005cfc <__sinit+0x5c>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6282      	str	r2, [r0, #40]	; 0x28
 8005cb6:	4298      	cmp	r0, r3
 8005cb8:	bf04      	itt	eq
 8005cba:	2301      	moveq	r3, #1
 8005cbc:	6183      	streq	r3, [r0, #24]
 8005cbe:	f000 f81f 	bl	8005d00 <__sfp>
 8005cc2:	6060      	str	r0, [r4, #4]
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	f000 f81b 	bl	8005d00 <__sfp>
 8005cca:	60a0      	str	r0, [r4, #8]
 8005ccc:	4620      	mov	r0, r4
 8005cce:	f000 f817 	bl	8005d00 <__sfp>
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	60e0      	str	r0, [r4, #12]
 8005cd6:	2104      	movs	r1, #4
 8005cd8:	6860      	ldr	r0, [r4, #4]
 8005cda:	f7ff ffa7 	bl	8005c2c <std.isra.0>
 8005cde:	2201      	movs	r2, #1
 8005ce0:	2109      	movs	r1, #9
 8005ce2:	68a0      	ldr	r0, [r4, #8]
 8005ce4:	f7ff ffa2 	bl	8005c2c <std.isra.0>
 8005ce8:	2202      	movs	r2, #2
 8005cea:	2112      	movs	r1, #18
 8005cec:	68e0      	ldr	r0, [r4, #12]
 8005cee:	f7ff ff9d 	bl	8005c2c <std.isra.0>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	61a3      	str	r3, [r4, #24]
 8005cf6:	bd10      	pop	{r4, pc}
 8005cf8:	08006be0 	.word	0x08006be0
 8005cfc:	08005c21 	.word	0x08005c21

08005d00 <__sfp>:
 8005d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d02:	4b1c      	ldr	r3, [pc, #112]	; (8005d74 <__sfp+0x74>)
 8005d04:	681e      	ldr	r6, [r3, #0]
 8005d06:	69b3      	ldr	r3, [r6, #24]
 8005d08:	4607      	mov	r7, r0
 8005d0a:	b913      	cbnz	r3, 8005d12 <__sfp+0x12>
 8005d0c:	4630      	mov	r0, r6
 8005d0e:	f7ff ffc7 	bl	8005ca0 <__sinit>
 8005d12:	3648      	adds	r6, #72	; 0x48
 8005d14:	68b4      	ldr	r4, [r6, #8]
 8005d16:	6873      	ldr	r3, [r6, #4]
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	d503      	bpl.n	8005d24 <__sfp+0x24>
 8005d1c:	6833      	ldr	r3, [r6, #0]
 8005d1e:	b133      	cbz	r3, 8005d2e <__sfp+0x2e>
 8005d20:	6836      	ldr	r6, [r6, #0]
 8005d22:	e7f7      	b.n	8005d14 <__sfp+0x14>
 8005d24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005d28:	b16d      	cbz	r5, 8005d46 <__sfp+0x46>
 8005d2a:	3468      	adds	r4, #104	; 0x68
 8005d2c:	e7f4      	b.n	8005d18 <__sfp+0x18>
 8005d2e:	2104      	movs	r1, #4
 8005d30:	4638      	mov	r0, r7
 8005d32:	f7ff ff9f 	bl	8005c74 <__sfmoreglue>
 8005d36:	6030      	str	r0, [r6, #0]
 8005d38:	2800      	cmp	r0, #0
 8005d3a:	d1f1      	bne.n	8005d20 <__sfp+0x20>
 8005d3c:	230c      	movs	r3, #12
 8005d3e:	603b      	str	r3, [r7, #0]
 8005d40:	4604      	mov	r4, r0
 8005d42:	4620      	mov	r0, r4
 8005d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d4a:	81e3      	strh	r3, [r4, #14]
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	81a3      	strh	r3, [r4, #12]
 8005d50:	6665      	str	r5, [r4, #100]	; 0x64
 8005d52:	6025      	str	r5, [r4, #0]
 8005d54:	60a5      	str	r5, [r4, #8]
 8005d56:	6065      	str	r5, [r4, #4]
 8005d58:	6125      	str	r5, [r4, #16]
 8005d5a:	6165      	str	r5, [r4, #20]
 8005d5c:	61a5      	str	r5, [r4, #24]
 8005d5e:	2208      	movs	r2, #8
 8005d60:	4629      	mov	r1, r5
 8005d62:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005d66:	f7ff ff3a 	bl	8005bde <memset>
 8005d6a:	6365      	str	r5, [r4, #52]	; 0x34
 8005d6c:	63a5      	str	r5, [r4, #56]	; 0x38
 8005d6e:	64a5      	str	r5, [r4, #72]	; 0x48
 8005d70:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005d72:	e7e6      	b.n	8005d42 <__sfp+0x42>
 8005d74:	08006be0 	.word	0x08006be0

08005d78 <_fwalk_reent>:
 8005d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d7c:	4680      	mov	r8, r0
 8005d7e:	4689      	mov	r9, r1
 8005d80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d84:	2600      	movs	r6, #0
 8005d86:	b914      	cbnz	r4, 8005d8e <_fwalk_reent+0x16>
 8005d88:	4630      	mov	r0, r6
 8005d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d8e:	68a5      	ldr	r5, [r4, #8]
 8005d90:	6867      	ldr	r7, [r4, #4]
 8005d92:	3f01      	subs	r7, #1
 8005d94:	d501      	bpl.n	8005d9a <_fwalk_reent+0x22>
 8005d96:	6824      	ldr	r4, [r4, #0]
 8005d98:	e7f5      	b.n	8005d86 <_fwalk_reent+0xe>
 8005d9a:	89ab      	ldrh	r3, [r5, #12]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d907      	bls.n	8005db0 <_fwalk_reent+0x38>
 8005da0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005da4:	3301      	adds	r3, #1
 8005da6:	d003      	beq.n	8005db0 <_fwalk_reent+0x38>
 8005da8:	4629      	mov	r1, r5
 8005daa:	4640      	mov	r0, r8
 8005dac:	47c8      	blx	r9
 8005dae:	4306      	orrs	r6, r0
 8005db0:	3568      	adds	r5, #104	; 0x68
 8005db2:	e7ee      	b.n	8005d92 <_fwalk_reent+0x1a>

08005db4 <_malloc_r>:
 8005db4:	b570      	push	{r4, r5, r6, lr}
 8005db6:	1ccd      	adds	r5, r1, #3
 8005db8:	f025 0503 	bic.w	r5, r5, #3
 8005dbc:	3508      	adds	r5, #8
 8005dbe:	2d0c      	cmp	r5, #12
 8005dc0:	bf38      	it	cc
 8005dc2:	250c      	movcc	r5, #12
 8005dc4:	2d00      	cmp	r5, #0
 8005dc6:	4606      	mov	r6, r0
 8005dc8:	db01      	blt.n	8005dce <_malloc_r+0x1a>
 8005dca:	42a9      	cmp	r1, r5
 8005dcc:	d903      	bls.n	8005dd6 <_malloc_r+0x22>
 8005dce:	230c      	movs	r3, #12
 8005dd0:	6033      	str	r3, [r6, #0]
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	bd70      	pop	{r4, r5, r6, pc}
 8005dd6:	f000 fd7f 	bl	80068d8 <__malloc_lock>
 8005dda:	4a23      	ldr	r2, [pc, #140]	; (8005e68 <_malloc_r+0xb4>)
 8005ddc:	6814      	ldr	r4, [r2, #0]
 8005dde:	4621      	mov	r1, r4
 8005de0:	b991      	cbnz	r1, 8005e08 <_malloc_r+0x54>
 8005de2:	4c22      	ldr	r4, [pc, #136]	; (8005e6c <_malloc_r+0xb8>)
 8005de4:	6823      	ldr	r3, [r4, #0]
 8005de6:	b91b      	cbnz	r3, 8005df0 <_malloc_r+0x3c>
 8005de8:	4630      	mov	r0, r6
 8005dea:	f000 fb17 	bl	800641c <_sbrk_r>
 8005dee:	6020      	str	r0, [r4, #0]
 8005df0:	4629      	mov	r1, r5
 8005df2:	4630      	mov	r0, r6
 8005df4:	f000 fb12 	bl	800641c <_sbrk_r>
 8005df8:	1c43      	adds	r3, r0, #1
 8005dfa:	d126      	bne.n	8005e4a <_malloc_r+0x96>
 8005dfc:	230c      	movs	r3, #12
 8005dfe:	6033      	str	r3, [r6, #0]
 8005e00:	4630      	mov	r0, r6
 8005e02:	f000 fd6a 	bl	80068da <__malloc_unlock>
 8005e06:	e7e4      	b.n	8005dd2 <_malloc_r+0x1e>
 8005e08:	680b      	ldr	r3, [r1, #0]
 8005e0a:	1b5b      	subs	r3, r3, r5
 8005e0c:	d41a      	bmi.n	8005e44 <_malloc_r+0x90>
 8005e0e:	2b0b      	cmp	r3, #11
 8005e10:	d90f      	bls.n	8005e32 <_malloc_r+0x7e>
 8005e12:	600b      	str	r3, [r1, #0]
 8005e14:	50cd      	str	r5, [r1, r3]
 8005e16:	18cc      	adds	r4, r1, r3
 8005e18:	4630      	mov	r0, r6
 8005e1a:	f000 fd5e 	bl	80068da <__malloc_unlock>
 8005e1e:	f104 000b 	add.w	r0, r4, #11
 8005e22:	1d23      	adds	r3, r4, #4
 8005e24:	f020 0007 	bic.w	r0, r0, #7
 8005e28:	1ac3      	subs	r3, r0, r3
 8005e2a:	d01b      	beq.n	8005e64 <_malloc_r+0xb0>
 8005e2c:	425a      	negs	r2, r3
 8005e2e:	50e2      	str	r2, [r4, r3]
 8005e30:	bd70      	pop	{r4, r5, r6, pc}
 8005e32:	428c      	cmp	r4, r1
 8005e34:	bf0d      	iteet	eq
 8005e36:	6863      	ldreq	r3, [r4, #4]
 8005e38:	684b      	ldrne	r3, [r1, #4]
 8005e3a:	6063      	strne	r3, [r4, #4]
 8005e3c:	6013      	streq	r3, [r2, #0]
 8005e3e:	bf18      	it	ne
 8005e40:	460c      	movne	r4, r1
 8005e42:	e7e9      	b.n	8005e18 <_malloc_r+0x64>
 8005e44:	460c      	mov	r4, r1
 8005e46:	6849      	ldr	r1, [r1, #4]
 8005e48:	e7ca      	b.n	8005de0 <_malloc_r+0x2c>
 8005e4a:	1cc4      	adds	r4, r0, #3
 8005e4c:	f024 0403 	bic.w	r4, r4, #3
 8005e50:	42a0      	cmp	r0, r4
 8005e52:	d005      	beq.n	8005e60 <_malloc_r+0xac>
 8005e54:	1a21      	subs	r1, r4, r0
 8005e56:	4630      	mov	r0, r6
 8005e58:	f000 fae0 	bl	800641c <_sbrk_r>
 8005e5c:	3001      	adds	r0, #1
 8005e5e:	d0cd      	beq.n	8005dfc <_malloc_r+0x48>
 8005e60:	6025      	str	r5, [r4, #0]
 8005e62:	e7d9      	b.n	8005e18 <_malloc_r+0x64>
 8005e64:	bd70      	pop	{r4, r5, r6, pc}
 8005e66:	bf00      	nop
 8005e68:	200028e4 	.word	0x200028e4
 8005e6c:	200028e8 	.word	0x200028e8

08005e70 <__sfputc_r>:
 8005e70:	6893      	ldr	r3, [r2, #8]
 8005e72:	3b01      	subs	r3, #1
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	b410      	push	{r4}
 8005e78:	6093      	str	r3, [r2, #8]
 8005e7a:	da09      	bge.n	8005e90 <__sfputc_r+0x20>
 8005e7c:	6994      	ldr	r4, [r2, #24]
 8005e7e:	42a3      	cmp	r3, r4
 8005e80:	db02      	blt.n	8005e88 <__sfputc_r+0x18>
 8005e82:	b2cb      	uxtb	r3, r1
 8005e84:	2b0a      	cmp	r3, #10
 8005e86:	d103      	bne.n	8005e90 <__sfputc_r+0x20>
 8005e88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e8c:	f000 bb1a 	b.w	80064c4 <__swbuf_r>
 8005e90:	6813      	ldr	r3, [r2, #0]
 8005e92:	1c58      	adds	r0, r3, #1
 8005e94:	6010      	str	r0, [r2, #0]
 8005e96:	7019      	strb	r1, [r3, #0]
 8005e98:	b2c8      	uxtb	r0, r1
 8005e9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <__sfputs_r>:
 8005ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea2:	4606      	mov	r6, r0
 8005ea4:	460f      	mov	r7, r1
 8005ea6:	4614      	mov	r4, r2
 8005ea8:	18d5      	adds	r5, r2, r3
 8005eaa:	42ac      	cmp	r4, r5
 8005eac:	d101      	bne.n	8005eb2 <__sfputs_r+0x12>
 8005eae:	2000      	movs	r0, #0
 8005eb0:	e007      	b.n	8005ec2 <__sfputs_r+0x22>
 8005eb2:	463a      	mov	r2, r7
 8005eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eb8:	4630      	mov	r0, r6
 8005eba:	f7ff ffd9 	bl	8005e70 <__sfputc_r>
 8005ebe:	1c43      	adds	r3, r0, #1
 8005ec0:	d1f3      	bne.n	8005eaa <__sfputs_r+0xa>
 8005ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005ec4 <_vfiprintf_r>:
 8005ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec8:	b09d      	sub	sp, #116	; 0x74
 8005eca:	460c      	mov	r4, r1
 8005ecc:	4617      	mov	r7, r2
 8005ece:	9303      	str	r3, [sp, #12]
 8005ed0:	4606      	mov	r6, r0
 8005ed2:	b118      	cbz	r0, 8005edc <_vfiprintf_r+0x18>
 8005ed4:	6983      	ldr	r3, [r0, #24]
 8005ed6:	b90b      	cbnz	r3, 8005edc <_vfiprintf_r+0x18>
 8005ed8:	f7ff fee2 	bl	8005ca0 <__sinit>
 8005edc:	4b7c      	ldr	r3, [pc, #496]	; (80060d0 <_vfiprintf_r+0x20c>)
 8005ede:	429c      	cmp	r4, r3
 8005ee0:	d157      	bne.n	8005f92 <_vfiprintf_r+0xce>
 8005ee2:	6874      	ldr	r4, [r6, #4]
 8005ee4:	89a3      	ldrh	r3, [r4, #12]
 8005ee6:	0718      	lsls	r0, r3, #28
 8005ee8:	d55d      	bpl.n	8005fa6 <_vfiprintf_r+0xe2>
 8005eea:	6923      	ldr	r3, [r4, #16]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d05a      	beq.n	8005fa6 <_vfiprintf_r+0xe2>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ef4:	2320      	movs	r3, #32
 8005ef6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005efa:	2330      	movs	r3, #48	; 0x30
 8005efc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f00:	f04f 0b01 	mov.w	fp, #1
 8005f04:	46b8      	mov	r8, r7
 8005f06:	4645      	mov	r5, r8
 8005f08:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d155      	bne.n	8005fbc <_vfiprintf_r+0xf8>
 8005f10:	ebb8 0a07 	subs.w	sl, r8, r7
 8005f14:	d00b      	beq.n	8005f2e <_vfiprintf_r+0x6a>
 8005f16:	4653      	mov	r3, sl
 8005f18:	463a      	mov	r2, r7
 8005f1a:	4621      	mov	r1, r4
 8005f1c:	4630      	mov	r0, r6
 8005f1e:	f7ff ffbf 	bl	8005ea0 <__sfputs_r>
 8005f22:	3001      	adds	r0, #1
 8005f24:	f000 80c4 	beq.w	80060b0 <_vfiprintf_r+0x1ec>
 8005f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f2a:	4453      	add	r3, sl
 8005f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f2e:	f898 3000 	ldrb.w	r3, [r8]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f000 80bc 	beq.w	80060b0 <_vfiprintf_r+0x1ec>
 8005f38:	2300      	movs	r3, #0
 8005f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f3e:	9304      	str	r3, [sp, #16]
 8005f40:	9307      	str	r3, [sp, #28]
 8005f42:	9205      	str	r2, [sp, #20]
 8005f44:	9306      	str	r3, [sp, #24]
 8005f46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f4a:	931a      	str	r3, [sp, #104]	; 0x68
 8005f4c:	2205      	movs	r2, #5
 8005f4e:	7829      	ldrb	r1, [r5, #0]
 8005f50:	4860      	ldr	r0, [pc, #384]	; (80060d4 <_vfiprintf_r+0x210>)
 8005f52:	f7fa f93d 	bl	80001d0 <memchr>
 8005f56:	f105 0801 	add.w	r8, r5, #1
 8005f5a:	9b04      	ldr	r3, [sp, #16]
 8005f5c:	2800      	cmp	r0, #0
 8005f5e:	d131      	bne.n	8005fc4 <_vfiprintf_r+0x100>
 8005f60:	06d9      	lsls	r1, r3, #27
 8005f62:	bf44      	itt	mi
 8005f64:	2220      	movmi	r2, #32
 8005f66:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005f6a:	071a      	lsls	r2, r3, #28
 8005f6c:	bf44      	itt	mi
 8005f6e:	222b      	movmi	r2, #43	; 0x2b
 8005f70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005f74:	782a      	ldrb	r2, [r5, #0]
 8005f76:	2a2a      	cmp	r2, #42	; 0x2a
 8005f78:	d02c      	beq.n	8005fd4 <_vfiprintf_r+0x110>
 8005f7a:	9a07      	ldr	r2, [sp, #28]
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	200a      	movs	r0, #10
 8005f80:	46a8      	mov	r8, r5
 8005f82:	3501      	adds	r5, #1
 8005f84:	f898 3000 	ldrb.w	r3, [r8]
 8005f88:	3b30      	subs	r3, #48	; 0x30
 8005f8a:	2b09      	cmp	r3, #9
 8005f8c:	d96d      	bls.n	800606a <_vfiprintf_r+0x1a6>
 8005f8e:	b371      	cbz	r1, 8005fee <_vfiprintf_r+0x12a>
 8005f90:	e026      	b.n	8005fe0 <_vfiprintf_r+0x11c>
 8005f92:	4b51      	ldr	r3, [pc, #324]	; (80060d8 <_vfiprintf_r+0x214>)
 8005f94:	429c      	cmp	r4, r3
 8005f96:	d101      	bne.n	8005f9c <_vfiprintf_r+0xd8>
 8005f98:	68b4      	ldr	r4, [r6, #8]
 8005f9a:	e7a3      	b.n	8005ee4 <_vfiprintf_r+0x20>
 8005f9c:	4b4f      	ldr	r3, [pc, #316]	; (80060dc <_vfiprintf_r+0x218>)
 8005f9e:	429c      	cmp	r4, r3
 8005fa0:	bf08      	it	eq
 8005fa2:	68f4      	ldreq	r4, [r6, #12]
 8005fa4:	e79e      	b.n	8005ee4 <_vfiprintf_r+0x20>
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	4630      	mov	r0, r6
 8005faa:	f000 faef 	bl	800658c <__swsetup_r>
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	d09e      	beq.n	8005ef0 <_vfiprintf_r+0x2c>
 8005fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb6:	b01d      	add	sp, #116	; 0x74
 8005fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fbc:	2b25      	cmp	r3, #37	; 0x25
 8005fbe:	d0a7      	beq.n	8005f10 <_vfiprintf_r+0x4c>
 8005fc0:	46a8      	mov	r8, r5
 8005fc2:	e7a0      	b.n	8005f06 <_vfiprintf_r+0x42>
 8005fc4:	4a43      	ldr	r2, [pc, #268]	; (80060d4 <_vfiprintf_r+0x210>)
 8005fc6:	1a80      	subs	r0, r0, r2
 8005fc8:	fa0b f000 	lsl.w	r0, fp, r0
 8005fcc:	4318      	orrs	r0, r3
 8005fce:	9004      	str	r0, [sp, #16]
 8005fd0:	4645      	mov	r5, r8
 8005fd2:	e7bb      	b.n	8005f4c <_vfiprintf_r+0x88>
 8005fd4:	9a03      	ldr	r2, [sp, #12]
 8005fd6:	1d11      	adds	r1, r2, #4
 8005fd8:	6812      	ldr	r2, [r2, #0]
 8005fda:	9103      	str	r1, [sp, #12]
 8005fdc:	2a00      	cmp	r2, #0
 8005fde:	db01      	blt.n	8005fe4 <_vfiprintf_r+0x120>
 8005fe0:	9207      	str	r2, [sp, #28]
 8005fe2:	e004      	b.n	8005fee <_vfiprintf_r+0x12a>
 8005fe4:	4252      	negs	r2, r2
 8005fe6:	f043 0302 	orr.w	r3, r3, #2
 8005fea:	9207      	str	r2, [sp, #28]
 8005fec:	9304      	str	r3, [sp, #16]
 8005fee:	f898 3000 	ldrb.w	r3, [r8]
 8005ff2:	2b2e      	cmp	r3, #46	; 0x2e
 8005ff4:	d110      	bne.n	8006018 <_vfiprintf_r+0x154>
 8005ff6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005ffa:	2b2a      	cmp	r3, #42	; 0x2a
 8005ffc:	f108 0101 	add.w	r1, r8, #1
 8006000:	d137      	bne.n	8006072 <_vfiprintf_r+0x1ae>
 8006002:	9b03      	ldr	r3, [sp, #12]
 8006004:	1d1a      	adds	r2, r3, #4
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	9203      	str	r2, [sp, #12]
 800600a:	2b00      	cmp	r3, #0
 800600c:	bfb8      	it	lt
 800600e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006012:	f108 0802 	add.w	r8, r8, #2
 8006016:	9305      	str	r3, [sp, #20]
 8006018:	4d31      	ldr	r5, [pc, #196]	; (80060e0 <_vfiprintf_r+0x21c>)
 800601a:	f898 1000 	ldrb.w	r1, [r8]
 800601e:	2203      	movs	r2, #3
 8006020:	4628      	mov	r0, r5
 8006022:	f7fa f8d5 	bl	80001d0 <memchr>
 8006026:	b140      	cbz	r0, 800603a <_vfiprintf_r+0x176>
 8006028:	2340      	movs	r3, #64	; 0x40
 800602a:	1b40      	subs	r0, r0, r5
 800602c:	fa03 f000 	lsl.w	r0, r3, r0
 8006030:	9b04      	ldr	r3, [sp, #16]
 8006032:	4303      	orrs	r3, r0
 8006034:	9304      	str	r3, [sp, #16]
 8006036:	f108 0801 	add.w	r8, r8, #1
 800603a:	f898 1000 	ldrb.w	r1, [r8]
 800603e:	4829      	ldr	r0, [pc, #164]	; (80060e4 <_vfiprintf_r+0x220>)
 8006040:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006044:	2206      	movs	r2, #6
 8006046:	f108 0701 	add.w	r7, r8, #1
 800604a:	f7fa f8c1 	bl	80001d0 <memchr>
 800604e:	2800      	cmp	r0, #0
 8006050:	d034      	beq.n	80060bc <_vfiprintf_r+0x1f8>
 8006052:	4b25      	ldr	r3, [pc, #148]	; (80060e8 <_vfiprintf_r+0x224>)
 8006054:	bb03      	cbnz	r3, 8006098 <_vfiprintf_r+0x1d4>
 8006056:	9b03      	ldr	r3, [sp, #12]
 8006058:	3307      	adds	r3, #7
 800605a:	f023 0307 	bic.w	r3, r3, #7
 800605e:	3308      	adds	r3, #8
 8006060:	9303      	str	r3, [sp, #12]
 8006062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006064:	444b      	add	r3, r9
 8006066:	9309      	str	r3, [sp, #36]	; 0x24
 8006068:	e74c      	b.n	8005f04 <_vfiprintf_r+0x40>
 800606a:	fb00 3202 	mla	r2, r0, r2, r3
 800606e:	2101      	movs	r1, #1
 8006070:	e786      	b.n	8005f80 <_vfiprintf_r+0xbc>
 8006072:	2300      	movs	r3, #0
 8006074:	9305      	str	r3, [sp, #20]
 8006076:	4618      	mov	r0, r3
 8006078:	250a      	movs	r5, #10
 800607a:	4688      	mov	r8, r1
 800607c:	3101      	adds	r1, #1
 800607e:	f898 2000 	ldrb.w	r2, [r8]
 8006082:	3a30      	subs	r2, #48	; 0x30
 8006084:	2a09      	cmp	r2, #9
 8006086:	d903      	bls.n	8006090 <_vfiprintf_r+0x1cc>
 8006088:	2b00      	cmp	r3, #0
 800608a:	d0c5      	beq.n	8006018 <_vfiprintf_r+0x154>
 800608c:	9005      	str	r0, [sp, #20]
 800608e:	e7c3      	b.n	8006018 <_vfiprintf_r+0x154>
 8006090:	fb05 2000 	mla	r0, r5, r0, r2
 8006094:	2301      	movs	r3, #1
 8006096:	e7f0      	b.n	800607a <_vfiprintf_r+0x1b6>
 8006098:	ab03      	add	r3, sp, #12
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	4622      	mov	r2, r4
 800609e:	4b13      	ldr	r3, [pc, #76]	; (80060ec <_vfiprintf_r+0x228>)
 80060a0:	a904      	add	r1, sp, #16
 80060a2:	4630      	mov	r0, r6
 80060a4:	f3af 8000 	nop.w
 80060a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80060ac:	4681      	mov	r9, r0
 80060ae:	d1d8      	bne.n	8006062 <_vfiprintf_r+0x19e>
 80060b0:	89a3      	ldrh	r3, [r4, #12]
 80060b2:	065b      	lsls	r3, r3, #25
 80060b4:	f53f af7d 	bmi.w	8005fb2 <_vfiprintf_r+0xee>
 80060b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060ba:	e77c      	b.n	8005fb6 <_vfiprintf_r+0xf2>
 80060bc:	ab03      	add	r3, sp, #12
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	4622      	mov	r2, r4
 80060c2:	4b0a      	ldr	r3, [pc, #40]	; (80060ec <_vfiprintf_r+0x228>)
 80060c4:	a904      	add	r1, sp, #16
 80060c6:	4630      	mov	r0, r6
 80060c8:	f000 f888 	bl	80061dc <_printf_i>
 80060cc:	e7ec      	b.n	80060a8 <_vfiprintf_r+0x1e4>
 80060ce:	bf00      	nop
 80060d0:	08006ba0 	.word	0x08006ba0
 80060d4:	08006be4 	.word	0x08006be4
 80060d8:	08006bc0 	.word	0x08006bc0
 80060dc:	08006b80 	.word	0x08006b80
 80060e0:	08006bea 	.word	0x08006bea
 80060e4:	08006bee 	.word	0x08006bee
 80060e8:	00000000 	.word	0x00000000
 80060ec:	08005ea1 	.word	0x08005ea1

080060f0 <_printf_common>:
 80060f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060f4:	4691      	mov	r9, r2
 80060f6:	461f      	mov	r7, r3
 80060f8:	688a      	ldr	r2, [r1, #8]
 80060fa:	690b      	ldr	r3, [r1, #16]
 80060fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006100:	4293      	cmp	r3, r2
 8006102:	bfb8      	it	lt
 8006104:	4613      	movlt	r3, r2
 8006106:	f8c9 3000 	str.w	r3, [r9]
 800610a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800610e:	4606      	mov	r6, r0
 8006110:	460c      	mov	r4, r1
 8006112:	b112      	cbz	r2, 800611a <_printf_common+0x2a>
 8006114:	3301      	adds	r3, #1
 8006116:	f8c9 3000 	str.w	r3, [r9]
 800611a:	6823      	ldr	r3, [r4, #0]
 800611c:	0699      	lsls	r1, r3, #26
 800611e:	bf42      	ittt	mi
 8006120:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006124:	3302      	addmi	r3, #2
 8006126:	f8c9 3000 	strmi.w	r3, [r9]
 800612a:	6825      	ldr	r5, [r4, #0]
 800612c:	f015 0506 	ands.w	r5, r5, #6
 8006130:	d107      	bne.n	8006142 <_printf_common+0x52>
 8006132:	f104 0a19 	add.w	sl, r4, #25
 8006136:	68e3      	ldr	r3, [r4, #12]
 8006138:	f8d9 2000 	ldr.w	r2, [r9]
 800613c:	1a9b      	subs	r3, r3, r2
 800613e:	429d      	cmp	r5, r3
 8006140:	db29      	blt.n	8006196 <_printf_common+0xa6>
 8006142:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006146:	6822      	ldr	r2, [r4, #0]
 8006148:	3300      	adds	r3, #0
 800614a:	bf18      	it	ne
 800614c:	2301      	movne	r3, #1
 800614e:	0692      	lsls	r2, r2, #26
 8006150:	d42e      	bmi.n	80061b0 <_printf_common+0xc0>
 8006152:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006156:	4639      	mov	r1, r7
 8006158:	4630      	mov	r0, r6
 800615a:	47c0      	blx	r8
 800615c:	3001      	adds	r0, #1
 800615e:	d021      	beq.n	80061a4 <_printf_common+0xb4>
 8006160:	6823      	ldr	r3, [r4, #0]
 8006162:	68e5      	ldr	r5, [r4, #12]
 8006164:	f8d9 2000 	ldr.w	r2, [r9]
 8006168:	f003 0306 	and.w	r3, r3, #6
 800616c:	2b04      	cmp	r3, #4
 800616e:	bf08      	it	eq
 8006170:	1aad      	subeq	r5, r5, r2
 8006172:	68a3      	ldr	r3, [r4, #8]
 8006174:	6922      	ldr	r2, [r4, #16]
 8006176:	bf0c      	ite	eq
 8006178:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800617c:	2500      	movne	r5, #0
 800617e:	4293      	cmp	r3, r2
 8006180:	bfc4      	itt	gt
 8006182:	1a9b      	subgt	r3, r3, r2
 8006184:	18ed      	addgt	r5, r5, r3
 8006186:	f04f 0900 	mov.w	r9, #0
 800618a:	341a      	adds	r4, #26
 800618c:	454d      	cmp	r5, r9
 800618e:	d11b      	bne.n	80061c8 <_printf_common+0xd8>
 8006190:	2000      	movs	r0, #0
 8006192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006196:	2301      	movs	r3, #1
 8006198:	4652      	mov	r2, sl
 800619a:	4639      	mov	r1, r7
 800619c:	4630      	mov	r0, r6
 800619e:	47c0      	blx	r8
 80061a0:	3001      	adds	r0, #1
 80061a2:	d103      	bne.n	80061ac <_printf_common+0xbc>
 80061a4:	f04f 30ff 	mov.w	r0, #4294967295
 80061a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061ac:	3501      	adds	r5, #1
 80061ae:	e7c2      	b.n	8006136 <_printf_common+0x46>
 80061b0:	18e1      	adds	r1, r4, r3
 80061b2:	1c5a      	adds	r2, r3, #1
 80061b4:	2030      	movs	r0, #48	; 0x30
 80061b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061ba:	4422      	add	r2, r4
 80061bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061c4:	3302      	adds	r3, #2
 80061c6:	e7c4      	b.n	8006152 <_printf_common+0x62>
 80061c8:	2301      	movs	r3, #1
 80061ca:	4622      	mov	r2, r4
 80061cc:	4639      	mov	r1, r7
 80061ce:	4630      	mov	r0, r6
 80061d0:	47c0      	blx	r8
 80061d2:	3001      	adds	r0, #1
 80061d4:	d0e6      	beq.n	80061a4 <_printf_common+0xb4>
 80061d6:	f109 0901 	add.w	r9, r9, #1
 80061da:	e7d7      	b.n	800618c <_printf_common+0x9c>

080061dc <_printf_i>:
 80061dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80061e0:	4617      	mov	r7, r2
 80061e2:	7e0a      	ldrb	r2, [r1, #24]
 80061e4:	b085      	sub	sp, #20
 80061e6:	2a6e      	cmp	r2, #110	; 0x6e
 80061e8:	4698      	mov	r8, r3
 80061ea:	4606      	mov	r6, r0
 80061ec:	460c      	mov	r4, r1
 80061ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061f0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80061f4:	f000 80bc 	beq.w	8006370 <_printf_i+0x194>
 80061f8:	d81a      	bhi.n	8006230 <_printf_i+0x54>
 80061fa:	2a63      	cmp	r2, #99	; 0x63
 80061fc:	d02e      	beq.n	800625c <_printf_i+0x80>
 80061fe:	d80a      	bhi.n	8006216 <_printf_i+0x3a>
 8006200:	2a00      	cmp	r2, #0
 8006202:	f000 80c8 	beq.w	8006396 <_printf_i+0x1ba>
 8006206:	2a58      	cmp	r2, #88	; 0x58
 8006208:	f000 808a 	beq.w	8006320 <_printf_i+0x144>
 800620c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006210:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006214:	e02a      	b.n	800626c <_printf_i+0x90>
 8006216:	2a64      	cmp	r2, #100	; 0x64
 8006218:	d001      	beq.n	800621e <_printf_i+0x42>
 800621a:	2a69      	cmp	r2, #105	; 0x69
 800621c:	d1f6      	bne.n	800620c <_printf_i+0x30>
 800621e:	6821      	ldr	r1, [r4, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006226:	d023      	beq.n	8006270 <_printf_i+0x94>
 8006228:	1d11      	adds	r1, r2, #4
 800622a:	6019      	str	r1, [r3, #0]
 800622c:	6813      	ldr	r3, [r2, #0]
 800622e:	e027      	b.n	8006280 <_printf_i+0xa4>
 8006230:	2a73      	cmp	r2, #115	; 0x73
 8006232:	f000 80b4 	beq.w	800639e <_printf_i+0x1c2>
 8006236:	d808      	bhi.n	800624a <_printf_i+0x6e>
 8006238:	2a6f      	cmp	r2, #111	; 0x6f
 800623a:	d02a      	beq.n	8006292 <_printf_i+0xb6>
 800623c:	2a70      	cmp	r2, #112	; 0x70
 800623e:	d1e5      	bne.n	800620c <_printf_i+0x30>
 8006240:	680a      	ldr	r2, [r1, #0]
 8006242:	f042 0220 	orr.w	r2, r2, #32
 8006246:	600a      	str	r2, [r1, #0]
 8006248:	e003      	b.n	8006252 <_printf_i+0x76>
 800624a:	2a75      	cmp	r2, #117	; 0x75
 800624c:	d021      	beq.n	8006292 <_printf_i+0xb6>
 800624e:	2a78      	cmp	r2, #120	; 0x78
 8006250:	d1dc      	bne.n	800620c <_printf_i+0x30>
 8006252:	2278      	movs	r2, #120	; 0x78
 8006254:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006258:	496e      	ldr	r1, [pc, #440]	; (8006414 <_printf_i+0x238>)
 800625a:	e064      	b.n	8006326 <_printf_i+0x14a>
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8006262:	1d11      	adds	r1, r2, #4
 8006264:	6019      	str	r1, [r3, #0]
 8006266:	6813      	ldr	r3, [r2, #0]
 8006268:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800626c:	2301      	movs	r3, #1
 800626e:	e0a3      	b.n	80063b8 <_printf_i+0x1dc>
 8006270:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006274:	f102 0104 	add.w	r1, r2, #4
 8006278:	6019      	str	r1, [r3, #0]
 800627a:	d0d7      	beq.n	800622c <_printf_i+0x50>
 800627c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006280:	2b00      	cmp	r3, #0
 8006282:	da03      	bge.n	800628c <_printf_i+0xb0>
 8006284:	222d      	movs	r2, #45	; 0x2d
 8006286:	425b      	negs	r3, r3
 8006288:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800628c:	4962      	ldr	r1, [pc, #392]	; (8006418 <_printf_i+0x23c>)
 800628e:	220a      	movs	r2, #10
 8006290:	e017      	b.n	80062c2 <_printf_i+0xe6>
 8006292:	6820      	ldr	r0, [r4, #0]
 8006294:	6819      	ldr	r1, [r3, #0]
 8006296:	f010 0f80 	tst.w	r0, #128	; 0x80
 800629a:	d003      	beq.n	80062a4 <_printf_i+0xc8>
 800629c:	1d08      	adds	r0, r1, #4
 800629e:	6018      	str	r0, [r3, #0]
 80062a0:	680b      	ldr	r3, [r1, #0]
 80062a2:	e006      	b.n	80062b2 <_printf_i+0xd6>
 80062a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062a8:	f101 0004 	add.w	r0, r1, #4
 80062ac:	6018      	str	r0, [r3, #0]
 80062ae:	d0f7      	beq.n	80062a0 <_printf_i+0xc4>
 80062b0:	880b      	ldrh	r3, [r1, #0]
 80062b2:	4959      	ldr	r1, [pc, #356]	; (8006418 <_printf_i+0x23c>)
 80062b4:	2a6f      	cmp	r2, #111	; 0x6f
 80062b6:	bf14      	ite	ne
 80062b8:	220a      	movne	r2, #10
 80062ba:	2208      	moveq	r2, #8
 80062bc:	2000      	movs	r0, #0
 80062be:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80062c2:	6865      	ldr	r5, [r4, #4]
 80062c4:	60a5      	str	r5, [r4, #8]
 80062c6:	2d00      	cmp	r5, #0
 80062c8:	f2c0 809c 	blt.w	8006404 <_printf_i+0x228>
 80062cc:	6820      	ldr	r0, [r4, #0]
 80062ce:	f020 0004 	bic.w	r0, r0, #4
 80062d2:	6020      	str	r0, [r4, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d13f      	bne.n	8006358 <_printf_i+0x17c>
 80062d8:	2d00      	cmp	r5, #0
 80062da:	f040 8095 	bne.w	8006408 <_printf_i+0x22c>
 80062de:	4675      	mov	r5, lr
 80062e0:	2a08      	cmp	r2, #8
 80062e2:	d10b      	bne.n	80062fc <_printf_i+0x120>
 80062e4:	6823      	ldr	r3, [r4, #0]
 80062e6:	07da      	lsls	r2, r3, #31
 80062e8:	d508      	bpl.n	80062fc <_printf_i+0x120>
 80062ea:	6923      	ldr	r3, [r4, #16]
 80062ec:	6862      	ldr	r2, [r4, #4]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	bfde      	ittt	le
 80062f2:	2330      	movle	r3, #48	; 0x30
 80062f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062fc:	ebae 0305 	sub.w	r3, lr, r5
 8006300:	6123      	str	r3, [r4, #16]
 8006302:	f8cd 8000 	str.w	r8, [sp]
 8006306:	463b      	mov	r3, r7
 8006308:	aa03      	add	r2, sp, #12
 800630a:	4621      	mov	r1, r4
 800630c:	4630      	mov	r0, r6
 800630e:	f7ff feef 	bl	80060f0 <_printf_common>
 8006312:	3001      	adds	r0, #1
 8006314:	d155      	bne.n	80063c2 <_printf_i+0x1e6>
 8006316:	f04f 30ff 	mov.w	r0, #4294967295
 800631a:	b005      	add	sp, #20
 800631c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006320:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006324:	493c      	ldr	r1, [pc, #240]	; (8006418 <_printf_i+0x23c>)
 8006326:	6822      	ldr	r2, [r4, #0]
 8006328:	6818      	ldr	r0, [r3, #0]
 800632a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800632e:	f100 0504 	add.w	r5, r0, #4
 8006332:	601d      	str	r5, [r3, #0]
 8006334:	d001      	beq.n	800633a <_printf_i+0x15e>
 8006336:	6803      	ldr	r3, [r0, #0]
 8006338:	e002      	b.n	8006340 <_printf_i+0x164>
 800633a:	0655      	lsls	r5, r2, #25
 800633c:	d5fb      	bpl.n	8006336 <_printf_i+0x15a>
 800633e:	8803      	ldrh	r3, [r0, #0]
 8006340:	07d0      	lsls	r0, r2, #31
 8006342:	bf44      	itt	mi
 8006344:	f042 0220 	orrmi.w	r2, r2, #32
 8006348:	6022      	strmi	r2, [r4, #0]
 800634a:	b91b      	cbnz	r3, 8006354 <_printf_i+0x178>
 800634c:	6822      	ldr	r2, [r4, #0]
 800634e:	f022 0220 	bic.w	r2, r2, #32
 8006352:	6022      	str	r2, [r4, #0]
 8006354:	2210      	movs	r2, #16
 8006356:	e7b1      	b.n	80062bc <_printf_i+0xe0>
 8006358:	4675      	mov	r5, lr
 800635a:	fbb3 f0f2 	udiv	r0, r3, r2
 800635e:	fb02 3310 	mls	r3, r2, r0, r3
 8006362:	5ccb      	ldrb	r3, [r1, r3]
 8006364:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006368:	4603      	mov	r3, r0
 800636a:	2800      	cmp	r0, #0
 800636c:	d1f5      	bne.n	800635a <_printf_i+0x17e>
 800636e:	e7b7      	b.n	80062e0 <_printf_i+0x104>
 8006370:	6808      	ldr	r0, [r1, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	6949      	ldr	r1, [r1, #20]
 8006376:	f010 0f80 	tst.w	r0, #128	; 0x80
 800637a:	d004      	beq.n	8006386 <_printf_i+0x1aa>
 800637c:	1d10      	adds	r0, r2, #4
 800637e:	6018      	str	r0, [r3, #0]
 8006380:	6813      	ldr	r3, [r2, #0]
 8006382:	6019      	str	r1, [r3, #0]
 8006384:	e007      	b.n	8006396 <_printf_i+0x1ba>
 8006386:	f010 0f40 	tst.w	r0, #64	; 0x40
 800638a:	f102 0004 	add.w	r0, r2, #4
 800638e:	6018      	str	r0, [r3, #0]
 8006390:	6813      	ldr	r3, [r2, #0]
 8006392:	d0f6      	beq.n	8006382 <_printf_i+0x1a6>
 8006394:	8019      	strh	r1, [r3, #0]
 8006396:	2300      	movs	r3, #0
 8006398:	6123      	str	r3, [r4, #16]
 800639a:	4675      	mov	r5, lr
 800639c:	e7b1      	b.n	8006302 <_printf_i+0x126>
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	1d11      	adds	r1, r2, #4
 80063a2:	6019      	str	r1, [r3, #0]
 80063a4:	6815      	ldr	r5, [r2, #0]
 80063a6:	6862      	ldr	r2, [r4, #4]
 80063a8:	2100      	movs	r1, #0
 80063aa:	4628      	mov	r0, r5
 80063ac:	f7f9 ff10 	bl	80001d0 <memchr>
 80063b0:	b108      	cbz	r0, 80063b6 <_printf_i+0x1da>
 80063b2:	1b40      	subs	r0, r0, r5
 80063b4:	6060      	str	r0, [r4, #4]
 80063b6:	6863      	ldr	r3, [r4, #4]
 80063b8:	6123      	str	r3, [r4, #16]
 80063ba:	2300      	movs	r3, #0
 80063bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063c0:	e79f      	b.n	8006302 <_printf_i+0x126>
 80063c2:	6923      	ldr	r3, [r4, #16]
 80063c4:	462a      	mov	r2, r5
 80063c6:	4639      	mov	r1, r7
 80063c8:	4630      	mov	r0, r6
 80063ca:	47c0      	blx	r8
 80063cc:	3001      	adds	r0, #1
 80063ce:	d0a2      	beq.n	8006316 <_printf_i+0x13a>
 80063d0:	6823      	ldr	r3, [r4, #0]
 80063d2:	079b      	lsls	r3, r3, #30
 80063d4:	d507      	bpl.n	80063e6 <_printf_i+0x20a>
 80063d6:	2500      	movs	r5, #0
 80063d8:	f104 0919 	add.w	r9, r4, #25
 80063dc:	68e3      	ldr	r3, [r4, #12]
 80063de:	9a03      	ldr	r2, [sp, #12]
 80063e0:	1a9b      	subs	r3, r3, r2
 80063e2:	429d      	cmp	r5, r3
 80063e4:	db05      	blt.n	80063f2 <_printf_i+0x216>
 80063e6:	68e0      	ldr	r0, [r4, #12]
 80063e8:	9b03      	ldr	r3, [sp, #12]
 80063ea:	4298      	cmp	r0, r3
 80063ec:	bfb8      	it	lt
 80063ee:	4618      	movlt	r0, r3
 80063f0:	e793      	b.n	800631a <_printf_i+0x13e>
 80063f2:	2301      	movs	r3, #1
 80063f4:	464a      	mov	r2, r9
 80063f6:	4639      	mov	r1, r7
 80063f8:	4630      	mov	r0, r6
 80063fa:	47c0      	blx	r8
 80063fc:	3001      	adds	r0, #1
 80063fe:	d08a      	beq.n	8006316 <_printf_i+0x13a>
 8006400:	3501      	adds	r5, #1
 8006402:	e7eb      	b.n	80063dc <_printf_i+0x200>
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1a7      	bne.n	8006358 <_printf_i+0x17c>
 8006408:	780b      	ldrb	r3, [r1, #0]
 800640a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800640e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006412:	e765      	b.n	80062e0 <_printf_i+0x104>
 8006414:	08006c06 	.word	0x08006c06
 8006418:	08006bf5 	.word	0x08006bf5

0800641c <_sbrk_r>:
 800641c:	b538      	push	{r3, r4, r5, lr}
 800641e:	4c06      	ldr	r4, [pc, #24]	; (8006438 <_sbrk_r+0x1c>)
 8006420:	2300      	movs	r3, #0
 8006422:	4605      	mov	r5, r0
 8006424:	4608      	mov	r0, r1
 8006426:	6023      	str	r3, [r4, #0]
 8006428:	f000 fb02 	bl	8006a30 <_sbrk>
 800642c:	1c43      	adds	r3, r0, #1
 800642e:	d102      	bne.n	8006436 <_sbrk_r+0x1a>
 8006430:	6823      	ldr	r3, [r4, #0]
 8006432:	b103      	cbz	r3, 8006436 <_sbrk_r+0x1a>
 8006434:	602b      	str	r3, [r5, #0]
 8006436:	bd38      	pop	{r3, r4, r5, pc}
 8006438:	200029bc 	.word	0x200029bc

0800643c <__sread>:
 800643c:	b510      	push	{r4, lr}
 800643e:	460c      	mov	r4, r1
 8006440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006444:	f000 fa98 	bl	8006978 <_read_r>
 8006448:	2800      	cmp	r0, #0
 800644a:	bfab      	itete	ge
 800644c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800644e:	89a3      	ldrhlt	r3, [r4, #12]
 8006450:	181b      	addge	r3, r3, r0
 8006452:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006456:	bfac      	ite	ge
 8006458:	6563      	strge	r3, [r4, #84]	; 0x54
 800645a:	81a3      	strhlt	r3, [r4, #12]
 800645c:	bd10      	pop	{r4, pc}

0800645e <__swrite>:
 800645e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006462:	461f      	mov	r7, r3
 8006464:	898b      	ldrh	r3, [r1, #12]
 8006466:	05db      	lsls	r3, r3, #23
 8006468:	4605      	mov	r5, r0
 800646a:	460c      	mov	r4, r1
 800646c:	4616      	mov	r6, r2
 800646e:	d505      	bpl.n	800647c <__swrite+0x1e>
 8006470:	2302      	movs	r3, #2
 8006472:	2200      	movs	r2, #0
 8006474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006478:	f000 f9b8 	bl	80067ec <_lseek_r>
 800647c:	89a3      	ldrh	r3, [r4, #12]
 800647e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006482:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006486:	81a3      	strh	r3, [r4, #12]
 8006488:	4632      	mov	r2, r6
 800648a:	463b      	mov	r3, r7
 800648c:	4628      	mov	r0, r5
 800648e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006492:	f000 b869 	b.w	8006568 <_write_r>

08006496 <__sseek>:
 8006496:	b510      	push	{r4, lr}
 8006498:	460c      	mov	r4, r1
 800649a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800649e:	f000 f9a5 	bl	80067ec <_lseek_r>
 80064a2:	1c43      	adds	r3, r0, #1
 80064a4:	89a3      	ldrh	r3, [r4, #12]
 80064a6:	bf15      	itete	ne
 80064a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80064aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80064ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80064b2:	81a3      	strheq	r3, [r4, #12]
 80064b4:	bf18      	it	ne
 80064b6:	81a3      	strhne	r3, [r4, #12]
 80064b8:	bd10      	pop	{r4, pc}

080064ba <__sclose>:
 80064ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064be:	f000 b8d3 	b.w	8006668 <_close_r>
	...

080064c4 <__swbuf_r>:
 80064c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c6:	460e      	mov	r6, r1
 80064c8:	4614      	mov	r4, r2
 80064ca:	4605      	mov	r5, r0
 80064cc:	b118      	cbz	r0, 80064d6 <__swbuf_r+0x12>
 80064ce:	6983      	ldr	r3, [r0, #24]
 80064d0:	b90b      	cbnz	r3, 80064d6 <__swbuf_r+0x12>
 80064d2:	f7ff fbe5 	bl	8005ca0 <__sinit>
 80064d6:	4b21      	ldr	r3, [pc, #132]	; (800655c <__swbuf_r+0x98>)
 80064d8:	429c      	cmp	r4, r3
 80064da:	d12a      	bne.n	8006532 <__swbuf_r+0x6e>
 80064dc:	686c      	ldr	r4, [r5, #4]
 80064de:	69a3      	ldr	r3, [r4, #24]
 80064e0:	60a3      	str	r3, [r4, #8]
 80064e2:	89a3      	ldrh	r3, [r4, #12]
 80064e4:	071a      	lsls	r2, r3, #28
 80064e6:	d52e      	bpl.n	8006546 <__swbuf_r+0x82>
 80064e8:	6923      	ldr	r3, [r4, #16]
 80064ea:	b363      	cbz	r3, 8006546 <__swbuf_r+0x82>
 80064ec:	6923      	ldr	r3, [r4, #16]
 80064ee:	6820      	ldr	r0, [r4, #0]
 80064f0:	1ac0      	subs	r0, r0, r3
 80064f2:	6963      	ldr	r3, [r4, #20]
 80064f4:	b2f6      	uxtb	r6, r6
 80064f6:	4298      	cmp	r0, r3
 80064f8:	4637      	mov	r7, r6
 80064fa:	db04      	blt.n	8006506 <__swbuf_r+0x42>
 80064fc:	4621      	mov	r1, r4
 80064fe:	4628      	mov	r0, r5
 8006500:	f000 f94a 	bl	8006798 <_fflush_r>
 8006504:	bb28      	cbnz	r0, 8006552 <__swbuf_r+0x8e>
 8006506:	68a3      	ldr	r3, [r4, #8]
 8006508:	3b01      	subs	r3, #1
 800650a:	60a3      	str	r3, [r4, #8]
 800650c:	6823      	ldr	r3, [r4, #0]
 800650e:	1c5a      	adds	r2, r3, #1
 8006510:	6022      	str	r2, [r4, #0]
 8006512:	701e      	strb	r6, [r3, #0]
 8006514:	6963      	ldr	r3, [r4, #20]
 8006516:	3001      	adds	r0, #1
 8006518:	4298      	cmp	r0, r3
 800651a:	d004      	beq.n	8006526 <__swbuf_r+0x62>
 800651c:	89a3      	ldrh	r3, [r4, #12]
 800651e:	07db      	lsls	r3, r3, #31
 8006520:	d519      	bpl.n	8006556 <__swbuf_r+0x92>
 8006522:	2e0a      	cmp	r6, #10
 8006524:	d117      	bne.n	8006556 <__swbuf_r+0x92>
 8006526:	4621      	mov	r1, r4
 8006528:	4628      	mov	r0, r5
 800652a:	f000 f935 	bl	8006798 <_fflush_r>
 800652e:	b190      	cbz	r0, 8006556 <__swbuf_r+0x92>
 8006530:	e00f      	b.n	8006552 <__swbuf_r+0x8e>
 8006532:	4b0b      	ldr	r3, [pc, #44]	; (8006560 <__swbuf_r+0x9c>)
 8006534:	429c      	cmp	r4, r3
 8006536:	d101      	bne.n	800653c <__swbuf_r+0x78>
 8006538:	68ac      	ldr	r4, [r5, #8]
 800653a:	e7d0      	b.n	80064de <__swbuf_r+0x1a>
 800653c:	4b09      	ldr	r3, [pc, #36]	; (8006564 <__swbuf_r+0xa0>)
 800653e:	429c      	cmp	r4, r3
 8006540:	bf08      	it	eq
 8006542:	68ec      	ldreq	r4, [r5, #12]
 8006544:	e7cb      	b.n	80064de <__swbuf_r+0x1a>
 8006546:	4621      	mov	r1, r4
 8006548:	4628      	mov	r0, r5
 800654a:	f000 f81f 	bl	800658c <__swsetup_r>
 800654e:	2800      	cmp	r0, #0
 8006550:	d0cc      	beq.n	80064ec <__swbuf_r+0x28>
 8006552:	f04f 37ff 	mov.w	r7, #4294967295
 8006556:	4638      	mov	r0, r7
 8006558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800655a:	bf00      	nop
 800655c:	08006ba0 	.word	0x08006ba0
 8006560:	08006bc0 	.word	0x08006bc0
 8006564:	08006b80 	.word	0x08006b80

08006568 <_write_r>:
 8006568:	b538      	push	{r3, r4, r5, lr}
 800656a:	4c07      	ldr	r4, [pc, #28]	; (8006588 <_write_r+0x20>)
 800656c:	4605      	mov	r5, r0
 800656e:	4608      	mov	r0, r1
 8006570:	4611      	mov	r1, r2
 8006572:	2200      	movs	r2, #0
 8006574:	6022      	str	r2, [r4, #0]
 8006576:	461a      	mov	r2, r3
 8006578:	f7fe ffc8 	bl	800550c <_write>
 800657c:	1c43      	adds	r3, r0, #1
 800657e:	d102      	bne.n	8006586 <_write_r+0x1e>
 8006580:	6823      	ldr	r3, [r4, #0]
 8006582:	b103      	cbz	r3, 8006586 <_write_r+0x1e>
 8006584:	602b      	str	r3, [r5, #0]
 8006586:	bd38      	pop	{r3, r4, r5, pc}
 8006588:	200029bc 	.word	0x200029bc

0800658c <__swsetup_r>:
 800658c:	4b32      	ldr	r3, [pc, #200]	; (8006658 <__swsetup_r+0xcc>)
 800658e:	b570      	push	{r4, r5, r6, lr}
 8006590:	681d      	ldr	r5, [r3, #0]
 8006592:	4606      	mov	r6, r0
 8006594:	460c      	mov	r4, r1
 8006596:	b125      	cbz	r5, 80065a2 <__swsetup_r+0x16>
 8006598:	69ab      	ldr	r3, [r5, #24]
 800659a:	b913      	cbnz	r3, 80065a2 <__swsetup_r+0x16>
 800659c:	4628      	mov	r0, r5
 800659e:	f7ff fb7f 	bl	8005ca0 <__sinit>
 80065a2:	4b2e      	ldr	r3, [pc, #184]	; (800665c <__swsetup_r+0xd0>)
 80065a4:	429c      	cmp	r4, r3
 80065a6:	d10f      	bne.n	80065c8 <__swsetup_r+0x3c>
 80065a8:	686c      	ldr	r4, [r5, #4]
 80065aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	0715      	lsls	r5, r2, #28
 80065b2:	d42c      	bmi.n	800660e <__swsetup_r+0x82>
 80065b4:	06d0      	lsls	r0, r2, #27
 80065b6:	d411      	bmi.n	80065dc <__swsetup_r+0x50>
 80065b8:	2209      	movs	r2, #9
 80065ba:	6032      	str	r2, [r6, #0]
 80065bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065c0:	81a3      	strh	r3, [r4, #12]
 80065c2:	f04f 30ff 	mov.w	r0, #4294967295
 80065c6:	bd70      	pop	{r4, r5, r6, pc}
 80065c8:	4b25      	ldr	r3, [pc, #148]	; (8006660 <__swsetup_r+0xd4>)
 80065ca:	429c      	cmp	r4, r3
 80065cc:	d101      	bne.n	80065d2 <__swsetup_r+0x46>
 80065ce:	68ac      	ldr	r4, [r5, #8]
 80065d0:	e7eb      	b.n	80065aa <__swsetup_r+0x1e>
 80065d2:	4b24      	ldr	r3, [pc, #144]	; (8006664 <__swsetup_r+0xd8>)
 80065d4:	429c      	cmp	r4, r3
 80065d6:	bf08      	it	eq
 80065d8:	68ec      	ldreq	r4, [r5, #12]
 80065da:	e7e6      	b.n	80065aa <__swsetup_r+0x1e>
 80065dc:	0751      	lsls	r1, r2, #29
 80065de:	d512      	bpl.n	8006606 <__swsetup_r+0x7a>
 80065e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065e2:	b141      	cbz	r1, 80065f6 <__swsetup_r+0x6a>
 80065e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065e8:	4299      	cmp	r1, r3
 80065ea:	d002      	beq.n	80065f2 <__swsetup_r+0x66>
 80065ec:	4630      	mov	r0, r6
 80065ee:	f000 f975 	bl	80068dc <_free_r>
 80065f2:	2300      	movs	r3, #0
 80065f4:	6363      	str	r3, [r4, #52]	; 0x34
 80065f6:	89a3      	ldrh	r3, [r4, #12]
 80065f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80065fc:	81a3      	strh	r3, [r4, #12]
 80065fe:	2300      	movs	r3, #0
 8006600:	6063      	str	r3, [r4, #4]
 8006602:	6923      	ldr	r3, [r4, #16]
 8006604:	6023      	str	r3, [r4, #0]
 8006606:	89a3      	ldrh	r3, [r4, #12]
 8006608:	f043 0308 	orr.w	r3, r3, #8
 800660c:	81a3      	strh	r3, [r4, #12]
 800660e:	6923      	ldr	r3, [r4, #16]
 8006610:	b94b      	cbnz	r3, 8006626 <__swsetup_r+0x9a>
 8006612:	89a3      	ldrh	r3, [r4, #12]
 8006614:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800661c:	d003      	beq.n	8006626 <__swsetup_r+0x9a>
 800661e:	4621      	mov	r1, r4
 8006620:	4630      	mov	r0, r6
 8006622:	f000 f919 	bl	8006858 <__smakebuf_r>
 8006626:	89a2      	ldrh	r2, [r4, #12]
 8006628:	f012 0301 	ands.w	r3, r2, #1
 800662c:	d00c      	beq.n	8006648 <__swsetup_r+0xbc>
 800662e:	2300      	movs	r3, #0
 8006630:	60a3      	str	r3, [r4, #8]
 8006632:	6963      	ldr	r3, [r4, #20]
 8006634:	425b      	negs	r3, r3
 8006636:	61a3      	str	r3, [r4, #24]
 8006638:	6923      	ldr	r3, [r4, #16]
 800663a:	b953      	cbnz	r3, 8006652 <__swsetup_r+0xc6>
 800663c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006640:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006644:	d1ba      	bne.n	80065bc <__swsetup_r+0x30>
 8006646:	bd70      	pop	{r4, r5, r6, pc}
 8006648:	0792      	lsls	r2, r2, #30
 800664a:	bf58      	it	pl
 800664c:	6963      	ldrpl	r3, [r4, #20]
 800664e:	60a3      	str	r3, [r4, #8]
 8006650:	e7f2      	b.n	8006638 <__swsetup_r+0xac>
 8006652:	2000      	movs	r0, #0
 8006654:	e7f7      	b.n	8006646 <__swsetup_r+0xba>
 8006656:	bf00      	nop
 8006658:	20000008 	.word	0x20000008
 800665c:	08006ba0 	.word	0x08006ba0
 8006660:	08006bc0 	.word	0x08006bc0
 8006664:	08006b80 	.word	0x08006b80

08006668 <_close_r>:
 8006668:	b538      	push	{r3, r4, r5, lr}
 800666a:	4c06      	ldr	r4, [pc, #24]	; (8006684 <_close_r+0x1c>)
 800666c:	2300      	movs	r3, #0
 800666e:	4605      	mov	r5, r0
 8006670:	4608      	mov	r0, r1
 8006672:	6023      	str	r3, [r4, #0]
 8006674:	f000 f9b4 	bl	80069e0 <_close>
 8006678:	1c43      	adds	r3, r0, #1
 800667a:	d102      	bne.n	8006682 <_close_r+0x1a>
 800667c:	6823      	ldr	r3, [r4, #0]
 800667e:	b103      	cbz	r3, 8006682 <_close_r+0x1a>
 8006680:	602b      	str	r3, [r5, #0]
 8006682:	bd38      	pop	{r3, r4, r5, pc}
 8006684:	200029bc 	.word	0x200029bc

08006688 <__sflush_r>:
 8006688:	898a      	ldrh	r2, [r1, #12]
 800668a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800668e:	4605      	mov	r5, r0
 8006690:	0710      	lsls	r0, r2, #28
 8006692:	460c      	mov	r4, r1
 8006694:	d45a      	bmi.n	800674c <__sflush_r+0xc4>
 8006696:	684b      	ldr	r3, [r1, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	dc05      	bgt.n	80066a8 <__sflush_r+0x20>
 800669c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800669e:	2b00      	cmp	r3, #0
 80066a0:	dc02      	bgt.n	80066a8 <__sflush_r+0x20>
 80066a2:	2000      	movs	r0, #0
 80066a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066aa:	2e00      	cmp	r6, #0
 80066ac:	d0f9      	beq.n	80066a2 <__sflush_r+0x1a>
 80066ae:	2300      	movs	r3, #0
 80066b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80066b4:	682f      	ldr	r7, [r5, #0]
 80066b6:	602b      	str	r3, [r5, #0]
 80066b8:	d033      	beq.n	8006722 <__sflush_r+0x9a>
 80066ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066bc:	89a3      	ldrh	r3, [r4, #12]
 80066be:	075a      	lsls	r2, r3, #29
 80066c0:	d505      	bpl.n	80066ce <__sflush_r+0x46>
 80066c2:	6863      	ldr	r3, [r4, #4]
 80066c4:	1ac0      	subs	r0, r0, r3
 80066c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066c8:	b10b      	cbz	r3, 80066ce <__sflush_r+0x46>
 80066ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066cc:	1ac0      	subs	r0, r0, r3
 80066ce:	2300      	movs	r3, #0
 80066d0:	4602      	mov	r2, r0
 80066d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066d4:	6a21      	ldr	r1, [r4, #32]
 80066d6:	4628      	mov	r0, r5
 80066d8:	47b0      	blx	r6
 80066da:	1c43      	adds	r3, r0, #1
 80066dc:	89a3      	ldrh	r3, [r4, #12]
 80066de:	d106      	bne.n	80066ee <__sflush_r+0x66>
 80066e0:	6829      	ldr	r1, [r5, #0]
 80066e2:	291d      	cmp	r1, #29
 80066e4:	d84b      	bhi.n	800677e <__sflush_r+0xf6>
 80066e6:	4a2b      	ldr	r2, [pc, #172]	; (8006794 <__sflush_r+0x10c>)
 80066e8:	40ca      	lsrs	r2, r1
 80066ea:	07d6      	lsls	r6, r2, #31
 80066ec:	d547      	bpl.n	800677e <__sflush_r+0xf6>
 80066ee:	2200      	movs	r2, #0
 80066f0:	6062      	str	r2, [r4, #4]
 80066f2:	04d9      	lsls	r1, r3, #19
 80066f4:	6922      	ldr	r2, [r4, #16]
 80066f6:	6022      	str	r2, [r4, #0]
 80066f8:	d504      	bpl.n	8006704 <__sflush_r+0x7c>
 80066fa:	1c42      	adds	r2, r0, #1
 80066fc:	d101      	bne.n	8006702 <__sflush_r+0x7a>
 80066fe:	682b      	ldr	r3, [r5, #0]
 8006700:	b903      	cbnz	r3, 8006704 <__sflush_r+0x7c>
 8006702:	6560      	str	r0, [r4, #84]	; 0x54
 8006704:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006706:	602f      	str	r7, [r5, #0]
 8006708:	2900      	cmp	r1, #0
 800670a:	d0ca      	beq.n	80066a2 <__sflush_r+0x1a>
 800670c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006710:	4299      	cmp	r1, r3
 8006712:	d002      	beq.n	800671a <__sflush_r+0x92>
 8006714:	4628      	mov	r0, r5
 8006716:	f000 f8e1 	bl	80068dc <_free_r>
 800671a:	2000      	movs	r0, #0
 800671c:	6360      	str	r0, [r4, #52]	; 0x34
 800671e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006722:	6a21      	ldr	r1, [r4, #32]
 8006724:	2301      	movs	r3, #1
 8006726:	4628      	mov	r0, r5
 8006728:	47b0      	blx	r6
 800672a:	1c41      	adds	r1, r0, #1
 800672c:	d1c6      	bne.n	80066bc <__sflush_r+0x34>
 800672e:	682b      	ldr	r3, [r5, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d0c3      	beq.n	80066bc <__sflush_r+0x34>
 8006734:	2b1d      	cmp	r3, #29
 8006736:	d001      	beq.n	800673c <__sflush_r+0xb4>
 8006738:	2b16      	cmp	r3, #22
 800673a:	d101      	bne.n	8006740 <__sflush_r+0xb8>
 800673c:	602f      	str	r7, [r5, #0]
 800673e:	e7b0      	b.n	80066a2 <__sflush_r+0x1a>
 8006740:	89a3      	ldrh	r3, [r4, #12]
 8006742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006746:	81a3      	strh	r3, [r4, #12]
 8006748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800674c:	690f      	ldr	r7, [r1, #16]
 800674e:	2f00      	cmp	r7, #0
 8006750:	d0a7      	beq.n	80066a2 <__sflush_r+0x1a>
 8006752:	0793      	lsls	r3, r2, #30
 8006754:	680e      	ldr	r6, [r1, #0]
 8006756:	bf08      	it	eq
 8006758:	694b      	ldreq	r3, [r1, #20]
 800675a:	600f      	str	r7, [r1, #0]
 800675c:	bf18      	it	ne
 800675e:	2300      	movne	r3, #0
 8006760:	eba6 0807 	sub.w	r8, r6, r7
 8006764:	608b      	str	r3, [r1, #8]
 8006766:	f1b8 0f00 	cmp.w	r8, #0
 800676a:	dd9a      	ble.n	80066a2 <__sflush_r+0x1a>
 800676c:	4643      	mov	r3, r8
 800676e:	463a      	mov	r2, r7
 8006770:	6a21      	ldr	r1, [r4, #32]
 8006772:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006774:	4628      	mov	r0, r5
 8006776:	47b0      	blx	r6
 8006778:	2800      	cmp	r0, #0
 800677a:	dc07      	bgt.n	800678c <__sflush_r+0x104>
 800677c:	89a3      	ldrh	r3, [r4, #12]
 800677e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006782:	81a3      	strh	r3, [r4, #12]
 8006784:	f04f 30ff 	mov.w	r0, #4294967295
 8006788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800678c:	4407      	add	r7, r0
 800678e:	eba8 0800 	sub.w	r8, r8, r0
 8006792:	e7e8      	b.n	8006766 <__sflush_r+0xde>
 8006794:	20400001 	.word	0x20400001

08006798 <_fflush_r>:
 8006798:	b538      	push	{r3, r4, r5, lr}
 800679a:	690b      	ldr	r3, [r1, #16]
 800679c:	4605      	mov	r5, r0
 800679e:	460c      	mov	r4, r1
 80067a0:	b1db      	cbz	r3, 80067da <_fflush_r+0x42>
 80067a2:	b118      	cbz	r0, 80067ac <_fflush_r+0x14>
 80067a4:	6983      	ldr	r3, [r0, #24]
 80067a6:	b90b      	cbnz	r3, 80067ac <_fflush_r+0x14>
 80067a8:	f7ff fa7a 	bl	8005ca0 <__sinit>
 80067ac:	4b0c      	ldr	r3, [pc, #48]	; (80067e0 <_fflush_r+0x48>)
 80067ae:	429c      	cmp	r4, r3
 80067b0:	d109      	bne.n	80067c6 <_fflush_r+0x2e>
 80067b2:	686c      	ldr	r4, [r5, #4]
 80067b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067b8:	b17b      	cbz	r3, 80067da <_fflush_r+0x42>
 80067ba:	4621      	mov	r1, r4
 80067bc:	4628      	mov	r0, r5
 80067be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067c2:	f7ff bf61 	b.w	8006688 <__sflush_r>
 80067c6:	4b07      	ldr	r3, [pc, #28]	; (80067e4 <_fflush_r+0x4c>)
 80067c8:	429c      	cmp	r4, r3
 80067ca:	d101      	bne.n	80067d0 <_fflush_r+0x38>
 80067cc:	68ac      	ldr	r4, [r5, #8]
 80067ce:	e7f1      	b.n	80067b4 <_fflush_r+0x1c>
 80067d0:	4b05      	ldr	r3, [pc, #20]	; (80067e8 <_fflush_r+0x50>)
 80067d2:	429c      	cmp	r4, r3
 80067d4:	bf08      	it	eq
 80067d6:	68ec      	ldreq	r4, [r5, #12]
 80067d8:	e7ec      	b.n	80067b4 <_fflush_r+0x1c>
 80067da:	2000      	movs	r0, #0
 80067dc:	bd38      	pop	{r3, r4, r5, pc}
 80067de:	bf00      	nop
 80067e0:	08006ba0 	.word	0x08006ba0
 80067e4:	08006bc0 	.word	0x08006bc0
 80067e8:	08006b80 	.word	0x08006b80

080067ec <_lseek_r>:
 80067ec:	b538      	push	{r3, r4, r5, lr}
 80067ee:	4c07      	ldr	r4, [pc, #28]	; (800680c <_lseek_r+0x20>)
 80067f0:	4605      	mov	r5, r0
 80067f2:	4608      	mov	r0, r1
 80067f4:	4611      	mov	r1, r2
 80067f6:	2200      	movs	r2, #0
 80067f8:	6022      	str	r2, [r4, #0]
 80067fa:	461a      	mov	r2, r3
 80067fc:	f000 f908 	bl	8006a10 <_lseek>
 8006800:	1c43      	adds	r3, r0, #1
 8006802:	d102      	bne.n	800680a <_lseek_r+0x1e>
 8006804:	6823      	ldr	r3, [r4, #0]
 8006806:	b103      	cbz	r3, 800680a <_lseek_r+0x1e>
 8006808:	602b      	str	r3, [r5, #0]
 800680a:	bd38      	pop	{r3, r4, r5, pc}
 800680c:	200029bc 	.word	0x200029bc

08006810 <__swhatbuf_r>:
 8006810:	b570      	push	{r4, r5, r6, lr}
 8006812:	460e      	mov	r6, r1
 8006814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006818:	2900      	cmp	r1, #0
 800681a:	b090      	sub	sp, #64	; 0x40
 800681c:	4614      	mov	r4, r2
 800681e:	461d      	mov	r5, r3
 8006820:	da07      	bge.n	8006832 <__swhatbuf_r+0x22>
 8006822:	2300      	movs	r3, #0
 8006824:	602b      	str	r3, [r5, #0]
 8006826:	89b3      	ldrh	r3, [r6, #12]
 8006828:	061a      	lsls	r2, r3, #24
 800682a:	d410      	bmi.n	800684e <__swhatbuf_r+0x3e>
 800682c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006830:	e00e      	b.n	8006850 <__swhatbuf_r+0x40>
 8006832:	aa01      	add	r2, sp, #4
 8006834:	f000 f8b2 	bl	800699c <_fstat_r>
 8006838:	2800      	cmp	r0, #0
 800683a:	dbf2      	blt.n	8006822 <__swhatbuf_r+0x12>
 800683c:	9a02      	ldr	r2, [sp, #8]
 800683e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006842:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006846:	425a      	negs	r2, r3
 8006848:	415a      	adcs	r2, r3
 800684a:	602a      	str	r2, [r5, #0]
 800684c:	e7ee      	b.n	800682c <__swhatbuf_r+0x1c>
 800684e:	2340      	movs	r3, #64	; 0x40
 8006850:	2000      	movs	r0, #0
 8006852:	6023      	str	r3, [r4, #0]
 8006854:	b010      	add	sp, #64	; 0x40
 8006856:	bd70      	pop	{r4, r5, r6, pc}

08006858 <__smakebuf_r>:
 8006858:	898b      	ldrh	r3, [r1, #12]
 800685a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800685c:	079d      	lsls	r5, r3, #30
 800685e:	4606      	mov	r6, r0
 8006860:	460c      	mov	r4, r1
 8006862:	d507      	bpl.n	8006874 <__smakebuf_r+0x1c>
 8006864:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006868:	6023      	str	r3, [r4, #0]
 800686a:	6123      	str	r3, [r4, #16]
 800686c:	2301      	movs	r3, #1
 800686e:	6163      	str	r3, [r4, #20]
 8006870:	b002      	add	sp, #8
 8006872:	bd70      	pop	{r4, r5, r6, pc}
 8006874:	ab01      	add	r3, sp, #4
 8006876:	466a      	mov	r2, sp
 8006878:	f7ff ffca 	bl	8006810 <__swhatbuf_r>
 800687c:	9900      	ldr	r1, [sp, #0]
 800687e:	4605      	mov	r5, r0
 8006880:	4630      	mov	r0, r6
 8006882:	f7ff fa97 	bl	8005db4 <_malloc_r>
 8006886:	b948      	cbnz	r0, 800689c <__smakebuf_r+0x44>
 8006888:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800688c:	059a      	lsls	r2, r3, #22
 800688e:	d4ef      	bmi.n	8006870 <__smakebuf_r+0x18>
 8006890:	f023 0303 	bic.w	r3, r3, #3
 8006894:	f043 0302 	orr.w	r3, r3, #2
 8006898:	81a3      	strh	r3, [r4, #12]
 800689a:	e7e3      	b.n	8006864 <__smakebuf_r+0xc>
 800689c:	4b0d      	ldr	r3, [pc, #52]	; (80068d4 <__smakebuf_r+0x7c>)
 800689e:	62b3      	str	r3, [r6, #40]	; 0x28
 80068a0:	89a3      	ldrh	r3, [r4, #12]
 80068a2:	6020      	str	r0, [r4, #0]
 80068a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068a8:	81a3      	strh	r3, [r4, #12]
 80068aa:	9b00      	ldr	r3, [sp, #0]
 80068ac:	6163      	str	r3, [r4, #20]
 80068ae:	9b01      	ldr	r3, [sp, #4]
 80068b0:	6120      	str	r0, [r4, #16]
 80068b2:	b15b      	cbz	r3, 80068cc <__smakebuf_r+0x74>
 80068b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068b8:	4630      	mov	r0, r6
 80068ba:	f000 f881 	bl	80069c0 <_isatty_r>
 80068be:	b128      	cbz	r0, 80068cc <__smakebuf_r+0x74>
 80068c0:	89a3      	ldrh	r3, [r4, #12]
 80068c2:	f023 0303 	bic.w	r3, r3, #3
 80068c6:	f043 0301 	orr.w	r3, r3, #1
 80068ca:	81a3      	strh	r3, [r4, #12]
 80068cc:	89a3      	ldrh	r3, [r4, #12]
 80068ce:	431d      	orrs	r5, r3
 80068d0:	81a5      	strh	r5, [r4, #12]
 80068d2:	e7cd      	b.n	8006870 <__smakebuf_r+0x18>
 80068d4:	08005c21 	.word	0x08005c21

080068d8 <__malloc_lock>:
 80068d8:	4770      	bx	lr

080068da <__malloc_unlock>:
 80068da:	4770      	bx	lr

080068dc <_free_r>:
 80068dc:	b538      	push	{r3, r4, r5, lr}
 80068de:	4605      	mov	r5, r0
 80068e0:	2900      	cmp	r1, #0
 80068e2:	d045      	beq.n	8006970 <_free_r+0x94>
 80068e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068e8:	1f0c      	subs	r4, r1, #4
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	bfb8      	it	lt
 80068ee:	18e4      	addlt	r4, r4, r3
 80068f0:	f7ff fff2 	bl	80068d8 <__malloc_lock>
 80068f4:	4a1f      	ldr	r2, [pc, #124]	; (8006974 <_free_r+0x98>)
 80068f6:	6813      	ldr	r3, [r2, #0]
 80068f8:	4610      	mov	r0, r2
 80068fa:	b933      	cbnz	r3, 800690a <_free_r+0x2e>
 80068fc:	6063      	str	r3, [r4, #4]
 80068fe:	6014      	str	r4, [r2, #0]
 8006900:	4628      	mov	r0, r5
 8006902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006906:	f7ff bfe8 	b.w	80068da <__malloc_unlock>
 800690a:	42a3      	cmp	r3, r4
 800690c:	d90c      	bls.n	8006928 <_free_r+0x4c>
 800690e:	6821      	ldr	r1, [r4, #0]
 8006910:	1862      	adds	r2, r4, r1
 8006912:	4293      	cmp	r3, r2
 8006914:	bf04      	itt	eq
 8006916:	681a      	ldreq	r2, [r3, #0]
 8006918:	685b      	ldreq	r3, [r3, #4]
 800691a:	6063      	str	r3, [r4, #4]
 800691c:	bf04      	itt	eq
 800691e:	1852      	addeq	r2, r2, r1
 8006920:	6022      	streq	r2, [r4, #0]
 8006922:	6004      	str	r4, [r0, #0]
 8006924:	e7ec      	b.n	8006900 <_free_r+0x24>
 8006926:	4613      	mov	r3, r2
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	b10a      	cbz	r2, 8006930 <_free_r+0x54>
 800692c:	42a2      	cmp	r2, r4
 800692e:	d9fa      	bls.n	8006926 <_free_r+0x4a>
 8006930:	6819      	ldr	r1, [r3, #0]
 8006932:	1858      	adds	r0, r3, r1
 8006934:	42a0      	cmp	r0, r4
 8006936:	d10b      	bne.n	8006950 <_free_r+0x74>
 8006938:	6820      	ldr	r0, [r4, #0]
 800693a:	4401      	add	r1, r0
 800693c:	1858      	adds	r0, r3, r1
 800693e:	4282      	cmp	r2, r0
 8006940:	6019      	str	r1, [r3, #0]
 8006942:	d1dd      	bne.n	8006900 <_free_r+0x24>
 8006944:	6810      	ldr	r0, [r2, #0]
 8006946:	6852      	ldr	r2, [r2, #4]
 8006948:	605a      	str	r2, [r3, #4]
 800694a:	4401      	add	r1, r0
 800694c:	6019      	str	r1, [r3, #0]
 800694e:	e7d7      	b.n	8006900 <_free_r+0x24>
 8006950:	d902      	bls.n	8006958 <_free_r+0x7c>
 8006952:	230c      	movs	r3, #12
 8006954:	602b      	str	r3, [r5, #0]
 8006956:	e7d3      	b.n	8006900 <_free_r+0x24>
 8006958:	6820      	ldr	r0, [r4, #0]
 800695a:	1821      	adds	r1, r4, r0
 800695c:	428a      	cmp	r2, r1
 800695e:	bf04      	itt	eq
 8006960:	6811      	ldreq	r1, [r2, #0]
 8006962:	6852      	ldreq	r2, [r2, #4]
 8006964:	6062      	str	r2, [r4, #4]
 8006966:	bf04      	itt	eq
 8006968:	1809      	addeq	r1, r1, r0
 800696a:	6021      	streq	r1, [r4, #0]
 800696c:	605c      	str	r4, [r3, #4]
 800696e:	e7c7      	b.n	8006900 <_free_r+0x24>
 8006970:	bd38      	pop	{r3, r4, r5, pc}
 8006972:	bf00      	nop
 8006974:	200028e4 	.word	0x200028e4

08006978 <_read_r>:
 8006978:	b538      	push	{r3, r4, r5, lr}
 800697a:	4c07      	ldr	r4, [pc, #28]	; (8006998 <_read_r+0x20>)
 800697c:	4605      	mov	r5, r0
 800697e:	4608      	mov	r0, r1
 8006980:	4611      	mov	r1, r2
 8006982:	2200      	movs	r2, #0
 8006984:	6022      	str	r2, [r4, #0]
 8006986:	461a      	mov	r2, r3
 8006988:	f000 f84a 	bl	8006a20 <_read>
 800698c:	1c43      	adds	r3, r0, #1
 800698e:	d102      	bne.n	8006996 <_read_r+0x1e>
 8006990:	6823      	ldr	r3, [r4, #0]
 8006992:	b103      	cbz	r3, 8006996 <_read_r+0x1e>
 8006994:	602b      	str	r3, [r5, #0]
 8006996:	bd38      	pop	{r3, r4, r5, pc}
 8006998:	200029bc 	.word	0x200029bc

0800699c <_fstat_r>:
 800699c:	b538      	push	{r3, r4, r5, lr}
 800699e:	4c07      	ldr	r4, [pc, #28]	; (80069bc <_fstat_r+0x20>)
 80069a0:	2300      	movs	r3, #0
 80069a2:	4605      	mov	r5, r0
 80069a4:	4608      	mov	r0, r1
 80069a6:	4611      	mov	r1, r2
 80069a8:	6023      	str	r3, [r4, #0]
 80069aa:	f000 f821 	bl	80069f0 <_fstat>
 80069ae:	1c43      	adds	r3, r0, #1
 80069b0:	d102      	bne.n	80069b8 <_fstat_r+0x1c>
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	b103      	cbz	r3, 80069b8 <_fstat_r+0x1c>
 80069b6:	602b      	str	r3, [r5, #0]
 80069b8:	bd38      	pop	{r3, r4, r5, pc}
 80069ba:	bf00      	nop
 80069bc:	200029bc 	.word	0x200029bc

080069c0 <_isatty_r>:
 80069c0:	b538      	push	{r3, r4, r5, lr}
 80069c2:	4c06      	ldr	r4, [pc, #24]	; (80069dc <_isatty_r+0x1c>)
 80069c4:	2300      	movs	r3, #0
 80069c6:	4605      	mov	r5, r0
 80069c8:	4608      	mov	r0, r1
 80069ca:	6023      	str	r3, [r4, #0]
 80069cc:	f000 f818 	bl	8006a00 <_isatty>
 80069d0:	1c43      	adds	r3, r0, #1
 80069d2:	d102      	bne.n	80069da <_isatty_r+0x1a>
 80069d4:	6823      	ldr	r3, [r4, #0]
 80069d6:	b103      	cbz	r3, 80069da <_isatty_r+0x1a>
 80069d8:	602b      	str	r3, [r5, #0]
 80069da:	bd38      	pop	{r3, r4, r5, pc}
 80069dc:	200029bc 	.word	0x200029bc

080069e0 <_close>:
 80069e0:	4b02      	ldr	r3, [pc, #8]	; (80069ec <_close+0xc>)
 80069e2:	2258      	movs	r2, #88	; 0x58
 80069e4:	601a      	str	r2, [r3, #0]
 80069e6:	f04f 30ff 	mov.w	r0, #4294967295
 80069ea:	4770      	bx	lr
 80069ec:	200029bc 	.word	0x200029bc

080069f0 <_fstat>:
 80069f0:	4b02      	ldr	r3, [pc, #8]	; (80069fc <_fstat+0xc>)
 80069f2:	2258      	movs	r2, #88	; 0x58
 80069f4:	601a      	str	r2, [r3, #0]
 80069f6:	f04f 30ff 	mov.w	r0, #4294967295
 80069fa:	4770      	bx	lr
 80069fc:	200029bc 	.word	0x200029bc

08006a00 <_isatty>:
 8006a00:	4b02      	ldr	r3, [pc, #8]	; (8006a0c <_isatty+0xc>)
 8006a02:	2258      	movs	r2, #88	; 0x58
 8006a04:	601a      	str	r2, [r3, #0]
 8006a06:	2000      	movs	r0, #0
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	200029bc 	.word	0x200029bc

08006a10 <_lseek>:
 8006a10:	4b02      	ldr	r3, [pc, #8]	; (8006a1c <_lseek+0xc>)
 8006a12:	2258      	movs	r2, #88	; 0x58
 8006a14:	601a      	str	r2, [r3, #0]
 8006a16:	f04f 30ff 	mov.w	r0, #4294967295
 8006a1a:	4770      	bx	lr
 8006a1c:	200029bc 	.word	0x200029bc

08006a20 <_read>:
 8006a20:	4b02      	ldr	r3, [pc, #8]	; (8006a2c <_read+0xc>)
 8006a22:	2258      	movs	r2, #88	; 0x58
 8006a24:	601a      	str	r2, [r3, #0]
 8006a26:	f04f 30ff 	mov.w	r0, #4294967295
 8006a2a:	4770      	bx	lr
 8006a2c:	200029bc 	.word	0x200029bc

08006a30 <_sbrk>:
 8006a30:	4b04      	ldr	r3, [pc, #16]	; (8006a44 <_sbrk+0x14>)
 8006a32:	6819      	ldr	r1, [r3, #0]
 8006a34:	4602      	mov	r2, r0
 8006a36:	b909      	cbnz	r1, 8006a3c <_sbrk+0xc>
 8006a38:	4903      	ldr	r1, [pc, #12]	; (8006a48 <_sbrk+0x18>)
 8006a3a:	6019      	str	r1, [r3, #0]
 8006a3c:	6818      	ldr	r0, [r3, #0]
 8006a3e:	4402      	add	r2, r0
 8006a40:	601a      	str	r2, [r3, #0]
 8006a42:	4770      	bx	lr
 8006a44:	200028ec 	.word	0x200028ec
 8006a48:	200029c0 	.word	0x200029c0

08006a4c <_init>:
 8006a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a4e:	bf00      	nop
 8006a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a52:	bc08      	pop	{r3}
 8006a54:	469e      	mov	lr, r3
 8006a56:	4770      	bx	lr

08006a58 <_fini>:
 8006a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a5a:	bf00      	nop
 8006a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a5e:	bc08      	pop	{r3}
 8006a60:	469e      	mov	lr, r3
 8006a62:	4770      	bx	lr
