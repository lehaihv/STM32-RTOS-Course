
Signals_lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800301c  0800301c  0001301c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080030b0  080030b0  000130b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080030b8  080030b8  000130b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080030bc  080030bc  000130bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000008  20000000  080030c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000293c  20000008  080030c8  00020008  2**2
                  ALLOC
  8 ._user_heap_stack 00002000  20002944  080030c8  00022944  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015c32  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000306c  00000000  00000000  00035c6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a335  00000000  00000000  00038cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000ee8  00000000  00000000  00043010  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001150  00000000  00000000  00043ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000075eb  00000000  00000000  00045048  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00006077  00000000  00000000  0004c633  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000526aa  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002a30  00000000  00000000  00052728  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000008 	.word	0x20000008
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003004 	.word	0x08003004

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	08003004 	.word	0x08003004

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b97a 	b.w	80004dc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	9e08      	ldr	r6, [sp, #32]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d151      	bne.n	80002b4 <__udivmoddi4+0xb4>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d96d      	bls.n	80002f2 <__udivmoddi4+0xf2>
 8000216:	fab2 fe82 	clz	lr, r2
 800021a:	f1be 0f00 	cmp.w	lr, #0
 800021e:	d00b      	beq.n	8000238 <__udivmoddi4+0x38>
 8000220:	f1ce 0c20 	rsb	ip, lr, #32
 8000224:	fa01 f50e 	lsl.w	r5, r1, lr
 8000228:	fa20 fc0c 	lsr.w	ip, r0, ip
 800022c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000230:	ea4c 0c05 	orr.w	ip, ip, r5
 8000234:	fa00 f40e 	lsl.w	r4, r0, lr
 8000238:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800023c:	0c25      	lsrs	r5, r4, #16
 800023e:	fbbc f8fa 	udiv	r8, ip, sl
 8000242:	fa1f f987 	uxth.w	r9, r7
 8000246:	fb0a cc18 	mls	ip, sl, r8, ip
 800024a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800024e:	fb08 f309 	mul.w	r3, r8, r9
 8000252:	42ab      	cmp	r3, r5
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x6c>
 8000256:	19ed      	adds	r5, r5, r7
 8000258:	f108 32ff 	add.w	r2, r8, #4294967295
 800025c:	f080 8123 	bcs.w	80004a6 <__udivmoddi4+0x2a6>
 8000260:	42ab      	cmp	r3, r5
 8000262:	f240 8120 	bls.w	80004a6 <__udivmoddi4+0x2a6>
 8000266:	f1a8 0802 	sub.w	r8, r8, #2
 800026a:	443d      	add	r5, r7
 800026c:	1aed      	subs	r5, r5, r3
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb5 f0fa 	udiv	r0, r5, sl
 8000274:	fb0a 5510 	mls	r5, sl, r0, r5
 8000278:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800027c:	fb00 f909 	mul.w	r9, r0, r9
 8000280:	45a1      	cmp	r9, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x98>
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295
 800028a:	f080 810a 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800028e:	45a1      	cmp	r9, r4
 8000290:	f240 8107 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 8000294:	3802      	subs	r0, #2
 8000296:	443c      	add	r4, r7
 8000298:	eba4 0409 	sub.w	r4, r4, r9
 800029c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a0:	2100      	movs	r1, #0
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	d061      	beq.n	800036a <__udivmoddi4+0x16a>
 80002a6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002aa:	2300      	movs	r3, #0
 80002ac:	6034      	str	r4, [r6, #0]
 80002ae:	6073      	str	r3, [r6, #4]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d907      	bls.n	80002c8 <__udivmoddi4+0xc8>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	d054      	beq.n	8000366 <__udivmoddi4+0x166>
 80002bc:	2100      	movs	r1, #0
 80002be:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	f040 808e 	bne.w	80003ee <__udivmoddi4+0x1ee>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xdc>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2d0>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0503 	sbc.w	r5, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	46ac      	mov	ip, r5
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d03f      	beq.n	800036a <__udivmoddi4+0x16a>
 80002ea:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	b912      	cbnz	r2, 80002fa <__udivmoddi4+0xfa>
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fa:	fab7 fe87 	clz	lr, r7
 80002fe:	f1be 0f00 	cmp.w	lr, #0
 8000302:	d134      	bne.n	800036e <__udivmoddi4+0x16e>
 8000304:	1beb      	subs	r3, r5, r7
 8000306:	0c3a      	lsrs	r2, r7, #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000312:	0c25      	lsrs	r5, r4, #16
 8000314:	fb02 3318 	mls	r3, r2, r8, r3
 8000318:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800031c:	fb0c f308 	mul.w	r3, ip, r8
 8000320:	42ab      	cmp	r3, r5
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x134>
 8000324:	19ed      	adds	r5, r5, r7
 8000326:	f108 30ff 	add.w	r0, r8, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x132>
 800032c:	42ab      	cmp	r3, r5
 800032e:	f200 80d1 	bhi.w	80004d4 <__udivmoddi4+0x2d4>
 8000332:	4680      	mov	r8, r0
 8000334:	1aed      	subs	r5, r5, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb5 f0f2 	udiv	r0, r5, r2
 800033c:	fb02 5510 	mls	r5, r2, r0, r5
 8000340:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000344:	fb0c fc00 	mul.w	ip, ip, r0
 8000348:	45a4      	cmp	ip, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x15c>
 800034c:	19e4      	adds	r4, r4, r7
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x15a>
 8000354:	45a4      	cmp	ip, r4
 8000356:	f200 80b8 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 040c 	sub.w	r4, r4, ip
 8000360:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000364:	e79d      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000366:	4631      	mov	r1, r6
 8000368:	4630      	mov	r0, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	f1ce 0420 	rsb	r4, lr, #32
 8000372:	fa05 f30e 	lsl.w	r3, r5, lr
 8000376:	fa07 f70e 	lsl.w	r7, r7, lr
 800037a:	fa20 f804 	lsr.w	r8, r0, r4
 800037e:	0c3a      	lsrs	r2, r7, #16
 8000380:	fa25 f404 	lsr.w	r4, r5, r4
 8000384:	ea48 0803 	orr.w	r8, r8, r3
 8000388:	fbb4 f1f2 	udiv	r1, r4, r2
 800038c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000390:	fb02 4411 	mls	r4, r2, r1, r4
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800039c:	fb01 f30c 	mul.w	r3, r1, ip
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1bc>
 80003a8:	19ed      	adds	r5, r5, r7
 80003aa:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ae:	f080 808a 	bcs.w	80004c6 <__udivmoddi4+0x2c6>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	f240 8087 	bls.w	80004c6 <__udivmoddi4+0x2c6>
 80003b8:	3902      	subs	r1, #2
 80003ba:	443d      	add	r5, r7
 80003bc:	1aeb      	subs	r3, r5, r3
 80003be:	fa1f f588 	uxth.w	r5, r8
 80003c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003c6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ce:	fb00 f30c 	mul.w	r3, r0, ip
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	d907      	bls.n	80003e6 <__udivmoddi4+0x1e6>
 80003d6:	19ed      	adds	r5, r5, r7
 80003d8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003dc:	d26f      	bcs.n	80004be <__udivmoddi4+0x2be>
 80003de:	42ab      	cmp	r3, r5
 80003e0:	d96d      	bls.n	80004be <__udivmoddi4+0x2be>
 80003e2:	3802      	subs	r0, #2
 80003e4:	443d      	add	r5, r7
 80003e6:	1aeb      	subs	r3, r5, r3
 80003e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ec:	e78f      	b.n	800030e <__udivmoddi4+0x10e>
 80003ee:	f1c1 0720 	rsb	r7, r1, #32
 80003f2:	fa22 f807 	lsr.w	r8, r2, r7
 80003f6:	408b      	lsls	r3, r1
 80003f8:	fa05 f401 	lsl.w	r4, r5, r1
 80003fc:	ea48 0303 	orr.w	r3, r8, r3
 8000400:	fa20 fe07 	lsr.w	lr, r0, r7
 8000404:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000408:	40fd      	lsrs	r5, r7
 800040a:	ea4e 0e04 	orr.w	lr, lr, r4
 800040e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000412:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000416:	fb0c 5519 	mls	r5, ip, r9, r5
 800041a:	fa1f f883 	uxth.w	r8, r3
 800041e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000422:	fb09 f408 	mul.w	r4, r9, r8
 8000426:	42ac      	cmp	r4, r5
 8000428:	fa02 f201 	lsl.w	r2, r2, r1
 800042c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x244>
 8000432:	18ed      	adds	r5, r5, r3
 8000434:	f109 30ff 	add.w	r0, r9, #4294967295
 8000438:	d243      	bcs.n	80004c2 <__udivmoddi4+0x2c2>
 800043a:	42ac      	cmp	r4, r5
 800043c:	d941      	bls.n	80004c2 <__udivmoddi4+0x2c2>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	441d      	add	r5, r3
 8000444:	1b2d      	subs	r5, r5, r4
 8000446:	fa1f fe8e 	uxth.w	lr, lr
 800044a:	fbb5 f0fc 	udiv	r0, r5, ip
 800044e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000452:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000456:	fb00 f808 	mul.w	r8, r0, r8
 800045a:	45a0      	cmp	r8, r4
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x26e>
 800045e:	18e4      	adds	r4, r4, r3
 8000460:	f100 35ff 	add.w	r5, r0, #4294967295
 8000464:	d229      	bcs.n	80004ba <__udivmoddi4+0x2ba>
 8000466:	45a0      	cmp	r8, r4
 8000468:	d927      	bls.n	80004ba <__udivmoddi4+0x2ba>
 800046a:	3802      	subs	r0, #2
 800046c:	441c      	add	r4, r3
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	eba4 0408 	sub.w	r4, r4, r8
 8000476:	fba0 8902 	umull	r8, r9, r0, r2
 800047a:	454c      	cmp	r4, r9
 800047c:	46c6      	mov	lr, r8
 800047e:	464d      	mov	r5, r9
 8000480:	d315      	bcc.n	80004ae <__udivmoddi4+0x2ae>
 8000482:	d012      	beq.n	80004aa <__udivmoddi4+0x2aa>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x29c>
 8000486:	ebba 030e 	subs.w	r3, sl, lr
 800048a:	eb64 0405 	sbc.w	r4, r4, r5
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40cb      	lsrs	r3, r1
 8000494:	431f      	orrs	r7, r3
 8000496:	40cc      	lsrs	r4, r1
 8000498:	6037      	str	r7, [r6, #0]
 800049a:	6074      	str	r4, [r6, #4]
 800049c:	2100      	movs	r1, #0
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	4618      	mov	r0, r3
 80004a4:	e6f8      	b.n	8000298 <__udivmoddi4+0x98>
 80004a6:	4690      	mov	r8, r2
 80004a8:	e6e0      	b.n	800026c <__udivmoddi4+0x6c>
 80004aa:	45c2      	cmp	sl, r8
 80004ac:	d2ea      	bcs.n	8000484 <__udivmoddi4+0x284>
 80004ae:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b2:	eb69 0503 	sbc.w	r5, r9, r3
 80004b6:	3801      	subs	r0, #1
 80004b8:	e7e4      	b.n	8000484 <__udivmoddi4+0x284>
 80004ba:	4628      	mov	r0, r5
 80004bc:	e7d7      	b.n	800046e <__udivmoddi4+0x26e>
 80004be:	4640      	mov	r0, r8
 80004c0:	e791      	b.n	80003e6 <__udivmoddi4+0x1e6>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e7be      	b.n	8000444 <__udivmoddi4+0x244>
 80004c6:	4601      	mov	r1, r0
 80004c8:	e778      	b.n	80003bc <__udivmoddi4+0x1bc>
 80004ca:	3802      	subs	r0, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	e745      	b.n	800035c <__udivmoddi4+0x15c>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xe6>
 80004d4:	f1a8 0802 	sub.w	r8, r8, #2
 80004d8:	443d      	add	r5, r7
 80004da:	e72b      	b.n	8000334 <__udivmoddi4+0x134>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e0:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004e2:	2003      	movs	r0, #3
 80004e4:	f000 f81a 	bl	800051c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004e8:	2000      	movs	r0, #0
 80004ea:	f002 fcc5 	bl	8002e78 <HAL_InitTick>
 80004ee:	4604      	mov	r4, r0
 80004f0:	b918      	cbnz	r0, 80004fa <HAL_Init+0x1a>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004f2:	f002 fc6f 	bl	8002dd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 80004f6:	4620      	mov	r0, r4
 80004f8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80004fa:	2401      	movs	r4, #1
 80004fc:	e7fb      	b.n	80004f6 <HAL_Init+0x16>
	...

08000500 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000500:	4a02      	ldr	r2, [pc, #8]	; (800050c <HAL_IncTick+0xc>)
 8000502:	6813      	ldr	r3, [r2, #0]
 8000504:	3301      	adds	r3, #1
 8000506:	6013      	str	r3, [r2, #0]
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	20002880 	.word	0x20002880

08000510 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000510:	4b01      	ldr	r3, [pc, #4]	; (8000518 <HAL_GetTick+0x8>)
 8000512:	6818      	ldr	r0, [r3, #0]
}
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	20002880 	.word	0x20002880

0800051c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800051c:	4a07      	ldr	r2, [pc, #28]	; (800053c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800051e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000520:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000524:	041b      	lsls	r3, r3, #16
 8000526:	0c1b      	lsrs	r3, r3, #16
 8000528:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800052c:	0200      	lsls	r0, r0, #8
 800052e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000532:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000536:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000538:	60d3      	str	r3, [r2, #12]
 800053a:	4770      	bx	lr
 800053c:	e000ed00 	.word	0xe000ed00

08000540 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000540:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	68dc      	ldr	r4, [r3, #12]
 8000546:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800054a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800054e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000550:	2b04      	cmp	r3, #4
 8000552:	bf28      	it	cs
 8000554:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000556:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000558:	f04f 0501 	mov.w	r5, #1
 800055c:	fa05 f303 	lsl.w	r3, r5, r3
 8000560:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000564:	bf8c      	ite	hi
 8000566:	3c03      	subhi	r4, #3
 8000568:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800056a:	4019      	ands	r1, r3
 800056c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800056e:	fa05 f404 	lsl.w	r4, r5, r4
 8000572:	3c01      	subs	r4, #1
 8000574:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000576:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000578:	ea42 0201 	orr.w	r2, r2, r1
 800057c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000580:	bfaf      	iteee	ge
 8000582:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000586:	f000 000f 	andlt.w	r0, r0, #15
 800058a:	4b06      	ldrlt	r3, [pc, #24]	; (80005a4 <HAL_NVIC_SetPriority+0x64>)
 800058c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800058e:	bfa5      	ittet	ge
 8000590:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000594:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000596:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000598:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	bf00      	nop
 80005a0:	e000ed00 	.word	0xe000ed00
 80005a4:	e000ed14 	.word	0xe000ed14

080005a8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005a8:	0942      	lsrs	r2, r0, #5
 80005aa:	2301      	movs	r3, #1
 80005ac:	f000 001f 	and.w	r0, r0, #31
 80005b0:	fa03 f000 	lsl.w	r0, r3, r0
 80005b4:	4b01      	ldr	r3, [pc, #4]	; (80005bc <HAL_NVIC_EnableIRQ+0x14>)
 80005b6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005ba:	4770      	bx	lr
 80005bc:	e000e100 	.word	0xe000e100

080005c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005c4:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80005c6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005c8:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000774 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80005cc:	4c67      	ldr	r4, [pc, #412]	; (800076c <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80005ce:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 80005d0:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80005d2:	9a01      	ldr	r2, [sp, #4]
 80005d4:	40da      	lsrs	r2, r3
 80005d6:	d102      	bne.n	80005de <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 80005d8:	b005      	add	sp, #20
 80005da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80005de:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 80005e0:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80005e2:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 80005e4:	ea12 0e06 	ands.w	lr, r2, r6
 80005e8:	f000 80b1 	beq.w	800074e <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005ec:	684a      	ldr	r2, [r1, #4]
 80005ee:	f022 0710 	bic.w	r7, r2, #16
 80005f2:	2f02      	cmp	r7, #2
 80005f4:	d116      	bne.n	8000624 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 80005f6:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80005fa:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80005fe:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000602:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000606:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800060a:	f04f 0c0f 	mov.w	ip, #15
 800060e:	fa0c fc0a 	lsl.w	ip, ip, sl
 8000612:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000616:	690d      	ldr	r5, [r1, #16]
 8000618:	fa05 f50a 	lsl.w	r5, r5, sl
 800061c:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8000620:	f8c9 5020 	str.w	r5, [r9, #32]
 8000624:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000628:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800062a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800062e:	fa05 f50c 	lsl.w	r5, r5, ip
 8000632:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000634:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000638:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800063c:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000640:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000642:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000646:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000648:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800064c:	d811      	bhi.n	8000672 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 800064e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000650:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000654:	68cf      	ldr	r7, [r1, #12]
 8000656:	fa07 f70c 	lsl.w	r7, r7, ip
 800065a:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 800065e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000660:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000662:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000666:	f3c2 1700 	ubfx	r7, r2, #4, #1
 800066a:	409f      	lsls	r7, r3
 800066c:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8000670:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000672:	f1ba 0f03 	cmp.w	sl, #3
 8000676:	d107      	bne.n	8000688 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8000678:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800067a:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800067e:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8000682:	409f      	lsls	r7, r3
 8000684:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8000686:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8000688:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800068a:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800068c:	688e      	ldr	r6, [r1, #8]
 800068e:	fa06 f60c 	lsl.w	r6, r6, ip
 8000692:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8000694:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000696:	00d5      	lsls	r5, r2, #3
 8000698:	d559      	bpl.n	800074e <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069a:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 800069e:	f045 0501 	orr.w	r5, r5, #1
 80006a2:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 80006a6:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80006aa:	f023 0603 	bic.w	r6, r3, #3
 80006ae:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80006b2:	f005 0501 	and.w	r5, r5, #1
 80006b6:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80006ba:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80006bc:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c0:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 80006c2:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80006c4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80006c8:	270f      	movs	r7, #15
 80006ca:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80006ce:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80006d2:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80006d6:	d03c      	beq.n	8000752 <HAL_GPIO_Init+0x192>
 80006d8:	4d25      	ldr	r5, [pc, #148]	; (8000770 <HAL_GPIO_Init+0x1b0>)
 80006da:	42a8      	cmp	r0, r5
 80006dc:	d03b      	beq.n	8000756 <HAL_GPIO_Init+0x196>
 80006de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006e2:	42a8      	cmp	r0, r5
 80006e4:	d039      	beq.n	800075a <HAL_GPIO_Init+0x19a>
 80006e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006ea:	42a8      	cmp	r0, r5
 80006ec:	d037      	beq.n	800075e <HAL_GPIO_Init+0x19e>
 80006ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006f2:	42a8      	cmp	r0, r5
 80006f4:	d035      	beq.n	8000762 <HAL_GPIO_Init+0x1a2>
 80006f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006fa:	42a8      	cmp	r0, r5
 80006fc:	d033      	beq.n	8000766 <HAL_GPIO_Init+0x1a6>
 80006fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000702:	42a8      	cmp	r0, r5
 8000704:	bf14      	ite	ne
 8000706:	2507      	movne	r5, #7
 8000708:	2506      	moveq	r5, #6
 800070a:	fa05 f50c 	lsl.w	r5, r5, ip
 800070e:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000710:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8000712:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8000714:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000718:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 800071a:	bf54      	ite	pl
 800071c:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800071e:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8000722:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8000724:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000726:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8000728:	bf54      	ite	pl
 800072a:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800072c:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8000730:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8000732:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000734:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8000736:	bf54      	ite	pl
 8000738:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800073a:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 800073e:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8000740:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000742:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8000744:	bf54      	ite	pl
 8000746:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000748:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 800074c:	60e5      	str	r5, [r4, #12]
    position++;
 800074e:	3301      	adds	r3, #1
 8000750:	e73f      	b.n	80005d2 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000752:	2500      	movs	r5, #0
 8000754:	e7d9      	b.n	800070a <HAL_GPIO_Init+0x14a>
 8000756:	2501      	movs	r5, #1
 8000758:	e7d7      	b.n	800070a <HAL_GPIO_Init+0x14a>
 800075a:	2502      	movs	r5, #2
 800075c:	e7d5      	b.n	800070a <HAL_GPIO_Init+0x14a>
 800075e:	2503      	movs	r5, #3
 8000760:	e7d3      	b.n	800070a <HAL_GPIO_Init+0x14a>
 8000762:	2504      	movs	r5, #4
 8000764:	e7d1      	b.n	800070a <HAL_GPIO_Init+0x14a>
 8000766:	2505      	movs	r5, #5
 8000768:	e7cf      	b.n	800070a <HAL_GPIO_Init+0x14a>
 800076a:	bf00      	nop
 800076c:	40010400 	.word	0x40010400
 8000770:	48000400 	.word	0x48000400
 8000774:	40021000 	.word	0x40021000

08000778 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000778:	b10a      	cbz	r2, 800077e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800077a:	6181      	str	r1, [r0, #24]
 800077c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800077e:	6281      	str	r1, [r0, #40]	; 0x28
 8000780:	4770      	bx	lr

08000782 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000782:	6943      	ldr	r3, [r0, #20]
 8000784:	4059      	eors	r1, r3
 8000786:	6141      	str	r1, [r0, #20]
 8000788:	4770      	bx	lr
	...

0800078c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800078c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800078e:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000790:	6959      	ldr	r1, [r3, #20]
 8000792:	4201      	tst	r1, r0
 8000794:	d002      	beq.n	800079c <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000796:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000798:	f002 fb0a 	bl	8002db0 <HAL_GPIO_EXTI_Callback>
 800079c:	bd08      	pop	{r3, pc}
 800079e:	bf00      	nop
 80007a0:	40010400 	.word	0x40010400

080007a4 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80007a4:	4b02      	ldr	r3, [pc, #8]	; (80007b0 <HAL_PWREx_GetVoltageRange+0xc>)
 80007a6:	6818      	ldr	r0, [r3, #0]
#endif
}
 80007a8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40007000 	.word	0x40007000

080007b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80007b4:	4b17      	ldr	r3, [pc, #92]	; (8000814 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80007b6:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80007b8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80007bc:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80007c0:	d11c      	bne.n	80007fc <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80007c2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80007c6:	d015      	beq.n	80007f4 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80007ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80007d2:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80007d4:	4a10      	ldr	r2, [pc, #64]	; (8000818 <HAL_PWREx_ControlVoltageScaling+0x64>)
 80007d6:	6811      	ldr	r1, [r2, #0]
 80007d8:	2232      	movs	r2, #50	; 0x32
 80007da:	434a      	muls	r2, r1
 80007dc:	490f      	ldr	r1, [pc, #60]	; (800081c <HAL_PWREx_ControlVoltageScaling+0x68>)
 80007de:	fbb2 f2f1 	udiv	r2, r2, r1
 80007e2:	4619      	mov	r1, r3
 80007e4:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80007e6:	6958      	ldr	r0, [r3, #20]
 80007e8:	0540      	lsls	r0, r0, #21
 80007ea:	d500      	bpl.n	80007ee <HAL_PWREx_ControlVoltageScaling+0x3a>
 80007ec:	b922      	cbnz	r2, 80007f8 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80007ee:	694b      	ldr	r3, [r1, #20]
 80007f0:	055b      	lsls	r3, r3, #21
 80007f2:	d40d      	bmi.n	8000810 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80007f4:	2000      	movs	r0, #0
 80007f6:	4770      	bx	lr
        wait_loop_index--;
 80007f8:	3a01      	subs	r2, #1
 80007fa:	e7f4      	b.n	80007e6 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80007fc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000800:	bf1f      	itttt	ne
 8000802:	681a      	ldrne	r2, [r3, #0]
 8000804:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8000808:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 800080c:	601a      	strne	r2, [r3, #0]
 800080e:	e7f1      	b.n	80007f4 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8000810:	2003      	movs	r0, #3
}
 8000812:	4770      	bx	lr
 8000814:	40007000 	.word	0x40007000
 8000818:	20000004 	.word	0x20000004
 800081c:	000f4240 	.word	0x000f4240

08000820 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000820:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000822:	4d1e      	ldr	r5, [pc, #120]	; (800089c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000824:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000826:	00da      	lsls	r2, r3, #3
{
 8000828:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800082a:	d518      	bpl.n	800085e <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800082c:	f7ff ffba 	bl	80007a4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000830:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000834:	d123      	bne.n	800087e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8000836:	2c80      	cmp	r4, #128	; 0x80
 8000838:	d929      	bls.n	800088e <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800083a:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800083c:	bf8c      	ite	hi
 800083e:	2002      	movhi	r0, #2
 8000840:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000842:	4a17      	ldr	r2, [pc, #92]	; (80008a0 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8000844:	6813      	ldr	r3, [r2, #0]
 8000846:	f023 0307 	bic.w	r3, r3, #7
 800084a:	4303      	orrs	r3, r0
 800084c:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800084e:	6813      	ldr	r3, [r2, #0]
 8000850:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8000854:	1a18      	subs	r0, r3, r0
 8000856:	bf18      	it	ne
 8000858:	2001      	movne	r0, #1
 800085a:	b003      	add	sp, #12
 800085c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	65ab      	str	r3, [r5, #88]	; 0x58
 8000866:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086c:	9301      	str	r3, [sp, #4]
 800086e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000870:	f7ff ff98 	bl	80007a4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000874:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000876:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800087a:	65ab      	str	r3, [r5, #88]	; 0x58
 800087c:	e7d8      	b.n	8000830 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800087e:	2c80      	cmp	r4, #128	; 0x80
 8000880:	d807      	bhi.n	8000892 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8000882:	d008      	beq.n	8000896 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8000884:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8000888:	4258      	negs	r0, r3
 800088a:	4158      	adcs	r0, r3
 800088c:	e7d9      	b.n	8000842 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800088e:	2000      	movs	r0, #0
 8000890:	e7d7      	b.n	8000842 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8000892:	2003      	movs	r0, #3
 8000894:	e7d5      	b.n	8000842 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8000896:	2002      	movs	r0, #2
 8000898:	e7d3      	b.n	8000842 <RCC_SetFlashLatencyFromMSIRange+0x22>
 800089a:	bf00      	nop
 800089c:	40021000 	.word	0x40021000
 80008a0:	40022000 	.word	0x40022000

080008a4 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80008a4:	4b25      	ldr	r3, [pc, #148]	; (800093c <HAL_RCC_GetSysClockFreq+0x98>)
 80008a6:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80008a8:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80008aa:	f012 020c 	ands.w	r2, r2, #12
 80008ae:	d005      	beq.n	80008bc <HAL_RCC_GetSysClockFreq+0x18>
 80008b0:	2a0c      	cmp	r2, #12
 80008b2:	d115      	bne.n	80008e0 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80008b4:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80008b8:	2901      	cmp	r1, #1
 80008ba:	d118      	bne.n	80008ee <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80008bc:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80008be:	4820      	ldr	r0, [pc, #128]	; (8000940 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80008c0:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80008c2:	bf55      	itete	pl
 80008c4:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80008c8:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80008ca:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80008ce:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 80008d2:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80008d6:	b382      	cbz	r2, 800093a <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80008d8:	2a0c      	cmp	r2, #12
 80008da:	d009      	beq.n	80008f0 <HAL_RCC_GetSysClockFreq+0x4c>
 80008dc:	2000      	movs	r0, #0
  return sysclockfreq;
 80008de:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80008e0:	2a04      	cmp	r2, #4
 80008e2:	d029      	beq.n	8000938 <HAL_RCC_GetSysClockFreq+0x94>
 80008e4:	2a08      	cmp	r2, #8
 80008e6:	4817      	ldr	r0, [pc, #92]	; (8000944 <HAL_RCC_GetSysClockFreq+0xa0>)
 80008e8:	bf18      	it	ne
 80008ea:	2000      	movne	r0, #0
 80008ec:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80008ee:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80008f0:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80008f2:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80008f4:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80008f8:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 80008fc:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80008fe:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8000902:	d005      	beq.n	8000910 <HAL_RCC_GetSysClockFreq+0x6c>
 8000904:	2903      	cmp	r1, #3
 8000906:	d012      	beq.n	800092e <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000908:	68d9      	ldr	r1, [r3, #12]
 800090a:	f3c1 2106 	ubfx	r1, r1, #8, #7
 800090e:	e003      	b.n	8000918 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000910:	68d9      	ldr	r1, [r3, #12]
 8000912:	480d      	ldr	r0, [pc, #52]	; (8000948 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000914:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000918:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800091a:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800091e:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8000922:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000924:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000926:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8000928:	fbb0 f0f3 	udiv	r0, r0, r3
 800092c:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800092e:	68d9      	ldr	r1, [r3, #12]
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000932:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8000936:	e7ef      	b.n	8000918 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 8000938:	4803      	ldr	r0, [pc, #12]	; (8000948 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 800093a:	4770      	bx	lr
 800093c:	40021000 	.word	0x40021000
 8000940:	08003080 	.word	0x08003080
 8000944:	007a1200 	.word	0x007a1200
 8000948:	00f42400 	.word	0x00f42400

0800094c <HAL_RCC_OscConfig>:
{
 800094c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8000950:	4605      	mov	r5, r0
 8000952:	b918      	cbnz	r0, 800095c <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8000954:	2001      	movs	r0, #1
}
 8000956:	b003      	add	sp, #12
 8000958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800095c:	4ca5      	ldr	r4, [pc, #660]	; (8000bf4 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800095e:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000960:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000962:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000964:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000966:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800096a:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800096e:	d53c      	bpl.n	80009ea <HAL_RCC_OscConfig+0x9e>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000970:	b11e      	cbz	r6, 800097a <HAL_RCC_OscConfig+0x2e>
 8000972:	2e0c      	cmp	r6, #12
 8000974:	d163      	bne.n	8000a3e <HAL_RCC_OscConfig+0xf2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000976:	2f01      	cmp	r7, #1
 8000978:	d161      	bne.n	8000a3e <HAL_RCC_OscConfig+0xf2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800097a:	6823      	ldr	r3, [r4, #0]
 800097c:	0798      	lsls	r0, r3, #30
 800097e:	d502      	bpl.n	8000986 <HAL_RCC_OscConfig+0x3a>
 8000980:	69ab      	ldr	r3, [r5, #24]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d0e6      	beq.n	8000954 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000986:	6823      	ldr	r3, [r4, #0]
 8000988:	6a28      	ldr	r0, [r5, #32]
 800098a:	0719      	lsls	r1, r3, #28
 800098c:	bf56      	itet	pl
 800098e:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8000992:	6823      	ldrmi	r3, [r4, #0]
 8000994:	091b      	lsrpl	r3, r3, #4
 8000996:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800099a:	4283      	cmp	r3, r0
 800099c:	d23a      	bcs.n	8000a14 <HAL_RCC_OscConfig+0xc8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800099e:	f7ff ff3f 	bl	8000820 <RCC_SetFlashLatencyFromMSIRange>
 80009a2:	2800      	cmp	r0, #0
 80009a4:	d1d6      	bne.n	8000954 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80009a6:	6823      	ldr	r3, [r4, #0]
 80009a8:	f043 0308 	orr.w	r3, r3, #8
 80009ac:	6023      	str	r3, [r4, #0]
 80009ae:	6823      	ldr	r3, [r4, #0]
 80009b0:	6a2a      	ldr	r2, [r5, #32]
 80009b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80009b6:	4313      	orrs	r3, r2
 80009b8:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80009ba:	6863      	ldr	r3, [r4, #4]
 80009bc:	69ea      	ldr	r2, [r5, #28]
 80009be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80009c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80009c6:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80009c8:	f7ff ff6c 	bl	80008a4 <HAL_RCC_GetSysClockFreq>
 80009cc:	68a3      	ldr	r3, [r4, #8]
 80009ce:	4a8a      	ldr	r2, [pc, #552]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 80009d0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80009d4:	5cd3      	ldrb	r3, [r2, r3]
 80009d6:	f003 031f 	and.w	r3, r3, #31
 80009da:	40d8      	lsrs	r0, r3
 80009dc:	4b87      	ldr	r3, [pc, #540]	; (8000bfc <HAL_RCC_OscConfig+0x2b0>)
 80009de:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80009e0:	2000      	movs	r0, #0
 80009e2:	f002 fa49 	bl	8002e78 <HAL_InitTick>
        if(status != HAL_OK)
 80009e6:	2800      	cmp	r0, #0
 80009e8:	d1b5      	bne.n	8000956 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009ea:	682b      	ldr	r3, [r5, #0]
 80009ec:	07d8      	lsls	r0, r3, #31
 80009ee:	d45d      	bmi.n	8000aac <HAL_RCC_OscConfig+0x160>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009f0:	682b      	ldr	r3, [r5, #0]
 80009f2:	0799      	lsls	r1, r3, #30
 80009f4:	f100 809c 	bmi.w	8000b30 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009f8:	682b      	ldr	r3, [r5, #0]
 80009fa:	0718      	lsls	r0, r3, #28
 80009fc:	f100 80d0 	bmi.w	8000ba0 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a00:	682b      	ldr	r3, [r5, #0]
 8000a02:	0759      	lsls	r1, r3, #29
 8000a04:	f100 80fc 	bmi.w	8000c00 <HAL_RCC_OscConfig+0x2b4>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000a08:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	f040 8165 	bne.w	8000cda <HAL_RCC_OscConfig+0x38e>
  return HAL_OK;
 8000a10:	2000      	movs	r0, #0
 8000a12:	e7a0      	b.n	8000956 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a14:	6823      	ldr	r3, [r4, #0]
 8000a16:	f043 0308 	orr.w	r3, r3, #8
 8000a1a:	6023      	str	r3, [r4, #0]
 8000a1c:	6823      	ldr	r3, [r4, #0]
 8000a1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a22:	4303      	orrs	r3, r0
 8000a24:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a26:	6863      	ldr	r3, [r4, #4]
 8000a28:	69ea      	ldr	r2, [r5, #28]
 8000a2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000a2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a32:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a34:	f7ff fef4 	bl	8000820 <RCC_SetFlashLatencyFromMSIRange>
 8000a38:	2800      	cmp	r0, #0
 8000a3a:	d0c5      	beq.n	80009c8 <HAL_RCC_OscConfig+0x7c>
 8000a3c:	e78a      	b.n	8000954 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000a3e:	69ab      	ldr	r3, [r5, #24]
 8000a40:	b31b      	cbz	r3, 8000a8a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_ENABLE();
 8000a42:	6823      	ldr	r3, [r4, #0]
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a4a:	f7ff fd61 	bl	8000510 <HAL_GetTick>
 8000a4e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000a50:	6823      	ldr	r3, [r4, #0]
 8000a52:	079a      	lsls	r2, r3, #30
 8000a54:	d511      	bpl.n	8000a7a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a56:	6823      	ldr	r3, [r4, #0]
 8000a58:	f043 0308 	orr.w	r3, r3, #8
 8000a5c:	6023      	str	r3, [r4, #0]
 8000a5e:	6823      	ldr	r3, [r4, #0]
 8000a60:	6a2a      	ldr	r2, [r5, #32]
 8000a62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a66:	4313      	orrs	r3, r2
 8000a68:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a6a:	6863      	ldr	r3, [r4, #4]
 8000a6c:	69ea      	ldr	r2, [r5, #28]
 8000a6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000a72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a76:	6063      	str	r3, [r4, #4]
 8000a78:	e7b7      	b.n	80009ea <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000a7a:	f7ff fd49 	bl	8000510 <HAL_GetTick>
 8000a7e:	eba0 0008 	sub.w	r0, r0, r8
 8000a82:	2802      	cmp	r0, #2
 8000a84:	d9e4      	bls.n	8000a50 <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 8000a86:	2003      	movs	r0, #3
 8000a88:	e765      	b.n	8000956 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8000a8a:	6823      	ldr	r3, [r4, #0]
 8000a8c:	f023 0301 	bic.w	r3, r3, #1
 8000a90:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a92:	f7ff fd3d 	bl	8000510 <HAL_GetTick>
 8000a96:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000a98:	6823      	ldr	r3, [r4, #0]
 8000a9a:	079b      	lsls	r3, r3, #30
 8000a9c:	d5a5      	bpl.n	80009ea <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000a9e:	f7ff fd37 	bl	8000510 <HAL_GetTick>
 8000aa2:	eba0 0008 	sub.w	r0, r0, r8
 8000aa6:	2802      	cmp	r0, #2
 8000aa8:	d9f6      	bls.n	8000a98 <HAL_RCC_OscConfig+0x14c>
 8000aaa:	e7ec      	b.n	8000a86 <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000aac:	2e08      	cmp	r6, #8
 8000aae:	d003      	beq.n	8000ab8 <HAL_RCC_OscConfig+0x16c>
 8000ab0:	2e0c      	cmp	r6, #12
 8000ab2:	d108      	bne.n	8000ac6 <HAL_RCC_OscConfig+0x17a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8000ab4:	2f03      	cmp	r7, #3
 8000ab6:	d106      	bne.n	8000ac6 <HAL_RCC_OscConfig+0x17a>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ab8:	6823      	ldr	r3, [r4, #0]
 8000aba:	039a      	lsls	r2, r3, #14
 8000abc:	d598      	bpl.n	80009f0 <HAL_RCC_OscConfig+0xa4>
 8000abe:	686b      	ldr	r3, [r5, #4]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d195      	bne.n	80009f0 <HAL_RCC_OscConfig+0xa4>
 8000ac4:	e746      	b.n	8000954 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ac6:	686b      	ldr	r3, [r5, #4]
 8000ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000acc:	d110      	bne.n	8000af0 <HAL_RCC_OscConfig+0x1a4>
 8000ace:	6823      	ldr	r3, [r4, #0]
 8000ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ad4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ad6:	f7ff fd1b 	bl	8000510 <HAL_GetTick>
 8000ada:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000adc:	6823      	ldr	r3, [r4, #0]
 8000ade:	039b      	lsls	r3, r3, #14
 8000ae0:	d486      	bmi.n	80009f0 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ae2:	f7ff fd15 	bl	8000510 <HAL_GetTick>
 8000ae6:	eba0 0008 	sub.w	r0, r0, r8
 8000aea:	2864      	cmp	r0, #100	; 0x64
 8000aec:	d9f6      	bls.n	8000adc <HAL_RCC_OscConfig+0x190>
 8000aee:	e7ca      	b.n	8000a86 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000af0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000af4:	d104      	bne.n	8000b00 <HAL_RCC_OscConfig+0x1b4>
 8000af6:	6823      	ldr	r3, [r4, #0]
 8000af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000afc:	6023      	str	r3, [r4, #0]
 8000afe:	e7e6      	b.n	8000ace <HAL_RCC_OscConfig+0x182>
 8000b00:	6822      	ldr	r2, [r4, #0]
 8000b02:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000b06:	6022      	str	r2, [r4, #0]
 8000b08:	6822      	ldr	r2, [r4, #0]
 8000b0a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b0e:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d1e0      	bne.n	8000ad6 <HAL_RCC_OscConfig+0x18a>
        tickstart = HAL_GetTick();
 8000b14:	f7ff fcfc 	bl	8000510 <HAL_GetTick>
 8000b18:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000b1a:	6823      	ldr	r3, [r4, #0]
 8000b1c:	0398      	lsls	r0, r3, #14
 8000b1e:	f57f af67 	bpl.w	80009f0 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b22:	f7ff fcf5 	bl	8000510 <HAL_GetTick>
 8000b26:	eba0 0008 	sub.w	r0, r0, r8
 8000b2a:	2864      	cmp	r0, #100	; 0x64
 8000b2c:	d9f5      	bls.n	8000b1a <HAL_RCC_OscConfig+0x1ce>
 8000b2e:	e7aa      	b.n	8000a86 <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000b30:	2e04      	cmp	r6, #4
 8000b32:	d003      	beq.n	8000b3c <HAL_RCC_OscConfig+0x1f0>
 8000b34:	2e0c      	cmp	r6, #12
 8000b36:	d110      	bne.n	8000b5a <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8000b38:	2f02      	cmp	r7, #2
 8000b3a:	d10e      	bne.n	8000b5a <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000b3c:	6823      	ldr	r3, [r4, #0]
 8000b3e:	0559      	lsls	r1, r3, #21
 8000b40:	d503      	bpl.n	8000b4a <HAL_RCC_OscConfig+0x1fe>
 8000b42:	68eb      	ldr	r3, [r5, #12]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	f43f af05 	beq.w	8000954 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b4a:	6863      	ldr	r3, [r4, #4]
 8000b4c:	692a      	ldr	r2, [r5, #16]
 8000b4e:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000b52:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b56:	6063      	str	r3, [r4, #4]
 8000b58:	e74e      	b.n	80009f8 <HAL_RCC_OscConfig+0xac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b5a:	68eb      	ldr	r3, [r5, #12]
 8000b5c:	b17b      	cbz	r3, 8000b7e <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 8000b5e:	6823      	ldr	r3, [r4, #0]
 8000b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b64:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b66:	f7ff fcd3 	bl	8000510 <HAL_GetTick>
 8000b6a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000b6c:	6823      	ldr	r3, [r4, #0]
 8000b6e:	055a      	lsls	r2, r3, #21
 8000b70:	d4eb      	bmi.n	8000b4a <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b72:	f7ff fccd 	bl	8000510 <HAL_GetTick>
 8000b76:	1bc0      	subs	r0, r0, r7
 8000b78:	2802      	cmp	r0, #2
 8000b7a:	d9f7      	bls.n	8000b6c <HAL_RCC_OscConfig+0x220>
 8000b7c:	e783      	b.n	8000a86 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 8000b7e:	6823      	ldr	r3, [r4, #0]
 8000b80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b84:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b86:	f7ff fcc3 	bl	8000510 <HAL_GetTick>
 8000b8a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000b8c:	6823      	ldr	r3, [r4, #0]
 8000b8e:	055b      	lsls	r3, r3, #21
 8000b90:	f57f af32 	bpl.w	80009f8 <HAL_RCC_OscConfig+0xac>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b94:	f7ff fcbc 	bl	8000510 <HAL_GetTick>
 8000b98:	1bc0      	subs	r0, r0, r7
 8000b9a:	2802      	cmp	r0, #2
 8000b9c:	d9f6      	bls.n	8000b8c <HAL_RCC_OscConfig+0x240>
 8000b9e:	e772      	b.n	8000a86 <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ba0:	696b      	ldr	r3, [r5, #20]
 8000ba2:	b19b      	cbz	r3, 8000bcc <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8000ba4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000bb0:	f7ff fcae 	bl	8000510 <HAL_GetTick>
 8000bb4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000bb6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000bba:	079a      	lsls	r2, r3, #30
 8000bbc:	f53f af20 	bmi.w	8000a00 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bc0:	f7ff fca6 	bl	8000510 <HAL_GetTick>
 8000bc4:	1bc0      	subs	r0, r0, r7
 8000bc6:	2802      	cmp	r0, #2
 8000bc8:	d9f5      	bls.n	8000bb6 <HAL_RCC_OscConfig+0x26a>
 8000bca:	e75c      	b.n	8000a86 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 8000bcc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000bd0:	f023 0301 	bic.w	r3, r3, #1
 8000bd4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000bd8:	f7ff fc9a 	bl	8000510 <HAL_GetTick>
 8000bdc:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000bde:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000be2:	079b      	lsls	r3, r3, #30
 8000be4:	f57f af0c 	bpl.w	8000a00 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000be8:	f7ff fc92 	bl	8000510 <HAL_GetTick>
 8000bec:	1bc0      	subs	r0, r0, r7
 8000bee:	2802      	cmp	r0, #2
 8000bf0:	d9f5      	bls.n	8000bde <HAL_RCC_OscConfig+0x292>
 8000bf2:	e748      	b.n	8000a86 <HAL_RCC_OscConfig+0x13a>
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	08003066 	.word	0x08003066
 8000bfc:	20000004 	.word	0x20000004
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000c00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c02:	00d8      	lsls	r0, r3, #3
 8000c04:	d429      	bmi.n	8000c5a <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	65a3      	str	r3, [r4, #88]	; 0x58
 8000c0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c14:	9301      	str	r3, [sp, #4]
 8000c16:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000c18:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c1c:	4f5d      	ldr	r7, [pc, #372]	; (8000d94 <HAL_RCC_OscConfig+0x448>)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	05d9      	lsls	r1, r3, #23
 8000c22:	d51d      	bpl.n	8000c60 <HAL_RCC_OscConfig+0x314>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c24:	68ab      	ldr	r3, [r5, #8]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d12b      	bne.n	8000c82 <HAL_RCC_OscConfig+0x336>
 8000c2a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000c2e:	f043 0301 	orr.w	r3, r3, #1
 8000c32:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8000c36:	f7ff fc6b 	bl	8000510 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c3a:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000c3e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000c40:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000c44:	079b      	lsls	r3, r3, #30
 8000c46:	d542      	bpl.n	8000cce <HAL_RCC_OscConfig+0x382>
    if(pwrclkchanged == SET)
 8000c48:	f1b8 0f00 	cmp.w	r8, #0
 8000c4c:	f43f aedc 	beq.w	8000a08 <HAL_RCC_OscConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c56:	65a3      	str	r3, [r4, #88]	; 0x58
 8000c58:	e6d6      	b.n	8000a08 <HAL_RCC_OscConfig+0xbc>
    FlagStatus       pwrclkchanged = RESET;
 8000c5a:	f04f 0800 	mov.w	r8, #0
 8000c5e:	e7dd      	b.n	8000c1c <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c66:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000c68:	f7ff fc52 	bl	8000510 <HAL_GetTick>
 8000c6c:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	05da      	lsls	r2, r3, #23
 8000c72:	d4d7      	bmi.n	8000c24 <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c74:	f7ff fc4c 	bl	8000510 <HAL_GetTick>
 8000c78:	eba0 0009 	sub.w	r0, r0, r9
 8000c7c:	2802      	cmp	r0, #2
 8000c7e:	d9f6      	bls.n	8000c6e <HAL_RCC_OscConfig+0x322>
 8000c80:	e701      	b.n	8000a86 <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c82:	2b05      	cmp	r3, #5
 8000c84:	d106      	bne.n	8000c94 <HAL_RCC_OscConfig+0x348>
 8000c86:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000c8a:	f043 0304 	orr.w	r3, r3, #4
 8000c8e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8000c92:	e7ca      	b.n	8000c2a <HAL_RCC_OscConfig+0x2de>
 8000c94:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000c98:	f022 0201 	bic.w	r2, r2, #1
 8000c9c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8000ca0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000ca4:	f022 0204 	bic.w	r2, r2, #4
 8000ca8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d1c2      	bne.n	8000c36 <HAL_RCC_OscConfig+0x2ea>
      tickstart = HAL_GetTick();
 8000cb0:	f7ff fc2e 	bl	8000510 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cb4:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000cb8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000cba:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000cbe:	0798      	lsls	r0, r3, #30
 8000cc0:	d5c2      	bpl.n	8000c48 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cc2:	f7ff fc25 	bl	8000510 <HAL_GetTick>
 8000cc6:	1bc0      	subs	r0, r0, r7
 8000cc8:	4548      	cmp	r0, r9
 8000cca:	d9f6      	bls.n	8000cba <HAL_RCC_OscConfig+0x36e>
 8000ccc:	e6db      	b.n	8000a86 <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cce:	f7ff fc1f 	bl	8000510 <HAL_GetTick>
 8000cd2:	1bc0      	subs	r0, r0, r7
 8000cd4:	4548      	cmp	r0, r9
 8000cd6:	d9b3      	bls.n	8000c40 <HAL_RCC_OscConfig+0x2f4>
 8000cd8:	e6d5      	b.n	8000a86 <HAL_RCC_OscConfig+0x13a>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000cda:	2e0c      	cmp	r6, #12
 8000cdc:	f43f ae3a 	beq.w	8000954 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000ce0:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8000ce2:	6823      	ldr	r3, [r4, #0]
 8000ce4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ce8:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000cea:	d137      	bne.n	8000d5c <HAL_RCC_OscConfig+0x410>
        tickstart = HAL_GetTick();
 8000cec:	f7ff fc10 	bl	8000510 <HAL_GetTick>
 8000cf0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000cf2:	6823      	ldr	r3, [r4, #0]
 8000cf4:	0199      	lsls	r1, r3, #6
 8000cf6:	d42b      	bmi.n	8000d50 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cf8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000cfa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000cfc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000d00:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000d02:	3a01      	subs	r2, #1
 8000d04:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000d08:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000d0a:	0912      	lsrs	r2, r2, #4
 8000d0c:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000d10:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000d12:	0852      	lsrs	r2, r2, #1
 8000d14:	3a01      	subs	r2, #1
 8000d16:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8000d1a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000d1c:	0852      	lsrs	r2, r2, #1
 8000d1e:	3a01      	subs	r2, #1
 8000d20:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8000d24:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000d26:	6823      	ldr	r3, [r4, #0]
 8000d28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d2c:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000d2e:	68e3      	ldr	r3, [r4, #12]
 8000d30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d34:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000d36:	f7ff fbeb 	bl	8000510 <HAL_GetTick>
 8000d3a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000d3c:	6823      	ldr	r3, [r4, #0]
 8000d3e:	019a      	lsls	r2, r3, #6
 8000d40:	f53f ae66 	bmi.w	8000a10 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d44:	f7ff fbe4 	bl	8000510 <HAL_GetTick>
 8000d48:	1b40      	subs	r0, r0, r5
 8000d4a:	2802      	cmp	r0, #2
 8000d4c:	d9f6      	bls.n	8000d3c <HAL_RCC_OscConfig+0x3f0>
 8000d4e:	e69a      	b.n	8000a86 <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d50:	f7ff fbde 	bl	8000510 <HAL_GetTick>
 8000d54:	1b80      	subs	r0, r0, r6
 8000d56:	2802      	cmp	r0, #2
 8000d58:	d9cb      	bls.n	8000cf2 <HAL_RCC_OscConfig+0x3a6>
 8000d5a:	e694      	b.n	8000a86 <HAL_RCC_OscConfig+0x13a>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8000d5c:	6823      	ldr	r3, [r4, #0]
 8000d5e:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000d62:	bf02      	ittt	eq
 8000d64:	68e3      	ldreq	r3, [r4, #12]
 8000d66:	f023 0303 	biceq.w	r3, r3, #3
 8000d6a:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8000d6c:	68e3      	ldr	r3, [r4, #12]
 8000d6e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d76:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000d78:	f7ff fbca 	bl	8000510 <HAL_GetTick>
 8000d7c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000d7e:	6823      	ldr	r3, [r4, #0]
 8000d80:	019b      	lsls	r3, r3, #6
 8000d82:	f57f ae45 	bpl.w	8000a10 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d86:	f7ff fbc3 	bl	8000510 <HAL_GetTick>
 8000d8a:	1b40      	subs	r0, r0, r5
 8000d8c:	2802      	cmp	r0, #2
 8000d8e:	d9f6      	bls.n	8000d7e <HAL_RCC_OscConfig+0x432>
 8000d90:	e679      	b.n	8000a86 <HAL_RCC_OscConfig+0x13a>
 8000d92:	bf00      	nop
 8000d94:	40007000 	.word	0x40007000

08000d98 <HAL_RCC_ClockConfig>:
{
 8000d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d9c:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8000d9e:	4604      	mov	r4, r0
 8000da0:	b910      	cbnz	r0, 8000da8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000da2:	2001      	movs	r0, #1
 8000da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000da8:	4a40      	ldr	r2, [pc, #256]	; (8000eac <HAL_RCC_ClockConfig+0x114>)
 8000daa:	6813      	ldr	r3, [r2, #0]
 8000dac:	f003 0307 	and.w	r3, r3, #7
 8000db0:	428b      	cmp	r3, r1
 8000db2:	d329      	bcc.n	8000e08 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000db4:	6823      	ldr	r3, [r4, #0]
 8000db6:	07d9      	lsls	r1, r3, #31
 8000db8:	d431      	bmi.n	8000e1e <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000dba:	6821      	ldr	r1, [r4, #0]
 8000dbc:	078a      	lsls	r2, r1, #30
 8000dbe:	d45b      	bmi.n	8000e78 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000dc0:	4a3a      	ldr	r2, [pc, #232]	; (8000eac <HAL_RCC_ClockConfig+0x114>)
 8000dc2:	6813      	ldr	r3, [r2, #0]
 8000dc4:	f003 0307 	and.w	r3, r3, #7
 8000dc8:	429e      	cmp	r6, r3
 8000dca:	d35d      	bcc.n	8000e88 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dcc:	f011 0f04 	tst.w	r1, #4
 8000dd0:	4d37      	ldr	r5, [pc, #220]	; (8000eb0 <HAL_RCC_ClockConfig+0x118>)
 8000dd2:	d164      	bne.n	8000e9e <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dd4:	070b      	lsls	r3, r1, #28
 8000dd6:	d506      	bpl.n	8000de6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000dd8:	68ab      	ldr	r3, [r5, #8]
 8000dda:	6922      	ldr	r2, [r4, #16]
 8000ddc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000de0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000de4:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000de6:	f7ff fd5d 	bl	80008a4 <HAL_RCC_GetSysClockFreq>
 8000dea:	68ab      	ldr	r3, [r5, #8]
 8000dec:	4a31      	ldr	r2, [pc, #196]	; (8000eb4 <HAL_RCC_ClockConfig+0x11c>)
 8000dee:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8000df2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000df6:	5cd3      	ldrb	r3, [r2, r3]
 8000df8:	f003 031f 	and.w	r3, r3, #31
 8000dfc:	40d8      	lsrs	r0, r3
 8000dfe:	4b2e      	ldr	r3, [pc, #184]	; (8000eb8 <HAL_RCC_ClockConfig+0x120>)
 8000e00:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8000e02:	2000      	movs	r0, #0
 8000e04:	f002 b838 	b.w	8002e78 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e08:	6813      	ldr	r3, [r2, #0]
 8000e0a:	f023 0307 	bic.w	r3, r3, #7
 8000e0e:	430b      	orrs	r3, r1
 8000e10:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e12:	6813      	ldr	r3, [r2, #0]
 8000e14:	f003 0307 	and.w	r3, r3, #7
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d1c2      	bne.n	8000da2 <HAL_RCC_ClockConfig+0xa>
 8000e1c:	e7ca      	b.n	8000db4 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e1e:	6862      	ldr	r2, [r4, #4]
 8000e20:	4d23      	ldr	r5, [pc, #140]	; (8000eb0 <HAL_RCC_ClockConfig+0x118>)
 8000e22:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000e24:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e26:	d11b      	bne.n	8000e60 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000e28:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e2c:	d0b9      	beq.n	8000da2 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000e2e:	68ab      	ldr	r3, [r5, #8]
 8000e30:	f023 0303 	bic.w	r3, r3, #3
 8000e34:	4313      	orrs	r3, r2
 8000e36:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8000e38:	f7ff fb6a 	bl	8000510 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e3c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000e40:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e42:	68ab      	ldr	r3, [r5, #8]
 8000e44:	6862      	ldr	r2, [r4, #4]
 8000e46:	f003 030c 	and.w	r3, r3, #12
 8000e4a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000e4e:	d0b4      	beq.n	8000dba <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e50:	f7ff fb5e 	bl	8000510 <HAL_GetTick>
 8000e54:	1bc0      	subs	r0, r0, r7
 8000e56:	4540      	cmp	r0, r8
 8000e58:	d9f3      	bls.n	8000e42 <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 8000e5a:	2003      	movs	r0, #3
}
 8000e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e60:	2a02      	cmp	r2, #2
 8000e62:	d102      	bne.n	8000e6a <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e64:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e68:	e7e0      	b.n	8000e2c <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000e6a:	b912      	cbnz	r2, 8000e72 <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e6c:	f013 0f02 	tst.w	r3, #2
 8000e70:	e7dc      	b.n	8000e2c <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e72:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000e76:	e7d9      	b.n	8000e2c <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e78:	4a0d      	ldr	r2, [pc, #52]	; (8000eb0 <HAL_RCC_ClockConfig+0x118>)
 8000e7a:	68a0      	ldr	r0, [r4, #8]
 8000e7c:	6893      	ldr	r3, [r2, #8]
 8000e7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000e82:	4303      	orrs	r3, r0
 8000e84:	6093      	str	r3, [r2, #8]
 8000e86:	e79b      	b.n	8000dc0 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e88:	6813      	ldr	r3, [r2, #0]
 8000e8a:	f023 0307 	bic.w	r3, r3, #7
 8000e8e:	4333      	orrs	r3, r6
 8000e90:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e92:	6813      	ldr	r3, [r2, #0]
 8000e94:	f003 0307 	and.w	r3, r3, #7
 8000e98:	429e      	cmp	r6, r3
 8000e9a:	d182      	bne.n	8000da2 <HAL_RCC_ClockConfig+0xa>
 8000e9c:	e796      	b.n	8000dcc <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e9e:	68ab      	ldr	r3, [r5, #8]
 8000ea0:	68e2      	ldr	r2, [r4, #12]
 8000ea2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	60ab      	str	r3, [r5, #8]
 8000eaa:	e793      	b.n	8000dd4 <HAL_RCC_ClockConfig+0x3c>
 8000eac:	40022000 	.word	0x40022000
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	08003066 	.word	0x08003066
 8000eb8:	20000004 	.word	0x20000004

08000ebc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000ebe:	4a06      	ldr	r2, [pc, #24]	; (8000ed8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000ec6:	5cd3      	ldrb	r3, [r2, r3]
 8000ec8:	4a04      	ldr	r2, [pc, #16]	; (8000edc <HAL_RCC_GetPCLK1Freq+0x20>)
 8000eca:	6810      	ldr	r0, [r2, #0]
 8000ecc:	f003 031f 	and.w	r3, r3, #31
}
 8000ed0:	40d8      	lsrs	r0, r3
 8000ed2:	4770      	bx	lr
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	08003076 	.word	0x08003076
 8000edc:	20000004 	.word	0x20000004

08000ee0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000ee2:	4a06      	ldr	r2, [pc, #24]	; (8000efc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000eea:	5cd3      	ldrb	r3, [r2, r3]
 8000eec:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000eee:	6810      	ldr	r0, [r2, #0]
 8000ef0:	f003 031f 	and.w	r3, r3, #31
}
 8000ef4:	40d8      	lsrs	r0, r3
 8000ef6:	4770      	bx	lr
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	08003076 	.word	0x08003076
 8000f00:	20000004 	.word	0x20000004

08000f04 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000f04:	230f      	movs	r3, #15
 8000f06:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8000f08:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <HAL_RCC_GetClockConfig+0x34>)
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	f002 0203 	and.w	r2, r2, #3
 8000f10:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000f18:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8000f20:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	08db      	lsrs	r3, r3, #3
 8000f26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000f2a:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8000f2c:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <HAL_RCC_GetClockConfig+0x38>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 0307 	and.w	r3, r3, #7
 8000f34:	600b      	str	r3, [r1, #0]
 8000f36:	4770      	bx	lr
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40022000 	.word	0x40022000

08000f40 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8000f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8000f42:	4b45      	ldr	r3, [pc, #276]	; (8001058 <RCCEx_PLLSAI1_Config+0x118>)
 8000f44:	68da      	ldr	r2, [r3, #12]
 8000f46:	f012 0f03 	tst.w	r2, #3
{
 8000f4a:	4605      	mov	r5, r0
 8000f4c:	460e      	mov	r6, r1
 8000f4e:	461c      	mov	r4, r3
 8000f50:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8000f52:	d02a      	beq.n	8000faa <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8000f54:	68da      	ldr	r2, [r3, #12]
 8000f56:	f002 0203 	and.w	r2, r2, #3
 8000f5a:	4282      	cmp	r2, r0
 8000f5c:	d13c      	bne.n	8000fd8 <RCCEx_PLLSAI1_Config+0x98>
       ||
 8000f5e:	2a00      	cmp	r2, #0
 8000f60:	d03a      	beq.n	8000fd8 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8000f62:	68db      	ldr	r3, [r3, #12]
       ||
 8000f64:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8000f66:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8000f6a:	3301      	adds	r3, #1
       ||
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d133      	bne.n	8000fd8 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8000f70:	6823      	ldr	r3, [r4, #0]
 8000f72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000f76:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000f78:	f7ff faca 	bl	8000510 <HAL_GetTick>
 8000f7c:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8000f7e:	6823      	ldr	r3, [r4, #0]
 8000f80:	011a      	lsls	r2, r3, #4
 8000f82:	d432      	bmi.n	8000fea <RCCEx_PLLSAI1_Config+0xaa>
 8000f84:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8000f86:	2e00      	cmp	r6, #0
 8000f88:	d036      	beq.n	8000ff8 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8000f8a:	2e01      	cmp	r6, #1
 8000f8c:	d150      	bne.n	8001030 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8000f8e:	6922      	ldr	r2, [r4, #16]
 8000f90:	6928      	ldr	r0, [r5, #16]
 8000f92:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8000f96:	0840      	lsrs	r0, r0, #1
 8000f98:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8000f9c:	3801      	subs	r0, #1
 8000f9e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8000fa2:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8000fa6:	6122      	str	r2, [r4, #16]
 8000fa8:	e032      	b.n	8001010 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8000faa:	2802      	cmp	r0, #2
 8000fac:	d010      	beq.n	8000fd0 <RCCEx_PLLSAI1_Config+0x90>
 8000fae:	2803      	cmp	r0, #3
 8000fb0:	d014      	beq.n	8000fdc <RCCEx_PLLSAI1_Config+0x9c>
 8000fb2:	2801      	cmp	r0, #1
 8000fb4:	d110      	bne.n	8000fd8 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	079f      	lsls	r7, r3, #30
 8000fba:	d538      	bpl.n	800102e <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8000fbc:	68e3      	ldr	r3, [r4, #12]
 8000fbe:	686a      	ldr	r2, [r5, #4]
 8000fc0:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8000fc4:	3a01      	subs	r2, #1
 8000fc6:	4318      	orrs	r0, r3
 8000fc8:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8000fcc:	60e0      	str	r0, [r4, #12]
 8000fce:	e7cf      	b.n	8000f70 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8000fd6:	d1f1      	bne.n	8000fbc <RCCEx_PLLSAI1_Config+0x7c>
 8000fd8:	2001      	movs	r0, #1
 8000fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	0391      	lsls	r1, r2, #14
 8000fe0:	d4ec      	bmi.n	8000fbc <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8000fe8:	e7f5      	b.n	8000fd6 <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8000fea:	f7ff fa91 	bl	8000510 <HAL_GetTick>
 8000fee:	1bc0      	subs	r0, r0, r7
 8000ff0:	2802      	cmp	r0, #2
 8000ff2:	d9c4      	bls.n	8000f7e <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8000ff4:	2003      	movs	r0, #3
 8000ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8000ff8:	6921      	ldr	r1, [r4, #16]
 8000ffa:	68eb      	ldr	r3, [r5, #12]
 8000ffc:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8001000:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8001004:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8001008:	091b      	lsrs	r3, r3, #4
 800100a:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 800100e:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001010:	6823      	ldr	r3, [r4, #0]
 8001012:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001016:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001018:	f7ff fa7a 	bl	8000510 <HAL_GetTick>
 800101c:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800101e:	6823      	ldr	r3, [r4, #0]
 8001020:	011b      	lsls	r3, r3, #4
 8001022:	d513      	bpl.n	800104c <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001024:	6923      	ldr	r3, [r4, #16]
 8001026:	69aa      	ldr	r2, [r5, #24]
 8001028:	4313      	orrs	r3, r2
 800102a:	6123      	str	r3, [r4, #16]
 800102c:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800102e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001030:	6923      	ldr	r3, [r4, #16]
 8001032:	6968      	ldr	r0, [r5, #20]
 8001034:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001038:	0840      	lsrs	r0, r0, #1
 800103a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800103e:	3801      	subs	r0, #1
 8001040:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8001044:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001048:	6123      	str	r3, [r4, #16]
 800104a:	e7e1      	b.n	8001010 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800104c:	f7ff fa60 	bl	8000510 <HAL_GetTick>
 8001050:	1b80      	subs	r0, r0, r6
 8001052:	2802      	cmp	r0, #2
 8001054:	d9e3      	bls.n	800101e <RCCEx_PLLSAI1_Config+0xde>
 8001056:	e7cd      	b.n	8000ff4 <RCCEx_PLLSAI1_Config+0xb4>
 8001058:	40021000 	.word	0x40021000

0800105c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800105c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800105e:	4b3d      	ldr	r3, [pc, #244]	; (8001154 <RCCEx_PLLSAI2_Config+0xf8>)
 8001060:	68da      	ldr	r2, [r3, #12]
 8001062:	f012 0f03 	tst.w	r2, #3
{
 8001066:	4605      	mov	r5, r0
 8001068:	460e      	mov	r6, r1
 800106a:	461c      	mov	r4, r3
 800106c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800106e:	d028      	beq.n	80010c2 <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001070:	68da      	ldr	r2, [r3, #12]
 8001072:	f002 0203 	and.w	r2, r2, #3
 8001076:	4282      	cmp	r2, r0
 8001078:	d13a      	bne.n	80010f0 <RCCEx_PLLSAI2_Config+0x94>
       ||
 800107a:	2a00      	cmp	r2, #0
 800107c:	d038      	beq.n	80010f0 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800107e:	68db      	ldr	r3, [r3, #12]
       ||
 8001080:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001082:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001086:	3301      	adds	r3, #1
       ||
 8001088:	4293      	cmp	r3, r2
 800108a:	d131      	bne.n	80010f0 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800108c:	6823      	ldr	r3, [r4, #0]
 800108e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001092:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001094:	f7ff fa3c 	bl	8000510 <HAL_GetTick>
 8001098:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800109a:	6823      	ldr	r3, [r4, #0]
 800109c:	009a      	lsls	r2, r3, #2
 800109e:	d430      	bmi.n	8001102 <RCCEx_PLLSAI2_Config+0xa6>
 80010a0:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80010a2:	2e00      	cmp	r6, #0
 80010a4:	d034      	beq.n	8001110 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80010a6:	6963      	ldr	r3, [r4, #20]
 80010a8:	6929      	ldr	r1, [r5, #16]
 80010aa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80010ae:	0849      	lsrs	r1, r1, #1
 80010b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80010b4:	3901      	subs	r1, #1
 80010b6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80010ba:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80010be:	6163      	str	r3, [r4, #20]
 80010c0:	e032      	b.n	8001128 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 80010c2:	2802      	cmp	r0, #2
 80010c4:	d010      	beq.n	80010e8 <RCCEx_PLLSAI2_Config+0x8c>
 80010c6:	2803      	cmp	r0, #3
 80010c8:	d014      	beq.n	80010f4 <RCCEx_PLLSAI2_Config+0x98>
 80010ca:	2801      	cmp	r0, #1
 80010cc:	d110      	bne.n	80010f0 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	079f      	lsls	r7, r3, #30
 80010d2:	d538      	bpl.n	8001146 <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80010d4:	68e3      	ldr	r3, [r4, #12]
 80010d6:	686a      	ldr	r2, [r5, #4]
 80010d8:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80010dc:	3a01      	subs	r2, #1
 80010de:	4318      	orrs	r0, r3
 80010e0:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80010e4:	60e0      	str	r0, [r4, #12]
 80010e6:	e7d1      	b.n	800108c <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80010ee:	d1f1      	bne.n	80010d4 <RCCEx_PLLSAI2_Config+0x78>
 80010f0:	2001      	movs	r0, #1
 80010f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	0391      	lsls	r1, r2, #14
 80010f8:	d4ec      	bmi.n	80010d4 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001100:	e7f5      	b.n	80010ee <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001102:	f7ff fa05 	bl	8000510 <HAL_GetTick>
 8001106:	1bc0      	subs	r0, r0, r7
 8001108:	2802      	cmp	r0, #2
 800110a:	d9c6      	bls.n	800109a <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 800110c:	2003      	movs	r0, #3
 800110e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001110:	6962      	ldr	r2, [r4, #20]
 8001112:	68eb      	ldr	r3, [r5, #12]
 8001114:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8001118:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800111c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001120:	091b      	lsrs	r3, r3, #4
 8001122:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8001126:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8001128:	6823      	ldr	r3, [r4, #0]
 800112a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800112e:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001130:	f7ff f9ee 	bl	8000510 <HAL_GetTick>
 8001134:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8001136:	6823      	ldr	r3, [r4, #0]
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	d505      	bpl.n	8001148 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800113c:	6963      	ldr	r3, [r4, #20]
 800113e:	696a      	ldr	r2, [r5, #20]
 8001140:	4313      	orrs	r3, r2
 8001142:	6163      	str	r3, [r4, #20]
 8001144:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001148:	f7ff f9e2 	bl	8000510 <HAL_GetTick>
 800114c:	1b80      	subs	r0, r0, r6
 800114e:	2802      	cmp	r0, #2
 8001150:	d9f1      	bls.n	8001136 <RCCEx_PLLSAI2_Config+0xda>
 8001152:	e7db      	b.n	800110c <RCCEx_PLLSAI2_Config+0xb0>
 8001154:	40021000 	.word	0x40021000

08001158 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001158:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800115c:	6806      	ldr	r6, [r0, #0]
 800115e:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8001162:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001164:	d024      	beq.n	80011b0 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001166:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8001168:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800116c:	d02c      	beq.n	80011c8 <HAL_RCCEx_PeriphCLKConfig+0x70>
 800116e:	d802      	bhi.n	8001176 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001170:	b1c1      	cbz	r1, 80011a4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8001172:	2601      	movs	r6, #1
 8001174:	e01c      	b.n	80011b0 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001176:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800117a:	d00d      	beq.n	8001198 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800117c:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001180:	d1f7      	bne.n	8001172 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001182:	4a4d      	ldr	r2, [pc, #308]	; (80012b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001184:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001186:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800118a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800118e:	430b      	orrs	r3, r1
 8001190:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001194:	2600      	movs	r6, #0
 8001196:	e00b      	b.n	80011b0 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001198:	4a47      	ldr	r2, [pc, #284]	; (80012b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800119a:	68d3      	ldr	r3, [r2, #12]
 800119c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a0:	60d3      	str	r3, [r2, #12]
      break;
 80011a2:	e7ee      	b.n	8001182 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80011a4:	3004      	adds	r0, #4
 80011a6:	f7ff fecb 	bl	8000f40 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80011aa:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80011ac:	2800      	cmp	r0, #0
 80011ae:	d0e8      	beq.n	8001182 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80011b0:	6823      	ldr	r3, [r4, #0]
 80011b2:	04d8      	lsls	r0, r3, #19
 80011b4:	d506      	bpl.n	80011c4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 80011b6:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80011b8:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80011bc:	d074      	beq.n	80012a8 <HAL_RCCEx_PeriphCLKConfig+0x150>
 80011be:	d808      	bhi.n	80011d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80011c0:	b1a9      	cbz	r1, 80011ee <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 80011c2:	2601      	movs	r6, #1
 80011c4:	4635      	mov	r5, r6
 80011c6:	e021      	b.n	800120c <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80011c8:	2100      	movs	r1, #0
 80011ca:	3020      	adds	r0, #32
 80011cc:	f7ff ff46 	bl	800105c <RCCEx_PLLSAI2_Config>
 80011d0:	e7eb      	b.n	80011aa <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 80011d2:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80011d6:	d004      	beq.n	80011e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80011d8:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 80011dc:	d1f1      	bne.n	80011c2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80011de:	4635      	mov	r5, r6
 80011e0:	e009      	b.n	80011f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80011e2:	4a35      	ldr	r2, [pc, #212]	; (80012b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80011e4:	68d3      	ldr	r3, [r2, #12]
 80011e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ea:	60d3      	str	r3, [r2, #12]
 80011ec:	e7f7      	b.n	80011de <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80011ee:	1d20      	adds	r0, r4, #4
 80011f0:	f7ff fea6 	bl	8000f40 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80011f4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80011f6:	2d00      	cmp	r5, #0
 80011f8:	d15c      	bne.n	80012b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80011fa:	4a2f      	ldr	r2, [pc, #188]	; (80012b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80011fc:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80011fe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001202:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001206:	430b      	orrs	r3, r1
 8001208:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800120c:	6823      	ldr	r3, [r4, #0]
 800120e:	0399      	lsls	r1, r3, #14
 8001210:	f140 814f 	bpl.w	80014b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001214:	4f28      	ldr	r7, [pc, #160]	; (80012b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001216:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001218:	00da      	lsls	r2, r3, #3
 800121a:	f140 8176 	bpl.w	800150a <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 800121e:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001222:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80012bc <HAL_RCCEx_PeriphCLKConfig+0x164>
 8001226:	f8d9 3000 	ldr.w	r3, [r9]
 800122a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800122e:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8001232:	f7ff f96d 	bl	8000510 <HAL_GetTick>
 8001236:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001238:	f8d9 3000 	ldr.w	r3, [r9]
 800123c:	05db      	lsls	r3, r3, #23
 800123e:	d53f      	bpl.n	80012c0 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8001240:	2d00      	cmp	r5, #0
 8001242:	d144      	bne.n	80012ce <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001244:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001248:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800124c:	d015      	beq.n	800127a <HAL_RCCEx_PeriphCLKConfig+0x122>
 800124e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001252:	4293      	cmp	r3, r2
 8001254:	d011      	beq.n	800127a <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001256:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800125a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800125e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001262:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001266:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800126a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 800126e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001272:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8001276:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800127a:	07d8      	lsls	r0, r3, #31
 800127c:	d509      	bpl.n	8001292 <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 800127e:	f7ff f947 	bl	8000510 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001282:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001286:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001288:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800128c:	0799      	lsls	r1, r3, #30
 800128e:	f140 8109 	bpl.w	80014a4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001292:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001296:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800129a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800129e:	4313      	orrs	r3, r2
 80012a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80012a4:	4635      	mov	r5, r6
 80012a6:	e012      	b.n	80012ce <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80012a8:	2100      	movs	r1, #0
 80012aa:	f104 0020 	add.w	r0, r4, #32
 80012ae:	f7ff fed5 	bl	800105c <RCCEx_PLLSAI2_Config>
 80012b2:	e79f      	b.n	80011f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80012b4:	462e      	mov	r6, r5
 80012b6:	e7a9      	b.n	800120c <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012c0:	f7ff f926 	bl	8000510 <HAL_GetTick>
 80012c4:	eba0 000a 	sub.w	r0, r0, sl
 80012c8:	2802      	cmp	r0, #2
 80012ca:	d9b5      	bls.n	8001238 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 80012cc:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80012ce:	f1b8 0f00 	cmp.w	r8, #0
 80012d2:	d003      	beq.n	80012dc <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012da:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80012dc:	6823      	ldr	r3, [r4, #0]
 80012de:	07da      	lsls	r2, r3, #31
 80012e0:	d508      	bpl.n	80012f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80012e2:	4990      	ldr	r1, [pc, #576]	; (8001524 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80012e4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80012e6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80012ea:	f022 0203 	bic.w	r2, r2, #3
 80012ee:	4302      	orrs	r2, r0
 80012f0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80012f4:	079f      	lsls	r7, r3, #30
 80012f6:	d508      	bpl.n	800130a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80012f8:	498a      	ldr	r1, [pc, #552]	; (8001524 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80012fa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80012fc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001300:	f022 020c 	bic.w	r2, r2, #12
 8001304:	4302      	orrs	r2, r0
 8001306:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800130a:	075e      	lsls	r6, r3, #29
 800130c:	d508      	bpl.n	8001320 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800130e:	4985      	ldr	r1, [pc, #532]	; (8001524 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001310:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001312:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001316:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800131a:	4302      	orrs	r2, r0
 800131c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001320:	0718      	lsls	r0, r3, #28
 8001322:	d508      	bpl.n	8001336 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001324:	497f      	ldr	r1, [pc, #508]	; (8001524 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001326:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001328:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800132c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001330:	4302      	orrs	r2, r0
 8001332:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001336:	06d9      	lsls	r1, r3, #27
 8001338:	d508      	bpl.n	800134c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800133a:	497a      	ldr	r1, [pc, #488]	; (8001524 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800133c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800133e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001342:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001346:	4302      	orrs	r2, r0
 8001348:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800134c:	069a      	lsls	r2, r3, #26
 800134e:	d508      	bpl.n	8001362 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001350:	4974      	ldr	r1, [pc, #464]	; (8001524 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001352:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001354:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001358:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800135c:	4302      	orrs	r2, r0
 800135e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001362:	059f      	lsls	r7, r3, #22
 8001364:	d508      	bpl.n	8001378 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001366:	496f      	ldr	r1, [pc, #444]	; (8001524 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001368:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800136a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800136e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001372:	4302      	orrs	r2, r0
 8001374:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001378:	055e      	lsls	r6, r3, #21
 800137a:	d508      	bpl.n	800138e <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800137c:	4969      	ldr	r1, [pc, #420]	; (8001524 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800137e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001380:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001384:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001388:	4302      	orrs	r2, r0
 800138a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800138e:	0658      	lsls	r0, r3, #25
 8001390:	d508      	bpl.n	80013a4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001392:	4964      	ldr	r1, [pc, #400]	; (8001524 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001394:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001396:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800139a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800139e:	4302      	orrs	r2, r0
 80013a0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80013a4:	0619      	lsls	r1, r3, #24
 80013a6:	d508      	bpl.n	80013ba <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80013a8:	495e      	ldr	r1, [pc, #376]	; (8001524 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80013aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80013ac:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80013b0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80013b4:	4302      	orrs	r2, r0
 80013b6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80013ba:	05da      	lsls	r2, r3, #23
 80013bc:	d508      	bpl.n	80013d0 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80013be:	4959      	ldr	r1, [pc, #356]	; (8001524 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80013c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013c2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80013c6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80013ca:	4302      	orrs	r2, r0
 80013cc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80013d0:	049b      	lsls	r3, r3, #18
 80013d2:	d50f      	bpl.n	80013f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80013d4:	4a53      	ldr	r2, [pc, #332]	; (8001524 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80013d6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80013d8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80013dc:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80013e0:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80013e2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80013e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80013ea:	d164      	bne.n	80014b6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80013ec:	68d3      	ldr	r3, [r2, #12]
 80013ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80013f2:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80013f4:	6823      	ldr	r3, [r4, #0]
 80013f6:	031f      	lsls	r7, r3, #12
 80013f8:	d50f      	bpl.n	800141a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80013fa:	4a4a      	ldr	r2, [pc, #296]	; (8001524 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80013fc:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80013fe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001402:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001406:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001408:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800140c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001410:	d15c      	bne.n	80014cc <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001412:	68d3      	ldr	r3, [r2, #12]
 8001414:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001418:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800141a:	6823      	ldr	r3, [r4, #0]
 800141c:	035e      	lsls	r6, r3, #13
 800141e:	d50f      	bpl.n	8001440 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001420:	4a40      	ldr	r2, [pc, #256]	; (8001524 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001422:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001424:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001428:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800142c:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800142e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001432:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001436:	d154      	bne.n	80014e2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001438:	68d3      	ldr	r3, [r2, #12]
 800143a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800143e:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001440:	6823      	ldr	r3, [r4, #0]
 8001442:	0458      	lsls	r0, r3, #17
 8001444:	d512      	bpl.n	800146c <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001446:	4937      	ldr	r1, [pc, #220]	; (8001524 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001448:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800144a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800144e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001452:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001454:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800145c:	d14c      	bne.n	80014f8 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800145e:	2102      	movs	r1, #2
 8001460:	1d20      	adds	r0, r4, #4
 8001462:	f7ff fd6d 	bl	8000f40 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001466:	2800      	cmp	r0, #0
 8001468:	bf18      	it	ne
 800146a:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800146c:	6822      	ldr	r2, [r4, #0]
 800146e:	0411      	lsls	r1, r2, #16
 8001470:	d508      	bpl.n	8001484 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001472:	492c      	ldr	r1, [pc, #176]	; (8001524 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001474:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001476:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800147a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800147e:	4303      	orrs	r3, r0
 8001480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001484:	03d3      	lsls	r3, r2, #15
 8001486:	d509      	bpl.n	800149c <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001488:	4a26      	ldr	r2, [pc, #152]	; (8001524 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800148a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800148e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001492:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001496:	430b      	orrs	r3, r1
 8001498:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800149c:	4628      	mov	r0, r5
 800149e:	b002      	add	sp, #8
 80014a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014a4:	f7ff f834 	bl	8000510 <HAL_GetTick>
 80014a8:	1b40      	subs	r0, r0, r5
 80014aa:	4548      	cmp	r0, r9
 80014ac:	f67f aeec 	bls.w	8001288 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80014b0:	e70c      	b.n	80012cc <HAL_RCCEx_PeriphCLKConfig+0x174>
 80014b2:	4635      	mov	r5, r6
 80014b4:	e712      	b.n	80012dc <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80014b6:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80014ba:	d19b      	bne.n	80013f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80014bc:	2101      	movs	r1, #1
 80014be:	1d20      	adds	r0, r4, #4
 80014c0:	f7ff fd3e 	bl	8000f40 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80014c4:	2800      	cmp	r0, #0
 80014c6:	bf18      	it	ne
 80014c8:	4605      	movne	r5, r0
 80014ca:	e793      	b.n	80013f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80014cc:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80014d0:	d1a3      	bne.n	800141a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80014d2:	2101      	movs	r1, #1
 80014d4:	1d20      	adds	r0, r4, #4
 80014d6:	f7ff fd33 	bl	8000f40 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80014da:	2800      	cmp	r0, #0
 80014dc:	bf18      	it	ne
 80014de:	4605      	movne	r5, r0
 80014e0:	e79b      	b.n	800141a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80014e2:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80014e6:	d1ab      	bne.n	8001440 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80014e8:	2101      	movs	r1, #1
 80014ea:	1d20      	adds	r0, r4, #4
 80014ec:	f7ff fd28 	bl	8000f40 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80014f0:	2800      	cmp	r0, #0
 80014f2:	bf18      	it	ne
 80014f4:	4605      	movne	r5, r0
 80014f6:	e7a3      	b.n	8001440 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80014f8:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80014fc:	d1b6      	bne.n	800146c <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80014fe:	2102      	movs	r1, #2
 8001500:	f104 0020 	add.w	r0, r4, #32
 8001504:	f7ff fdaa 	bl	800105c <RCCEx_PLLSAI2_Config>
 8001508:	e7ad      	b.n	8001466 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800150a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001510:	65bb      	str	r3, [r7, #88]	; 0x58
 8001512:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001518:	9301      	str	r3, [sp, #4]
 800151a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800151c:	f04f 0801 	mov.w	r8, #1
 8001520:	e67f      	b.n	8001222 <HAL_RCCEx_PeriphCLKConfig+0xca>
 8001522:	bf00      	nop
 8001524:	40021000 	.word	0x40021000

08001528 <HAL_TIM_Base_MspInit>:
 8001528:	4770      	bx	lr
	...

0800152c <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800152c:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 800152e:	480a      	ldr	r0, [pc, #40]	; (8001558 <HAL_TIM_Base_Start_IT+0x2c>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001530:	68da      	ldr	r2, [r3, #12]
 8001532:	f042 0201 	orr.w	r2, r2, #1
 8001536:	60da      	str	r2, [r3, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8001538:	6899      	ldr	r1, [r3, #8]
 800153a:	4001      	ands	r1, r0
 800153c:	2906      	cmp	r1, #6
 800153e:	d008      	beq.n	8001552 <HAL_TIM_Base_Start_IT+0x26>
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	4002      	ands	r2, r0
 8001544:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 8001548:	bf1e      	ittt	ne
 800154a:	681a      	ldrne	r2, [r3, #0]
 800154c:	f042 0201 	orrne.w	r2, r2, #1
 8001550:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8001552:	2000      	movs	r0, #0
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	00010007 	.word	0x00010007

0800155c <HAL_TIM_OC_DelayElapsedCallback>:
 800155c:	4770      	bx	lr

0800155e <HAL_TIM_IC_CaptureCallback>:
 800155e:	4770      	bx	lr

08001560 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001560:	4770      	bx	lr

08001562 <HAL_TIM_TriggerCallback>:
 8001562:	4770      	bx	lr

08001564 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001564:	6803      	ldr	r3, [r0, #0]
 8001566:	691a      	ldr	r2, [r3, #16]
 8001568:	0791      	lsls	r1, r2, #30
{
 800156a:	b510      	push	{r4, lr}
 800156c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800156e:	d50f      	bpl.n	8001590 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001570:	68da      	ldr	r2, [r3, #12]
 8001572:	0792      	lsls	r2, r2, #30
 8001574:	d50c      	bpl.n	8001590 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001576:	f06f 0202 	mvn.w	r2, #2
 800157a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800157c:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800157e:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001580:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001582:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001584:	f000 8085 	beq.w	8001692 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001588:	f7ff ffe9 	bl	800155e <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800158c:	2300      	movs	r3, #0
 800158e:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001590:	6823      	ldr	r3, [r4, #0]
 8001592:	691a      	ldr	r2, [r3, #16]
 8001594:	0752      	lsls	r2, r2, #29
 8001596:	d510      	bpl.n	80015ba <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001598:	68da      	ldr	r2, [r3, #12]
 800159a:	0750      	lsls	r0, r2, #29
 800159c:	d50d      	bpl.n	80015ba <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800159e:	f06f 0204 	mvn.w	r2, #4
 80015a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015a4:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015a6:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015a8:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015ac:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015ae:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015b0:	d075      	beq.n	800169e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80015b2:	f7ff ffd4 	bl	800155e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015b6:	2300      	movs	r3, #0
 80015b8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015ba:	6823      	ldr	r3, [r4, #0]
 80015bc:	691a      	ldr	r2, [r3, #16]
 80015be:	0711      	lsls	r1, r2, #28
 80015c0:	d50f      	bpl.n	80015e2 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80015c2:	68da      	ldr	r2, [r3, #12]
 80015c4:	0712      	lsls	r2, r2, #28
 80015c6:	d50c      	bpl.n	80015e2 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80015c8:	f06f 0208 	mvn.w	r2, #8
 80015cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015ce:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015d0:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015d2:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015d4:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015d6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015d8:	d067      	beq.n	80016aa <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80015da:	f7ff ffc0 	bl	800155e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015de:	2300      	movs	r3, #0
 80015e0:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80015e2:	6823      	ldr	r3, [r4, #0]
 80015e4:	691a      	ldr	r2, [r3, #16]
 80015e6:	06d0      	lsls	r0, r2, #27
 80015e8:	d510      	bpl.n	800160c <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	06d1      	lsls	r1, r2, #27
 80015ee:	d50d      	bpl.n	800160c <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80015f0:	f06f 0210 	mvn.w	r2, #16
 80015f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015f6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80015f8:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015fa:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80015fe:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001600:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001602:	d058      	beq.n	80016b6 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8001604:	f7ff ffab 	bl	800155e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001608:	2300      	movs	r3, #0
 800160a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800160c:	6823      	ldr	r3, [r4, #0]
 800160e:	691a      	ldr	r2, [r3, #16]
 8001610:	07d2      	lsls	r2, r2, #31
 8001612:	d508      	bpl.n	8001626 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	07d0      	lsls	r0, r2, #31
 8001618:	d505      	bpl.n	8001626 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800161a:	f06f 0201 	mvn.w	r2, #1
 800161e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001620:	4620      	mov	r0, r4
 8001622:	f001 fbcd 	bl	8002dc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001626:	6823      	ldr	r3, [r4, #0]
 8001628:	691a      	ldr	r2, [r3, #16]
 800162a:	0611      	lsls	r1, r2, #24
 800162c:	d508      	bpl.n	8001640 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800162e:	68da      	ldr	r2, [r3, #12]
 8001630:	0612      	lsls	r2, r2, #24
 8001632:	d505      	bpl.n	8001640 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001634:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800163a:	4620      	mov	r0, r4
 800163c:	f000 f8c3 	bl	80017c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001640:	6823      	ldr	r3, [r4, #0]
 8001642:	691a      	ldr	r2, [r3, #16]
 8001644:	05d0      	lsls	r0, r2, #23
 8001646:	d508      	bpl.n	800165a <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001648:	68da      	ldr	r2, [r3, #12]
 800164a:	0611      	lsls	r1, r2, #24
 800164c:	d505      	bpl.n	800165a <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800164e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001654:	4620      	mov	r0, r4
 8001656:	f000 f8b7 	bl	80017c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800165a:	6823      	ldr	r3, [r4, #0]
 800165c:	691a      	ldr	r2, [r3, #16]
 800165e:	0652      	lsls	r2, r2, #25
 8001660:	d508      	bpl.n	8001674 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001662:	68da      	ldr	r2, [r3, #12]
 8001664:	0650      	lsls	r0, r2, #25
 8001666:	d505      	bpl.n	8001674 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001668:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800166c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800166e:	4620      	mov	r0, r4
 8001670:	f7ff ff77 	bl	8001562 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001674:	6823      	ldr	r3, [r4, #0]
 8001676:	691a      	ldr	r2, [r3, #16]
 8001678:	0691      	lsls	r1, r2, #26
 800167a:	d522      	bpl.n	80016c2 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800167c:	68da      	ldr	r2, [r3, #12]
 800167e:	0692      	lsls	r2, r2, #26
 8001680:	d51f      	bpl.n	80016c2 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001682:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 8001686:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001688:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800168a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 800168e:	f000 b899 	b.w	80017c4 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001692:	f7ff ff63 	bl	800155c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001696:	4620      	mov	r0, r4
 8001698:	f7ff ff62 	bl	8001560 <HAL_TIM_PWM_PulseFinishedCallback>
 800169c:	e776      	b.n	800158c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800169e:	f7ff ff5d 	bl	800155c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016a2:	4620      	mov	r0, r4
 80016a4:	f7ff ff5c 	bl	8001560 <HAL_TIM_PWM_PulseFinishedCallback>
 80016a8:	e785      	b.n	80015b6 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016aa:	f7ff ff57 	bl	800155c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016ae:	4620      	mov	r0, r4
 80016b0:	f7ff ff56 	bl	8001560 <HAL_TIM_PWM_PulseFinishedCallback>
 80016b4:	e793      	b.n	80015de <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016b6:	f7ff ff51 	bl	800155c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016ba:	4620      	mov	r0, r4
 80016bc:	f7ff ff50 	bl	8001560 <HAL_TIM_PWM_PulseFinishedCallback>
 80016c0:	e7a2      	b.n	8001608 <HAL_TIM_IRQHandler+0xa4>
 80016c2:	bd10      	pop	{r4, pc}

080016c4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016c4:	4a30      	ldr	r2, [pc, #192]	; (8001788 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80016c6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016c8:	4290      	cmp	r0, r2
 80016ca:	d012      	beq.n	80016f2 <TIM_Base_SetConfig+0x2e>
 80016cc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80016d0:	d00f      	beq.n	80016f2 <TIM_Base_SetConfig+0x2e>
 80016d2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80016d6:	4290      	cmp	r0, r2
 80016d8:	d00b      	beq.n	80016f2 <TIM_Base_SetConfig+0x2e>
 80016da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016de:	4290      	cmp	r0, r2
 80016e0:	d007      	beq.n	80016f2 <TIM_Base_SetConfig+0x2e>
 80016e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016e6:	4290      	cmp	r0, r2
 80016e8:	d003      	beq.n	80016f2 <TIM_Base_SetConfig+0x2e>
 80016ea:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80016ee:	4290      	cmp	r0, r2
 80016f0:	d119      	bne.n	8001726 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80016f2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80016f8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80016fa:	4a23      	ldr	r2, [pc, #140]	; (8001788 <TIM_Base_SetConfig+0xc4>)
 80016fc:	4290      	cmp	r0, r2
 80016fe:	d01d      	beq.n	800173c <TIM_Base_SetConfig+0x78>
 8001700:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001704:	d01a      	beq.n	800173c <TIM_Base_SetConfig+0x78>
 8001706:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800170a:	4290      	cmp	r0, r2
 800170c:	d016      	beq.n	800173c <TIM_Base_SetConfig+0x78>
 800170e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001712:	4290      	cmp	r0, r2
 8001714:	d012      	beq.n	800173c <TIM_Base_SetConfig+0x78>
 8001716:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800171a:	4290      	cmp	r0, r2
 800171c:	d00e      	beq.n	800173c <TIM_Base_SetConfig+0x78>
 800171e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8001722:	4290      	cmp	r0, r2
 8001724:	d00a      	beq.n	800173c <TIM_Base_SetConfig+0x78>
 8001726:	4a19      	ldr	r2, [pc, #100]	; (800178c <TIM_Base_SetConfig+0xc8>)
 8001728:	4290      	cmp	r0, r2
 800172a:	d007      	beq.n	800173c <TIM_Base_SetConfig+0x78>
 800172c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001730:	4290      	cmp	r0, r2
 8001732:	d003      	beq.n	800173c <TIM_Base_SetConfig+0x78>
 8001734:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001738:	4290      	cmp	r0, r2
 800173a:	d103      	bne.n	8001744 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800173c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800173e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001742:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001744:	694a      	ldr	r2, [r1, #20]
 8001746:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800174a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800174c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800174e:	688b      	ldr	r3, [r1, #8]
 8001750:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001752:	680b      	ldr	r3, [r1, #0]
 8001754:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001756:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <TIM_Base_SetConfig+0xc4>)
 8001758:	4298      	cmp	r0, r3
 800175a:	d00f      	beq.n	800177c <TIM_Base_SetConfig+0xb8>
 800175c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001760:	4298      	cmp	r0, r3
 8001762:	d00b      	beq.n	800177c <TIM_Base_SetConfig+0xb8>
 8001764:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001768:	4298      	cmp	r0, r3
 800176a:	d007      	beq.n	800177c <TIM_Base_SetConfig+0xb8>
 800176c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001770:	4298      	cmp	r0, r3
 8001772:	d003      	beq.n	800177c <TIM_Base_SetConfig+0xb8>
 8001774:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001778:	4298      	cmp	r0, r3
 800177a:	d101      	bne.n	8001780 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800177c:	690b      	ldr	r3, [r1, #16]
 800177e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001780:	2301      	movs	r3, #1
 8001782:	6143      	str	r3, [r0, #20]
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	40012c00 	.word	0x40012c00
 800178c:	40014000 	.word	0x40014000

08001790 <HAL_TIM_Base_Init>:
{
 8001790:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001792:	4604      	mov	r4, r0
 8001794:	b1a0      	cbz	r0, 80017c0 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001796:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800179a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800179e:	b91b      	cbnz	r3, 80017a8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80017a0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80017a4:	f7ff fec0 	bl	8001528 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80017a8:	2302      	movs	r3, #2
 80017aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017ae:	6820      	ldr	r0, [r4, #0]
 80017b0:	1d21      	adds	r1, r4, #4
 80017b2:	f7ff ff87 	bl	80016c4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80017b6:	2301      	movs	r3, #1
 80017b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80017bc:	2000      	movs	r0, #0
 80017be:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80017c0:	2001      	movs	r0, #1
}
 80017c2:	bd10      	pop	{r4, pc}

080017c4 <HAL_TIMEx_CommutationCallback>:
 80017c4:	4770      	bx	lr

080017c6 <HAL_TIMEx_BreakCallback>:
 80017c6:	4770      	bx	lr

080017c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80017c8:	4770      	bx	lr
	...

080017cc <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80017cc:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80017ce:	69c1      	ldr	r1, [r0, #28]
{
 80017d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017d2:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80017d4:	6883      	ldr	r3, [r0, #8]
 80017d6:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80017d8:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80017da:	4303      	orrs	r3, r0
 80017dc:	6960      	ldr	r0, [r4, #20]
 80017de:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80017e0:	48ba      	ldr	r0, [pc, #744]	; (8001acc <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80017e2:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80017e4:	4028      	ands	r0, r5
 80017e6:	4303      	orrs	r3, r0
 80017e8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80017ea:	6853      	ldr	r3, [r2, #4]
 80017ec:	68e0      	ldr	r0, [r4, #12]
 80017ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017f2:	4303      	orrs	r3, r0
 80017f4:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80017f6:	4bb6      	ldr	r3, [pc, #728]	; (8001ad0 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80017f8:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80017fa:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 80017fc:	bf1c      	itt	ne
 80017fe:	6a23      	ldrne	r3, [r4, #32]
 8001800:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001802:	6893      	ldr	r3, [r2, #8]
 8001804:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001808:	4303      	orrs	r3, r0
 800180a:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800180c:	4bb1      	ldr	r3, [pc, #708]	; (8001ad4 <UART_SetConfig+0x308>)
 800180e:	429a      	cmp	r2, r3
 8001810:	d119      	bne.n	8001846 <UART_SetConfig+0x7a>
 8001812:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001816:	4ab0      	ldr	r2, [pc, #704]	; (8001ad8 <UART_SetConfig+0x30c>)
 8001818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800181c:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001820:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001824:	5cd3      	ldrb	r3, [r2, r3]
 8001826:	f040 8138 	bne.w	8001a9a <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 800182a:	2b08      	cmp	r3, #8
 800182c:	f200 808f 	bhi.w	800194e <UART_SetConfig+0x182>
 8001830:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001834:	00ca011a 	.word	0x00ca011a
 8001838:	008d00f9 	.word	0x008d00f9
 800183c:	008d0114 	.word	0x008d0114
 8001840:	008d008d 	.word	0x008d008d
 8001844:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001846:	4ba5      	ldr	r3, [pc, #660]	; (8001adc <UART_SetConfig+0x310>)
 8001848:	429a      	cmp	r2, r3
 800184a:	d107      	bne.n	800185c <UART_SetConfig+0x90>
 800184c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001850:	4aa3      	ldr	r2, [pc, #652]	; (8001ae0 <UART_SetConfig+0x314>)
 8001852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001856:	f003 030c 	and.w	r3, r3, #12
 800185a:	e7e1      	b.n	8001820 <UART_SetConfig+0x54>
 800185c:	4ba1      	ldr	r3, [pc, #644]	; (8001ae4 <UART_SetConfig+0x318>)
 800185e:	429a      	cmp	r2, r3
 8001860:	d123      	bne.n	80018aa <UART_SetConfig+0xde>
 8001862:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8001866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800186a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800186e:	2b10      	cmp	r3, #16
 8001870:	f000 80f1 	beq.w	8001a56 <UART_SetConfig+0x28a>
 8001874:	d80b      	bhi.n	800188e <UART_SetConfig+0xc2>
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 80f3 	beq.w	8001a62 <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800187c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001880:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001884:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001888:	f000 80f8 	beq.w	8001a7c <UART_SetConfig+0x2b0>
 800188c:	e0a8      	b.n	80019e0 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800188e:	2b20      	cmp	r3, #32
 8001890:	f000 80c6 	beq.w	8001a20 <UART_SetConfig+0x254>
 8001894:	2b30      	cmp	r3, #48	; 0x30
 8001896:	d1f1      	bne.n	800187c <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001898:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800189c:	f040 80b8 	bne.w	8001a10 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80018a0:	6860      	ldr	r0, [r4, #4]
 80018a2:	0843      	lsrs	r3, r0, #1
 80018a4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80018a8:	e0c3      	b.n	8001a32 <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018aa:	4b8f      	ldr	r3, [pc, #572]	; (8001ae8 <UART_SetConfig+0x31c>)
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d11e      	bne.n	80018ee <UART_SetConfig+0x122>
 80018b0:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80018b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80018bc:	2b40      	cmp	r3, #64	; 0x40
 80018be:	f000 80bb 	beq.w	8001a38 <UART_SetConfig+0x26c>
 80018c2:	d80a      	bhi.n	80018da <UART_SetConfig+0x10e>
 80018c4:	b97b      	cbnz	r3, 80018e6 <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 80018c6:	4b82      	ldr	r3, [pc, #520]	; (8001ad0 <UART_SetConfig+0x304>)
 80018c8:	429a      	cmp	r2, r3
 80018ca:	f040 80ca 	bne.w	8001a62 <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80018ce:	f7ff faf5 	bl	8000ebc <HAL_RCC_GetPCLK1Freq>
        break;
 80018d2:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 80018d4:	bbb0      	cbnz	r0, 8001944 <UART_SetConfig+0x178>
 80018d6:	4602      	mov	r2, r0
 80018d8:	e03a      	b.n	8001950 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018da:	2b80      	cmp	r3, #128	; 0x80
 80018dc:	f000 809d 	beq.w	8001a1a <UART_SetConfig+0x24e>
 80018e0:	2bc0      	cmp	r3, #192	; 0xc0
 80018e2:	f000 80b0 	beq.w	8001a46 <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 80018e6:	4b7a      	ldr	r3, [pc, #488]	; (8001ad0 <UART_SetConfig+0x304>)
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d1c7      	bne.n	800187c <UART_SetConfig+0xb0>
 80018ec:	e02f      	b.n	800194e <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018ee:	4b7f      	ldr	r3, [pc, #508]	; (8001aec <UART_SetConfig+0x320>)
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d111      	bne.n	8001918 <UART_SetConfig+0x14c>
 80018f4:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 80018f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001904:	f000 8098 	beq.w	8001a38 <UART_SetConfig+0x26c>
 8001908:	d9dc      	bls.n	80018c4 <UART_SetConfig+0xf8>
 800190a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800190e:	f000 8084 	beq.w	8001a1a <UART_SetConfig+0x24e>
 8001912:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001916:	e7e4      	b.n	80018e2 <UART_SetConfig+0x116>
 8001918:	4b6d      	ldr	r3, [pc, #436]	; (8001ad0 <UART_SetConfig+0x304>)
 800191a:	429a      	cmp	r2, r3
 800191c:	d1ae      	bne.n	800187c <UART_SetConfig+0xb0>
 800191e:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8001922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001926:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800192a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800192e:	f000 8083 	beq.w	8001a38 <UART_SetConfig+0x26c>
 8001932:	d9c7      	bls.n	80018c4 <UART_SetConfig+0xf8>
 8001934:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001938:	d06f      	beq.n	8001a1a <UART_SetConfig+0x24e>
 800193a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800193e:	e7d0      	b.n	80018e2 <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001940:	486b      	ldr	r0, [pc, #428]	; (8001af0 <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8001942:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8001944:	6862      	ldr	r2, [r4, #4]
 8001946:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800194a:	4281      	cmp	r1, r0
 800194c:	d905      	bls.n	800195a <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 800194e:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001950:	2300      	movs	r3, #0
 8001952:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001954:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001956:	4610      	mov	r0, r2
 8001958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 800195a:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800195e:	d8f6      	bhi.n	800194e <UART_SetConfig+0x182>
        switch (clocksource)
 8001960:	2b08      	cmp	r3, #8
 8001962:	d82e      	bhi.n	80019c2 <UART_SetConfig+0x1f6>
 8001964:	e8df f003 	tbb	[pc, r3]
 8001968:	2d1c2d05 	.word	0x2d1c2d05
 800196c:	2d2d2d24 	.word	0x2d2d2d24
 8001970:	27          	.byte	0x27
 8001971:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001972:	f7ff faa3 	bl	8000ebc <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001976:	6862      	ldr	r2, [r4, #4]
 8001978:	f44f 7180 	mov.w	r1, #256	; 0x100
 800197c:	0856      	lsrs	r6, r2, #1
 800197e:	2700      	movs	r7, #0
 8001980:	fbe1 6700 	umlal	r6, r7, r1, r0
 8001984:	2300      	movs	r3, #0
 8001986:	4630      	mov	r0, r6
 8001988:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800198a:	f7fe fc21 	bl	80001d0 <__aeabi_uldivmod>
            break;
 800198e:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001990:	4b58      	ldr	r3, [pc, #352]	; (8001af4 <UART_SetConfig+0x328>)
 8001992:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8001996:	4299      	cmp	r1, r3
 8001998:	d8d9      	bhi.n	800194e <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 800199a:	6823      	ldr	r3, [r4, #0]
 800199c:	60d8      	str	r0, [r3, #12]
 800199e:	e7d7      	b.n	8001950 <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80019a0:	4855      	ldr	r0, [pc, #340]	; (8001af8 <UART_SetConfig+0x32c>)
 80019a2:	0855      	lsrs	r5, r2, #1
 80019a4:	2300      	movs	r3, #0
 80019a6:	2100      	movs	r1, #0
 80019a8:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80019aa:	f141 0100 	adc.w	r1, r1, #0
 80019ae:	e7ec      	b.n	800198a <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80019b0:	f7fe ff78 	bl	80008a4 <HAL_RCC_GetSysClockFreq>
 80019b4:	e7df      	b.n	8001976 <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80019b6:	0850      	lsrs	r0, r2, #1
 80019b8:	2100      	movs	r1, #0
 80019ba:	2300      	movs	r3, #0
 80019bc:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 80019c0:	e7f3      	b.n	80019aa <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 80019c2:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80019c4:	2000      	movs	r0, #0
 80019c6:	e7e3      	b.n	8001990 <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80019c8:	f7ff fa8a 	bl	8000ee0 <HAL_RCC_GetPCLK2Freq>
 80019cc:	e04e      	b.n	8001a6c <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80019ce:	f7ff fa75 	bl	8000ebc <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80019d2:	6862      	ldr	r2, [r4, #4]
 80019d4:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80019d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80019dc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80019de:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80019e0:	f1a3 0010 	sub.w	r0, r3, #16
 80019e4:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80019e8:	4288      	cmp	r0, r1
 80019ea:	d8b0      	bhi.n	800194e <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 80019ec:	6821      	ldr	r1, [r4, #0]
 80019ee:	60cb      	str	r3, [r1, #12]
 80019f0:	e7ae      	b.n	8001950 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80019f2:	f7ff fa75 	bl	8000ee0 <HAL_RCC_GetPCLK2Freq>
 80019f6:	e7ec      	b.n	80019d2 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80019f8:	6860      	ldr	r0, [r4, #4]
 80019fa:	0843      	lsrs	r3, r0, #1
 80019fc:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001a00:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001a04:	fbb3 f3f0 	udiv	r3, r3, r0
 8001a08:	e7e8      	b.n	80019dc <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001a0a:	f7fe ff4b 	bl	80008a4 <HAL_RCC_GetSysClockFreq>
 8001a0e:	e7e0      	b.n	80019d2 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001a10:	6860      	ldr	r0, [r4, #4]
 8001a12:	0843      	lsrs	r3, r0, #1
 8001a14:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001a18:	e7f4      	b.n	8001a04 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001a1a:	4b2d      	ldr	r3, [pc, #180]	; (8001ad0 <UART_SetConfig+0x304>)
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d08f      	beq.n	8001940 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a20:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001a24:	d1e8      	bne.n	80019f8 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001a26:	6860      	ldr	r0, [r4, #4]
 8001a28:	0843      	lsrs	r3, r0, #1
 8001a2a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8001a2e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001a32:	fbb3 f3f0 	udiv	r3, r3, r0
 8001a36:	e01f      	b.n	8001a78 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001a38:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <UART_SetConfig+0x304>)
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d10b      	bne.n	8001a56 <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001a3e:	f7fe ff31 	bl	80008a4 <HAL_RCC_GetSysClockFreq>
        break;
 8001a42:	2304      	movs	r3, #4
 8001a44:	e746      	b.n	80018d4 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001a46:	4b22      	ldr	r3, [pc, #136]	; (8001ad0 <UART_SetConfig+0x304>)
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	f47f af25 	bne.w	8001898 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001a4e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8001a52:	2308      	movs	r3, #8
 8001a54:	e776      	b.n	8001944 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a56:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001a5a:	d1d6      	bne.n	8001a0a <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001a5c:	f7fe ff22 	bl	80008a4 <HAL_RCC_GetSysClockFreq>
 8001a60:	e004      	b.n	8001a6c <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a62:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001a66:	d1b2      	bne.n	80019ce <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001a68:	f7ff fa28 	bl	8000ebc <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001a6c:	6861      	ldr	r1, [r4, #4]
 8001a6e:	084a      	lsrs	r2, r1, #1
 8001a70:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001a74:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a78:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001a7a:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001a7c:	f1a3 0010 	sub.w	r0, r3, #16
 8001a80:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001a84:	4288      	cmp	r0, r1
 8001a86:	f63f af62 	bhi.w	800194e <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 8001a8a:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8001a8e:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001a90:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8001a94:	430b      	orrs	r3, r1
 8001a96:	60c3      	str	r3, [r0, #12]
 8001a98:	e75a      	b.n	8001950 <UART_SetConfig+0x184>
    switch (clocksource)
 8001a9a:	2b08      	cmp	r3, #8
 8001a9c:	f63f af57 	bhi.w	800194e <UART_SetConfig+0x182>
 8001aa0:	a201      	add	r2, pc, #4	; (adr r2, 8001aa8 <UART_SetConfig+0x2dc>)
 8001aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa6:	bf00      	nop
 8001aa8:	080019cf 	.word	0x080019cf
 8001aac:	080019f3 	.word	0x080019f3
 8001ab0:	080019f9 	.word	0x080019f9
 8001ab4:	0800194f 	.word	0x0800194f
 8001ab8:	08001a0b 	.word	0x08001a0b
 8001abc:	0800194f 	.word	0x0800194f
 8001ac0:	0800194f 	.word	0x0800194f
 8001ac4:	0800194f 	.word	0x0800194f
 8001ac8:	08001a11 	.word	0x08001a11
 8001acc:	efff69f3 	.word	0xefff69f3
 8001ad0:	40008000 	.word	0x40008000
 8001ad4:	40013800 	.word	0x40013800
 8001ad8:	08003044 	.word	0x08003044
 8001adc:	40004400 	.word	0x40004400
 8001ae0:	08003048 	.word	0x08003048
 8001ae4:	40004800 	.word	0x40004800
 8001ae8:	40004c00 	.word	0x40004c00
 8001aec:	40005000 	.word	0x40005000
 8001af0:	00f42400 	.word	0x00f42400
 8001af4:	000ffcff 	.word	0x000ffcff
 8001af8:	f4240000 	.word	0xf4240000

08001afc <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001afc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001afe:	07da      	lsls	r2, r3, #31
{
 8001b00:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001b02:	d506      	bpl.n	8001b12 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001b04:	6801      	ldr	r1, [r0, #0]
 8001b06:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001b08:	684a      	ldr	r2, [r1, #4]
 8001b0a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001b0e:	4322      	orrs	r2, r4
 8001b10:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001b12:	079c      	lsls	r4, r3, #30
 8001b14:	d506      	bpl.n	8001b24 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001b16:	6801      	ldr	r1, [r0, #0]
 8001b18:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001b1a:	684a      	ldr	r2, [r1, #4]
 8001b1c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b20:	4322      	orrs	r2, r4
 8001b22:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001b24:	0759      	lsls	r1, r3, #29
 8001b26:	d506      	bpl.n	8001b36 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001b28:	6801      	ldr	r1, [r0, #0]
 8001b2a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001b2c:	684a      	ldr	r2, [r1, #4]
 8001b2e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b32:	4322      	orrs	r2, r4
 8001b34:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001b36:	071a      	lsls	r2, r3, #28
 8001b38:	d506      	bpl.n	8001b48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001b3a:	6801      	ldr	r1, [r0, #0]
 8001b3c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001b3e:	684a      	ldr	r2, [r1, #4]
 8001b40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b44:	4322      	orrs	r2, r4
 8001b46:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001b48:	06dc      	lsls	r4, r3, #27
 8001b4a:	d506      	bpl.n	8001b5a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001b4c:	6801      	ldr	r1, [r0, #0]
 8001b4e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001b50:	688a      	ldr	r2, [r1, #8]
 8001b52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b56:	4322      	orrs	r2, r4
 8001b58:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001b5a:	0699      	lsls	r1, r3, #26
 8001b5c:	d506      	bpl.n	8001b6c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001b5e:	6801      	ldr	r1, [r0, #0]
 8001b60:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001b62:	688a      	ldr	r2, [r1, #8]
 8001b64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b68:	4322      	orrs	r2, r4
 8001b6a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001b6c:	065a      	lsls	r2, r3, #25
 8001b6e:	d50f      	bpl.n	8001b90 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001b70:	6801      	ldr	r1, [r0, #0]
 8001b72:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001b74:	684a      	ldr	r2, [r1, #4]
 8001b76:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001b7a:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001b7c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001b80:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001b82:	d105      	bne.n	8001b90 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001b84:	684a      	ldr	r2, [r1, #4]
 8001b86:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001b88:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001b8c:	4322      	orrs	r2, r4
 8001b8e:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001b90:	061b      	lsls	r3, r3, #24
 8001b92:	d506      	bpl.n	8001ba2 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001b94:	6802      	ldr	r2, [r0, #0]
 8001b96:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001b98:	6853      	ldr	r3, [r2, #4]
 8001b9a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001b9e:	430b      	orrs	r3, r1
 8001ba0:	6053      	str	r3, [r2, #4]
 8001ba2:	bd10      	pop	{r4, pc}

08001ba4 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ba8:	9d06      	ldr	r5, [sp, #24]
 8001baa:	4604      	mov	r4, r0
 8001bac:	460f      	mov	r7, r1
 8001bae:	4616      	mov	r6, r2
 8001bb0:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bb2:	6821      	ldr	r1, [r4, #0]
 8001bb4:	69ca      	ldr	r2, [r1, #28]
 8001bb6:	ea37 0302 	bics.w	r3, r7, r2
 8001bba:	bf0c      	ite	eq
 8001bbc:	2201      	moveq	r2, #1
 8001bbe:	2200      	movne	r2, #0
 8001bc0:	42b2      	cmp	r2, r6
 8001bc2:	d002      	beq.n	8001bca <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001bc4:	2000      	movs	r0, #0
}
 8001bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001bca:	1c6b      	adds	r3, r5, #1
 8001bcc:	d0f2      	beq.n	8001bb4 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001bce:	b99d      	cbnz	r5, 8001bf8 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001bd0:	6823      	ldr	r3, [r4, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001bd8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	f022 0201 	bic.w	r2, r2, #1
 8001be0:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001be2:	2320      	movs	r3, #32
 8001be4:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8001be8:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8001bec:	2300      	movs	r3, #0
 8001bee:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8001bf2:	2003      	movs	r0, #3
 8001bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001bf8:	f7fe fc8a 	bl	8000510 <HAL_GetTick>
 8001bfc:	eba0 0008 	sub.w	r0, r0, r8
 8001c00:	4285      	cmp	r5, r0
 8001c02:	d2d6      	bcs.n	8001bb2 <UART_WaitOnFlagUntilTimeout+0xe>
 8001c04:	e7e4      	b.n	8001bd0 <UART_WaitOnFlagUntilTimeout+0x2c>

08001c06 <UART_CheckIdleState>:
{
 8001c06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001c08:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c0a:	2600      	movs	r6, #0
 8001c0c:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8001c0e:	f7fe fc7f 	bl	8000510 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001c12:	6823      	ldr	r3, [r4, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001c18:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001c1a:	d417      	bmi.n	8001c4c <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001c1c:	6823      	ldr	r3, [r4, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	075b      	lsls	r3, r3, #29
 8001c22:	d50a      	bpl.n	8001c3a <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001c24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	462b      	mov	r3, r5
 8001c2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001c32:	4620      	mov	r0, r4
 8001c34:	f7ff ffb6 	bl	8001ba4 <UART_WaitOnFlagUntilTimeout>
 8001c38:	b9a0      	cbnz	r0, 8001c64 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8001c3a:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001c3c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001c3e:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8001c42:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8001c46:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8001c4a:	e00c      	b.n	8001c66 <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001c4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	4632      	mov	r2, r6
 8001c54:	4603      	mov	r3, r0
 8001c56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	f7ff ffa2 	bl	8001ba4 <UART_WaitOnFlagUntilTimeout>
 8001c60:	2800      	cmp	r0, #0
 8001c62:	d0db      	beq.n	8001c1c <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001c64:	2003      	movs	r0, #3
}
 8001c66:	b002      	add	sp, #8
 8001c68:	bd70      	pop	{r4, r5, r6, pc}

08001c6a <HAL_UART_Init>:
{
 8001c6a:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001c6c:	4604      	mov	r4, r0
 8001c6e:	b360      	cbz	r0, 8001cca <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001c70:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8001c74:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c78:	b91b      	cbnz	r3, 8001c82 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001c7a:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001c7e:	f001 f8c9 	bl	8002e14 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001c82:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001c84:	2324      	movs	r3, #36	; 0x24
 8001c86:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8001c8a:	6813      	ldr	r3, [r2, #0]
 8001c8c:	f023 0301 	bic.w	r3, r3, #1
 8001c90:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c92:	4620      	mov	r0, r4
 8001c94:	f7ff fd9a 	bl	80017cc <UART_SetConfig>
 8001c98:	2801      	cmp	r0, #1
 8001c9a:	d016      	beq.n	8001cca <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001c9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c9e:	b113      	cbz	r3, 8001ca6 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	f7ff ff2b 	bl	8001afc <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ca6:	6823      	ldr	r3, [r4, #0]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cb6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001cbe:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001cc0:	601a      	str	r2, [r3, #0]
}
 8001cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001cc6:	f7ff bf9e 	b.w	8001c06 <UART_CheckIdleState>
}
 8001cca:	2001      	movs	r0, #1
 8001ccc:	bd10      	pop	{r4, pc}

08001cce <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001cce:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001cd0:	f000 fcac 	bl	800262c <vTaskStartScheduler>
  
  return osOK;
}
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	bd08      	pop	{r3, pc}

08001cd8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001cd8:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001cda:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8001cde:	8a02      	ldrh	r2, [r0, #16]
{
 8001ce0:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ce2:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 8001ce6:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8001ce8:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001cea:	bf14      	ite	ne
 8001cec:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001cee:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001cf0:	a803      	add	r0, sp, #12
 8001cf2:	9001      	str	r0, [sp, #4]
 8001cf4:	9400      	str	r4, [sp, #0]
 8001cf6:	4628      	mov	r0, r5
 8001cf8:	f000 fbc8 	bl	800248c <xTaskCreate>
 8001cfc:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001cfe:	bf0c      	ite	eq
 8001d00:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8001d02:	2000      	movne	r0, #0
}
 8001d04:	b005      	add	sp, #20
 8001d06:	bd30      	pop	{r4, r5, pc}

08001d08 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001d08:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001d0a:	2800      	cmp	r0, #0
 8001d0c:	bf08      	it	eq
 8001d0e:	2001      	moveq	r0, #1
 8001d10:	f000 fdda 	bl	80028c8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001d14:	2000      	movs	r0, #0
 8001d16:	bd08      	pop	{r3, pc}

08001d18 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8001d18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  uint32_t ulPreviousNotificationValue = 0;
 8001d1a:	ab04      	add	r3, sp, #16
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	9202      	str	r2, [sp, #8]
  uint32_t ulPreviousNotificationValue = 0;
 8001d20:	f843 2d04 	str.w	r2, [r3, #-4]!
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d24:	f3ef 8205 	mrs	r2, IPSR
  
  if (inHandlerMode())
 8001d28:	b1ba      	cbz	r2, 8001d5a <osSignalSet+0x42>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8001d2a:	aa02      	add	r2, sp, #8
 8001d2c:	9200      	str	r2, [sp, #0]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f000 fed6 	bl	8002ae0 <xTaskGenericNotifyFromISR>
 8001d34:	2801      	cmp	r0, #1
 8001d36:	d004      	beq.n	8001d42 <osSignalSet+0x2a>
      return 0x80000000;
 8001d38:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8001d3c:	b005      	add	sp, #20
 8001d3e:	f85d fb04 	ldr.w	pc, [sp], #4
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001d42:	9b02      	ldr	r3, [sp, #8]
 8001d44:	b13b      	cbz	r3, 8001d56 <osSignalSet+0x3e>
 8001d46:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <osSignalSet+0x50>)
 8001d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	f3bf 8f4f 	dsb	sy
 8001d52:	f3bf 8f6f 	isb	sy
  return ulPreviousNotificationValue;
 8001d56:	9803      	ldr	r0, [sp, #12]
 8001d58:	e7f0      	b.n	8001d3c <osSignalSet+0x24>
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f000 fe58 	bl	8002a10 <xTaskGenericNotify>
 8001d60:	2801      	cmp	r0, #1
 8001d62:	d0f8      	beq.n	8001d56 <osSignalSet+0x3e>
 8001d64:	e7e8      	b.n	8001d38 <osSignalSet+0x20>
 8001d66:	bf00      	nop
 8001d68:	e000ed04 	.word	0xe000ed04

08001d6c <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8001d6c:	b530      	push	{r4, r5, lr}
 8001d6e:	b085      	sub	sp, #20

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8001d70:	2300      	movs	r3, #0
{
 8001d72:	4604      	mov	r4, r0
 8001d74:	4615      	mov	r5, r2
  ret.value.signals = 0;  
 8001d76:	9302      	str	r3, [sp, #8]
 8001d78:	f3ef 8005 	mrs	r0, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }  
  
  if (inHandlerMode())
 8001d7c:	b110      	cbz	r0, 8001d84 <osSignalWait+0x18>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8001d7e:	2382      	movs	r3, #130	; 0x82
    }
    else if(ret.value.signals < 0)
    {
      ret.status =  osErrorValue;     
    }
    else  ret.status =  osEventSignal;
 8001d80:	9301      	str	r3, [sp, #4]
 8001d82:	e007      	b.n	8001d94 <osSignalWait+0x28>
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8001d84:	4613      	mov	r3, r2
 8001d86:	aa02      	add	r2, sp, #8
 8001d88:	f000 fdfc 	bl	8002984 <xTaskNotifyWait>
 8001d8c:	2801      	cmp	r0, #1
 8001d8e:	d00b      	beq.n	8001da8 <osSignalWait+0x3c>
      if(ticks == 0)  ret.status = osOK;
 8001d90:	b945      	cbnz	r5, 8001da4 <osSignalWait+0x38>
 8001d92:	9501      	str	r5, [sp, #4]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8001d94:	ab04      	add	r3, sp, #16
 8001d96:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8001d9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001d9e:	4620      	mov	r0, r4
 8001da0:	b005      	add	sp, #20
 8001da2:	bd30      	pop	{r4, r5, pc}
      else  ret.status = osEventTimeout;
 8001da4:	2340      	movs	r3, #64	; 0x40
 8001da6:	e7eb      	b.n	8001d80 <osSignalWait+0x14>
    else if(ret.value.signals < 0)
 8001da8:	9b02      	ldr	r3, [sp, #8]
 8001daa:	2b00      	cmp	r3, #0
      ret.status =  osErrorValue;     
 8001dac:	bfb4      	ite	lt
 8001dae:	2386      	movlt	r3, #134	; 0x86
    else  ret.status =  osEventSignal;
 8001db0:	2308      	movge	r3, #8
 8001db2:	e7e5      	b.n	8001d80 <osSignalWait+0x14>

08001db4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001db4:	f100 0308 	add.w	r3, r0, #8
 8001db8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001dba:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dbe:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dc0:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001dc2:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001dc4:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001dc6:	6003      	str	r3, [r0, #0]
 8001dc8:	4770      	bx	lr

08001dca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	6103      	str	r3, [r0, #16]
 8001dce:	4770      	bx	lr

08001dd0 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001dd0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001dd2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001ddc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001dde:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001de0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001de2:	3301      	adds	r3, #1
 8001de4:	6003      	str	r3, [r0, #0]
 8001de6:	4770      	bx	lr

08001de8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001de8:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001dea:	1c53      	adds	r3, r2, #1
{
 8001dec:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8001dee:	d10a      	bne.n	8001e06 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001df0:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001df6:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001df8:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001dfa:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001dfc:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001dfe:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001e00:	3301      	adds	r3, #1
 8001e02:	6003      	str	r3, [r0, #0]
 8001e04:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e06:	f100 0308 	add.w	r3, r0, #8
 8001e0a:	685c      	ldr	r4, [r3, #4]
 8001e0c:	6825      	ldr	r5, [r4, #0]
 8001e0e:	42aa      	cmp	r2, r5
 8001e10:	d3ef      	bcc.n	8001df2 <vListInsert+0xa>
 8001e12:	4623      	mov	r3, r4
 8001e14:	e7f9      	b.n	8001e0a <vListInsert+0x22>

08001e16 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001e16:	6841      	ldr	r1, [r0, #4]
 8001e18:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001e1a:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001e1c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001e1e:	6882      	ldr	r2, [r0, #8]
 8001e20:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001e22:	6859      	ldr	r1, [r3, #4]
 8001e24:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001e26:	bf08      	it	eq
 8001e28:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	3a01      	subs	r2, #1
 8001e32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001e34:	6818      	ldr	r0, [r3, #0]
}
 8001e36:	4770      	bx	lr

08001e38 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001e38:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <prvTaskExitError+0x3c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	3301      	adds	r3, #1
 8001e44:	d008      	beq.n	8001e58 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e4a:	f383 8811 	msr	BASEPRI, r3
 8001e4e:	f3bf 8f6f 	isb	sy
 8001e52:	f3bf 8f4f 	dsb	sy
 8001e56:	e7fe      	b.n	8001e56 <prvTaskExitError+0x1e>
 8001e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e5c:	f383 8811 	msr	BASEPRI, r3
 8001e60:	f3bf 8f6f 	isb	sy
 8001e64:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001e68:	9b01      	ldr	r3, [sp, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0fc      	beq.n	8001e68 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001e6e:	b002      	add	sp, #8
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	20000000 	.word	0x20000000

08001e78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001e78:	4808      	ldr	r0, [pc, #32]	; (8001e9c <prvPortStartFirstTask+0x24>)
 8001e7a:	6800      	ldr	r0, [r0, #0]
 8001e7c:	6800      	ldr	r0, [r0, #0]
 8001e7e:	f380 8808 	msr	MSP, r0
 8001e82:	f04f 0000 	mov.w	r0, #0
 8001e86:	f380 8814 	msr	CONTROL, r0
 8001e8a:	b662      	cpsie	i
 8001e8c:	b661      	cpsie	f
 8001e8e:	f3bf 8f4f 	dsb	sy
 8001e92:	f3bf 8f6f 	isb	sy
 8001e96:	df00      	svc	0
 8001e98:	bf00      	nop
 8001e9a:	0000      	.short	0x0000
 8001e9c:	e000ed08 	.word	0xe000ed08

08001ea0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001ea0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001eb0 <vPortEnableVFP+0x10>
 8001ea4:	6801      	ldr	r1, [r0, #0]
 8001ea6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001eaa:	6001      	str	r1, [r0, #0]
 8001eac:	4770      	bx	lr
 8001eae:	0000      	.short	0x0000
 8001eb0:	e000ed88 	.word	0xe000ed88

08001eb4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001eb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001eb8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001ebc:	4b07      	ldr	r3, [pc, #28]	; (8001edc <pxPortInitialiseStack+0x28>)
 8001ebe:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001ec2:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001ec6:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001eca:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001ece:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001ed2:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8001ed6:	3844      	subs	r0, #68	; 0x44
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	08001e39 	.word	0x08001e39

08001ee0 <SVC_Handler>:
	__asm volatile (
 8001ee0:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <pxCurrentTCBConst2>)
 8001ee2:	6819      	ldr	r1, [r3, #0]
 8001ee4:	6808      	ldr	r0, [r1, #0]
 8001ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001eea:	f380 8809 	msr	PSP, r0
 8001eee:	f3bf 8f6f 	isb	sy
 8001ef2:	f04f 0000 	mov.w	r0, #0
 8001ef6:	f380 8811 	msr	BASEPRI, r0
 8001efa:	4770      	bx	lr
 8001efc:	f3af 8000 	nop.w

08001f00 <pxCurrentTCBConst2>:
 8001f00:	20002754 	.word	0x20002754

08001f04 <vPortEnterCritical>:
 8001f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f08:	f383 8811 	msr	BASEPRI, r3
 8001f0c:	f3bf 8f6f 	isb	sy
 8001f10:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001f14:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <vPortEnterCritical+0x3c>)
 8001f16:	6813      	ldr	r3, [r2, #0]
 8001f18:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8001f1a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8001f1c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8001f1e:	d10d      	bne.n	8001f3c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001f20:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <vPortEnterCritical+0x40>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001f28:	d008      	beq.n	8001f3c <vPortEnterCritical+0x38>
 8001f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f2e:	f383 8811 	msr	BASEPRI, r3
 8001f32:	f3bf 8f6f 	isb	sy
 8001f36:	f3bf 8f4f 	dsb	sy
 8001f3a:	e7fe      	b.n	8001f3a <vPortEnterCritical+0x36>
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	20000000 	.word	0x20000000
 8001f44:	e000ed04 	.word	0xe000ed04

08001f48 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001f48:	4a08      	ldr	r2, [pc, #32]	; (8001f6c <vPortExitCritical+0x24>)
 8001f4a:	6813      	ldr	r3, [r2, #0]
 8001f4c:	b943      	cbnz	r3, 8001f60 <vPortExitCritical+0x18>
 8001f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f52:	f383 8811 	msr	BASEPRI, r3
 8001f56:	f3bf 8f6f 	isb	sy
 8001f5a:	f3bf 8f4f 	dsb	sy
 8001f5e:	e7fe      	b.n	8001f5e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001f60:	3b01      	subs	r3, #1
 8001f62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001f64:	b90b      	cbnz	r3, 8001f6a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001f66:	f383 8811 	msr	BASEPRI, r3
 8001f6a:	4770      	bx	lr
 8001f6c:	20000000 	.word	0x20000000

08001f70 <PendSV_Handler>:
	__asm volatile
 8001f70:	f3ef 8009 	mrs	r0, PSP
 8001f74:	f3bf 8f6f 	isb	sy
 8001f78:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <pxCurrentTCBConst>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	f01e 0f10 	tst.w	lr, #16
 8001f80:	bf08      	it	eq
 8001f82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001f86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f8a:	6010      	str	r0, [r2, #0]
 8001f8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001f90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001f94:	f380 8811 	msr	BASEPRI, r0
 8001f98:	f3bf 8f4f 	dsb	sy
 8001f9c:	f3bf 8f6f 	isb	sy
 8001fa0:	f000 fcb6 	bl	8002910 <vTaskSwitchContext>
 8001fa4:	f04f 0000 	mov.w	r0, #0
 8001fa8:	f380 8811 	msr	BASEPRI, r0
 8001fac:	bc09      	pop	{r0, r3}
 8001fae:	6819      	ldr	r1, [r3, #0]
 8001fb0:	6808      	ldr	r0, [r1, #0]
 8001fb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fb6:	f01e 0f10 	tst.w	lr, #16
 8001fba:	bf08      	it	eq
 8001fbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001fc0:	f380 8809 	msr	PSP, r0
 8001fc4:	f3bf 8f6f 	isb	sy
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	f3af 8000 	nop.w

08001fd0 <pxCurrentTCBConst>:
 8001fd0:	20002754 	.word	0x20002754

08001fd4 <SysTick_Handler>:
{
 8001fd4:	b508      	push	{r3, lr}
	__asm volatile
 8001fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fda:	f383 8811 	msr	BASEPRI, r3
 8001fde:	f3bf 8f6f 	isb	sy
 8001fe2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001fe6:	f000 fb65 	bl	80026b4 <xTaskIncrementTick>
 8001fea:	b118      	cbz	r0, 8001ff4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001fec:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <SysTick_Handler+0x28>)
 8001fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ff2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f383 8811 	msr	BASEPRI, r3
 8001ffa:	bd08      	pop	{r3, pc}
 8001ffc:	e000ed04 	.word	0xe000ed04

08002000 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002000:	4a08      	ldr	r2, [pc, #32]	; (8002024 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002002:	4909      	ldr	r1, [pc, #36]	; (8002028 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002004:	2300      	movs	r3, #0
 8002006:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002008:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800200a:	4b08      	ldr	r3, [pc, #32]	; (800202c <vPortSetupTimerInterrupt+0x2c>)
 800200c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	fbb3 f3f1 	udiv	r3, r3, r1
 8002016:	4906      	ldr	r1, [pc, #24]	; (8002030 <vPortSetupTimerInterrupt+0x30>)
 8002018:	3b01      	subs	r3, #1
 800201a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800201c:	2307      	movs	r3, #7
 800201e:	6013      	str	r3, [r2, #0]
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000e010 	.word	0xe000e010
 8002028:	e000e018 	.word	0xe000e018
 800202c:	20000004 	.word	0x20000004
 8002030:	e000e014 	.word	0xe000e014

08002034 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002034:	4b39      	ldr	r3, [pc, #228]	; (800211c <xPortStartScheduler+0xe8>)
 8002036:	4a3a      	ldr	r2, [pc, #232]	; (8002120 <xPortStartScheduler+0xec>)
{
 8002038:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800203a:	6819      	ldr	r1, [r3, #0]
 800203c:	4291      	cmp	r1, r2
 800203e:	d108      	bne.n	8002052 <xPortStartScheduler+0x1e>
	__asm volatile
 8002040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002044:	f383 8811 	msr	BASEPRI, r3
 8002048:	f3bf 8f6f 	isb	sy
 800204c:	f3bf 8f4f 	dsb	sy
 8002050:	e7fe      	b.n	8002050 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	4b33      	ldr	r3, [pc, #204]	; (8002124 <xPortStartScheduler+0xf0>)
 8002056:	429a      	cmp	r2, r3
 8002058:	d108      	bne.n	800206c <xPortStartScheduler+0x38>
 800205a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800205e:	f383 8811 	msr	BASEPRI, r3
 8002062:	f3bf 8f6f 	isb	sy
 8002066:	f3bf 8f4f 	dsb	sy
 800206a:	e7fe      	b.n	800206a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800206c:	4b2e      	ldr	r3, [pc, #184]	; (8002128 <xPortStartScheduler+0xf4>)
 800206e:	781a      	ldrb	r2, [r3, #0]
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002074:	22ff      	movs	r2, #255	; 0xff
 8002076:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002078:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800207a:	4a2c      	ldr	r2, [pc, #176]	; (800212c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800207c:	b2db      	uxtb	r3, r3
 800207e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002082:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002086:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800208a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800208c:	4b28      	ldr	r3, [pc, #160]	; (8002130 <xPortStartScheduler+0xfc>)
 800208e:	2207      	movs	r2, #7
 8002090:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002092:	2100      	movs	r1, #0
 8002094:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002098:	0600      	lsls	r0, r0, #24
 800209a:	f102 34ff 	add.w	r4, r2, #4294967295
 800209e:	d40d      	bmi.n	80020bc <xPortStartScheduler+0x88>
 80020a0:	b101      	cbz	r1, 80020a4 <xPortStartScheduler+0x70>
 80020a2:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	2a03      	cmp	r2, #3
 80020a8:	d011      	beq.n	80020ce <xPortStartScheduler+0x9a>
 80020aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ae:	f383 8811 	msr	BASEPRI, r3
 80020b2:	f3bf 8f6f 	isb	sy
 80020b6:	f3bf 8f4f 	dsb	sy
 80020ba:	e7fe      	b.n	80020ba <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80020bc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80020c0:	0052      	lsls	r2, r2, #1
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	f88d 2003 	strb.w	r2, [sp, #3]
 80020c8:	2101      	movs	r1, #1
 80020ca:	4622      	mov	r2, r4
 80020cc:	e7e2      	b.n	8002094 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80020ce:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80020d0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80020d4:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80020d6:	9b01      	ldr	r3, [sp, #4]
 80020d8:	4a13      	ldr	r2, [pc, #76]	; (8002128 <xPortStartScheduler+0xf4>)
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80020de:	4b15      	ldr	r3, [pc, #84]	; (8002134 <xPortStartScheduler+0x100>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80020e6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80020ee:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80020f0:	f7ff ff86 	bl	8002000 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80020f4:	4b10      	ldr	r3, [pc, #64]	; (8002138 <xPortStartScheduler+0x104>)
 80020f6:	2400      	movs	r4, #0
 80020f8:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80020fa:	f7ff fed1 	bl	8001ea0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80020fe:	4a0f      	ldr	r2, [pc, #60]	; (800213c <xPortStartScheduler+0x108>)
 8002100:	6813      	ldr	r3, [r2, #0]
 8002102:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002106:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002108:	f7ff feb6 	bl	8001e78 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800210c:	f000 fc00 	bl	8002910 <vTaskSwitchContext>
	prvTaskExitError();
 8002110:	f7ff fe92 	bl	8001e38 <prvTaskExitError>
}
 8002114:	4620      	mov	r0, r4
 8002116:	b002      	add	sp, #8
 8002118:	bd10      	pop	{r4, pc}
 800211a:	bf00      	nop
 800211c:	e000ed00 	.word	0xe000ed00
 8002120:	410fc271 	.word	0x410fc271
 8002124:	410fc270 	.word	0x410fc270
 8002128:	e000e400 	.word	0xe000e400
 800212c:	20000024 	.word	0x20000024
 8002130:	20000028 	.word	0x20000028
 8002134:	e000ed20 	.word	0xe000ed20
 8002138:	20000000 	.word	0x20000000
 800213c:	e000ef34 	.word	0xe000ef34

08002140 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002140:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002144:	2b0f      	cmp	r3, #15
 8002146:	d90e      	bls.n	8002166 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002148:	4a10      	ldr	r2, [pc, #64]	; (800218c <vPortValidateInterruptPriority+0x4c>)
 800214a:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800214c:	4a10      	ldr	r2, [pc, #64]	; (8002190 <vPortValidateInterruptPriority+0x50>)
 800214e:	7812      	ldrb	r2, [r2, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d908      	bls.n	8002166 <vPortValidateInterruptPriority+0x26>
 8002154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002158:	f383 8811 	msr	BASEPRI, r3
 800215c:	f3bf 8f6f 	isb	sy
 8002160:	f3bf 8f4f 	dsb	sy
 8002164:	e7fe      	b.n	8002164 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002166:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <vPortValidateInterruptPriority+0x54>)
 8002168:	4a0b      	ldr	r2, [pc, #44]	; (8002198 <vPortValidateInterruptPriority+0x58>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6812      	ldr	r2, [r2, #0]
 800216e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002172:	4293      	cmp	r3, r2
 8002174:	d908      	bls.n	8002188 <vPortValidateInterruptPriority+0x48>
 8002176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800217a:	f383 8811 	msr	BASEPRI, r3
 800217e:	f3bf 8f6f 	isb	sy
 8002182:	f3bf 8f4f 	dsb	sy
 8002186:	e7fe      	b.n	8002186 <vPortValidateInterruptPriority+0x46>
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	e000e3f0 	.word	0xe000e3f0
 8002190:	20000024 	.word	0x20000024
 8002194:	e000ed0c 	.word	0xe000ed0c
 8002198:	20000028 	.word	0x20000028

0800219c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800219c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800219e:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <prvInsertBlockIntoFreeList+0x40>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	4282      	cmp	r2, r0
 80021a4:	d318      	bcc.n	80021d8 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80021a6:	685c      	ldr	r4, [r3, #4]
 80021a8:	1919      	adds	r1, r3, r4
 80021aa:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80021ac:	bf01      	itttt	eq
 80021ae:	6841      	ldreq	r1, [r0, #4]
 80021b0:	4618      	moveq	r0, r3
 80021b2:	1909      	addeq	r1, r1, r4
 80021b4:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80021b6:	6844      	ldr	r4, [r0, #4]
 80021b8:	1901      	adds	r1, r0, r4
 80021ba:	428a      	cmp	r2, r1
 80021bc:	d107      	bne.n	80021ce <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80021be:	4908      	ldr	r1, [pc, #32]	; (80021e0 <prvInsertBlockIntoFreeList+0x44>)
 80021c0:	6809      	ldr	r1, [r1, #0]
 80021c2:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80021c4:	bf1f      	itttt	ne
 80021c6:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80021c8:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80021ca:	1909      	addne	r1, r1, r4
 80021cc:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80021ce:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80021d0:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80021d2:	bf18      	it	ne
 80021d4:	6018      	strne	r0, [r3, #0]
 80021d6:	bd10      	pop	{r4, pc}
 80021d8:	4613      	mov	r3, r2
 80021da:	e7e1      	b.n	80021a0 <prvInsertBlockIntoFreeList+0x4>
 80021dc:	2000274c 	.word	0x2000274c
 80021e0:	2000002c 	.word	0x2000002c

080021e4 <pvPortMalloc>:
{
 80021e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021e8:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80021ea:	f000 fa5b 	bl	80026a4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80021ee:	493d      	ldr	r1, [pc, #244]	; (80022e4 <pvPortMalloc+0x100>)
 80021f0:	4d3d      	ldr	r5, [pc, #244]	; (80022e8 <pvPortMalloc+0x104>)
 80021f2:	680b      	ldr	r3, [r1, #0]
 80021f4:	b9fb      	cbnz	r3, 8002236 <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 80021f6:	4a3d      	ldr	r2, [pc, #244]	; (80022ec <pvPortMalloc+0x108>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80021f8:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80021fa:	bf1c      	itt	ne
 80021fc:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80021fe:	4b3c      	ldrne	r3, [pc, #240]	; (80022f0 <pvPortMalloc+0x10c>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002200:	4e3c      	ldr	r6, [pc, #240]	; (80022f4 <pvPortMalloc+0x110>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002202:	bf1a      	itte	ne
 8002204:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002208:	1a9b      	subne	r3, r3, r2
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800220a:	f242 7310 	movweq	r3, #10000	; 0x2710
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800220e:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8002210:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002212:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8002216:	2000      	movs	r0, #0
 8002218:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800221a:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 800221c:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800221e:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 8002220:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002222:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002224:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002226:	4b34      	ldr	r3, [pc, #208]	; (80022f8 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002228:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800222a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800222c:	4b33      	ldr	r3, [pc, #204]	; (80022fc <pvPortMalloc+0x118>)
 800222e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002230:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002234:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002236:	682f      	ldr	r7, [r5, #0]
 8002238:	4227      	tst	r7, r4
 800223a:	d116      	bne.n	800226a <pvPortMalloc+0x86>
			if( xWantedSize > 0 )
 800223c:	2c00      	cmp	r4, #0
 800223e:	d041      	beq.n	80022c4 <pvPortMalloc+0xe0>
				xWantedSize += xHeapStructSize;
 8002240:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002244:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002246:	bf1c      	itt	ne
 8002248:	f023 0307 	bicne.w	r3, r3, #7
 800224c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800224e:	b163      	cbz	r3, 800226a <pvPortMalloc+0x86>
 8002250:	4a2a      	ldr	r2, [pc, #168]	; (80022fc <pvPortMalloc+0x118>)
 8002252:	6816      	ldr	r6, [r2, #0]
 8002254:	42b3      	cmp	r3, r6
 8002256:	4690      	mov	r8, r2
 8002258:	d807      	bhi.n	800226a <pvPortMalloc+0x86>
				pxBlock = xStart.pxNextFreeBlock;
 800225a:	4a26      	ldr	r2, [pc, #152]	; (80022f4 <pvPortMalloc+0x110>)
 800225c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800225e:	6868      	ldr	r0, [r5, #4]
 8002260:	4283      	cmp	r3, r0
 8002262:	d804      	bhi.n	800226e <pvPortMalloc+0x8a>
				if( pxBlock != pxEnd )
 8002264:	6809      	ldr	r1, [r1, #0]
 8002266:	428d      	cmp	r5, r1
 8002268:	d107      	bne.n	800227a <pvPortMalloc+0x96>
void *pvReturn = NULL;
 800226a:	2400      	movs	r4, #0
 800226c:	e02a      	b.n	80022c4 <pvPortMalloc+0xe0>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800226e:	682c      	ldr	r4, [r5, #0]
 8002270:	2c00      	cmp	r4, #0
 8002272:	d0f7      	beq.n	8002264 <pvPortMalloc+0x80>
 8002274:	462a      	mov	r2, r5
 8002276:	4625      	mov	r5, r4
 8002278:	e7f1      	b.n	800225e <pvPortMalloc+0x7a>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800227a:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800227c:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800227e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002280:	1ac2      	subs	r2, r0, r3
 8002282:	2a10      	cmp	r2, #16
 8002284:	d90f      	bls.n	80022a6 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002286:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002288:	0741      	lsls	r1, r0, #29
 800228a:	d008      	beq.n	800229e <pvPortMalloc+0xba>
 800228c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002290:	f383 8811 	msr	BASEPRI, r3
 8002294:	f3bf 8f6f 	isb	sy
 8002298:	f3bf 8f4f 	dsb	sy
 800229c:	e7fe      	b.n	800229c <pvPortMalloc+0xb8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800229e:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80022a0:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80022a2:	f7ff ff7b 	bl	800219c <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80022a6:	4914      	ldr	r1, [pc, #80]	; (80022f8 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80022a8:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80022aa:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80022ac:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80022ae:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80022b0:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 80022b2:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80022b6:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80022ba:	bf38      	it	cc
 80022bc:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80022be:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80022c0:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80022c2:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80022c4:	f000 fa88 	bl	80027d8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80022c8:	0763      	lsls	r3, r4, #29
 80022ca:	d008      	beq.n	80022de <pvPortMalloc+0xfa>
 80022cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d0:	f383 8811 	msr	BASEPRI, r3
 80022d4:	f3bf 8f6f 	isb	sy
 80022d8:	f3bf 8f4f 	dsb	sy
 80022dc:	e7fe      	b.n	80022dc <pvPortMalloc+0xf8>
}
 80022de:	4620      	mov	r0, r4
 80022e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022e4:	2000002c 	.word	0x2000002c
 80022e8:	20002740 	.word	0x20002740
 80022ec:	20000030 	.word	0x20000030
 80022f0:	20002740 	.word	0x20002740
 80022f4:	2000274c 	.word	0x2000274c
 80022f8:	20002748 	.word	0x20002748
 80022fc:	20002744 	.word	0x20002744

08002300 <vPortFree>:
{
 8002300:	b510      	push	{r4, lr}
	if( pv != NULL )
 8002302:	4604      	mov	r4, r0
 8002304:	b370      	cbz	r0, 8002364 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002306:	4a18      	ldr	r2, [pc, #96]	; (8002368 <vPortFree+0x68>)
 8002308:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800230c:	6812      	ldr	r2, [r2, #0]
 800230e:	4213      	tst	r3, r2
 8002310:	d108      	bne.n	8002324 <vPortFree+0x24>
 8002312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002316:	f383 8811 	msr	BASEPRI, r3
 800231a:	f3bf 8f6f 	isb	sy
 800231e:	f3bf 8f4f 	dsb	sy
 8002322:	e7fe      	b.n	8002322 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002324:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002328:	b141      	cbz	r1, 800233c <vPortFree+0x3c>
 800232a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800232e:	f383 8811 	msr	BASEPRI, r3
 8002332:	f3bf 8f6f 	isb	sy
 8002336:	f3bf 8f4f 	dsb	sy
 800233a:	e7fe      	b.n	800233a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800233c:	ea23 0302 	bic.w	r3, r3, r2
 8002340:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8002344:	f000 f9ae 	bl	80026a4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002348:	4a08      	ldr	r2, [pc, #32]	; (800236c <vPortFree+0x6c>)
 800234a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800234e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002350:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002354:	440b      	add	r3, r1
 8002356:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002358:	f7ff ff20 	bl	800219c <prvInsertBlockIntoFreeList>
}
 800235c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8002360:	f000 ba3a 	b.w	80027d8 <xTaskResumeAll>
 8002364:	bd10      	pop	{r4, pc}
 8002366:	bf00      	nop
 8002368:	20002740 	.word	0x20002740
 800236c:	20002744 	.word	0x20002744

08002370 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002370:	4a06      	ldr	r2, [pc, #24]	; (800238c <prvResetNextTaskUnblockTime+0x1c>)
 8002372:	6813      	ldr	r3, [r2, #0]
 8002374:	6819      	ldr	r1, [r3, #0]
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <prvResetNextTaskUnblockTime+0x20>)
 8002378:	b919      	cbnz	r1, 8002382 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800237a:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002382:	6812      	ldr	r2, [r2, #0]
 8002384:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002386:	68d2      	ldr	r2, [r2, #12]
 8002388:	6852      	ldr	r2, [r2, #4]
 800238a:	e7f8      	b.n	800237e <prvResetNextTaskUnblockTime+0xe>
 800238c:	20002758 	.word	0x20002758
 8002390:	20002830 	.word	0x20002830

08002394 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002396:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002398:	4e1b      	ldr	r6, [pc, #108]	; (8002408 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800239a:	681d      	ldr	r5, [r3, #0]
{
 800239c:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800239e:	6830      	ldr	r0, [r6, #0]
 80023a0:	3004      	adds	r0, #4
{
 80023a2:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80023a4:	f7ff fd37 	bl	8001e16 <uxListRemove>
 80023a8:	4633      	mov	r3, r6
 80023aa:	b940      	cbnz	r0, 80023be <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80023ac:	6831      	ldr	r1, [r6, #0]
 80023ae:	4e17      	ldr	r6, [pc, #92]	; (800240c <prvAddCurrentTaskToDelayedList+0x78>)
 80023b0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80023b2:	6832      	ldr	r2, [r6, #0]
 80023b4:	2001      	movs	r0, #1
 80023b6:	4088      	lsls	r0, r1
 80023b8:	ea22 0200 	bic.w	r2, r2, r0
 80023bc:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80023be:	1c62      	adds	r2, r4, #1
 80023c0:	d107      	bne.n	80023d2 <prvAddCurrentTaskToDelayedList+0x3e>
 80023c2:	b137      	cbz	r7, 80023d2 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023c4:	6819      	ldr	r1, [r3, #0]
 80023c6:	4812      	ldr	r0, [pc, #72]	; (8002410 <prvAddCurrentTaskToDelayedList+0x7c>)
 80023c8:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80023ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023ce:	f7ff bcff 	b.w	8001dd0 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80023d2:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80023d4:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 80023d6:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80023d8:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80023da:	d907      	bls.n	80023ec <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023dc:	4a0d      	ldr	r2, [pc, #52]	; (8002414 <prvAddCurrentTaskToDelayedList+0x80>)
 80023de:	6810      	ldr	r0, [r2, #0]
 80023e0:	6819      	ldr	r1, [r3, #0]
}
 80023e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023e6:	3104      	adds	r1, #4
 80023e8:	f7ff bcfe 	b.w	8001de8 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023ec:	4a0a      	ldr	r2, [pc, #40]	; (8002418 <prvAddCurrentTaskToDelayedList+0x84>)
 80023ee:	6810      	ldr	r0, [r2, #0]
 80023f0:	6819      	ldr	r1, [r3, #0]
 80023f2:	3104      	adds	r1, #4
 80023f4:	f7ff fcf8 	bl	8001de8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80023f8:	4b08      	ldr	r3, [pc, #32]	; (800241c <prvAddCurrentTaskToDelayedList+0x88>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80023fe:	bf38      	it	cc
 8002400:	601c      	strcc	r4, [r3, #0]
 8002402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002404:	20002878 	.word	0x20002878
 8002408:	20002754 	.word	0x20002754
 800240c:	20002800 	.word	0x20002800
 8002410:	20002850 	.word	0x20002850
 8002414:	2000275c 	.word	0x2000275c
 8002418:	20002758 	.word	0x20002758
 800241c:	20002830 	.word	0x20002830

08002420 <prvIdleTask>:
{
 8002420:	b580      	push	{r7, lr}
				taskYIELD();
 8002422:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8002488 <prvIdleTask+0x68>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002426:	4f14      	ldr	r7, [pc, #80]	; (8002478 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002428:	4c14      	ldr	r4, [pc, #80]	; (800247c <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 800242a:	4e15      	ldr	r6, [pc, #84]	; (8002480 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800242c:	6823      	ldr	r3, [r4, #0]
 800242e:	b963      	cbnz	r3, 800244a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002430:	4b14      	ldr	r3, [pc, #80]	; (8002484 <prvIdleTask+0x64>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d9f8      	bls.n	800242a <prvIdleTask+0xa>
				taskYIELD();
 8002438:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800243c:	f8c8 3000 	str.w	r3, [r8]
 8002440:	f3bf 8f4f 	dsb	sy
 8002444:	f3bf 8f6f 	isb	sy
 8002448:	e7ee      	b.n	8002428 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 800244a:	f7ff fd5b 	bl	8001f04 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002452:	1d28      	adds	r0, r5, #4
 8002454:	f7ff fcdf 	bl	8001e16 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002458:	6833      	ldr	r3, [r6, #0]
 800245a:	3b01      	subs	r3, #1
 800245c:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 800245e:	6823      	ldr	r3, [r4, #0]
 8002460:	3b01      	subs	r3, #1
 8002462:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8002464:	f7ff fd70 	bl	8001f48 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8002468:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800246a:	f7ff ff49 	bl	8002300 <vPortFree>
			vPortFree( pxTCB );
 800246e:	4628      	mov	r0, r5
 8002470:	f7ff ff46 	bl	8002300 <vPortFree>
 8002474:	e7da      	b.n	800242c <prvIdleTask+0xc>
 8002476:	bf00      	nop
 8002478:	20002864 	.word	0x20002864
 800247c:	200027f0 	.word	0x200027f0
 8002480:	200027ec 	.word	0x200027ec
 8002484:	20002760 	.word	0x20002760
 8002488:	e000ed04 	.word	0xe000ed04

0800248c <xTaskCreate>:
	{
 800248c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002490:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8002494:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002496:	4650      	mov	r0, sl
	{
 8002498:	460f      	mov	r7, r1
 800249a:	4699      	mov	r9, r3
 800249c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800249e:	f7ff fea1 	bl	80021e4 <pvPortMalloc>
			if( pxStack != NULL )
 80024a2:	4605      	mov	r5, r0
 80024a4:	2800      	cmp	r0, #0
 80024a6:	f000 8096 	beq.w	80025d6 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80024aa:	2054      	movs	r0, #84	; 0x54
 80024ac:	f7ff fe9a 	bl	80021e4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80024b0:	4604      	mov	r4, r0
 80024b2:	2800      	cmp	r0, #0
 80024b4:	f000 808c 	beq.w	80025d0 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80024b8:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 80024bc:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80024be:	4455      	add	r5, sl
 80024c0:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80024c2:	f025 0a07 	bic.w	sl, r5, #7
 80024c6:	f100 0234 	add.w	r2, r0, #52	; 0x34
 80024ca:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80024cc:	7859      	ldrb	r1, [r3, #1]
 80024ce:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 80024d2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80024d6:	b109      	cbz	r1, 80024dc <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024d8:	42bb      	cmp	r3, r7
 80024da:	d1f7      	bne.n	80024cc <xTaskCreate+0x40>
 80024dc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80024de:	2d06      	cmp	r5, #6
 80024e0:	bf28      	it	cs
 80024e2:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80024e4:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80024e8:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 80024ea:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80024ec:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80024ee:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80024f0:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 80024f4:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80024f8:	f7ff fc67 	bl	8001dca <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024fc:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002500:	f104 0018 	add.w	r0, r4, #24
 8002504:	f7ff fc61 	bl	8001dca <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002508:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800250c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800250e:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002510:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002512:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002516:	464a      	mov	r2, r9
 8002518:	4641      	mov	r1, r8
 800251a:	4650      	mov	r0, sl
 800251c:	f7ff fcca 	bl	8001eb4 <pxPortInitialiseStack>
 8002520:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8002522:	b106      	cbz	r6, 8002526 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002524:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8002526:	f7ff fced 	bl	8001f04 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800252a:	4b32      	ldr	r3, [pc, #200]	; (80025f4 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 800252c:	4e32      	ldr	r6, [pc, #200]	; (80025f8 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8002624 <xTaskCreate+0x198>
 8002534:	3201      	adds	r2, #1
 8002536:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002538:	6835      	ldr	r5, [r6, #0]
 800253a:	2d00      	cmp	r5, #0
 800253c:	d14e      	bne.n	80025dc <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 800253e:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d11d      	bne.n	8002582 <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002546:	eb08 0005 	add.w	r0, r8, r5
 800254a:	3514      	adds	r5, #20
 800254c:	f7ff fc32 	bl	8001db4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002550:	2d8c      	cmp	r5, #140	; 0x8c
 8002552:	d1f8      	bne.n	8002546 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8002554:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8002628 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8002558:	4d28      	ldr	r5, [pc, #160]	; (80025fc <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 800255a:	4648      	mov	r0, r9
 800255c:	f7ff fc2a 	bl	8001db4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002560:	4628      	mov	r0, r5
 8002562:	f7ff fc27 	bl	8001db4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002566:	4826      	ldr	r0, [pc, #152]	; (8002600 <xTaskCreate+0x174>)
 8002568:	f7ff fc24 	bl	8001db4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800256c:	4825      	ldr	r0, [pc, #148]	; (8002604 <xTaskCreate+0x178>)
 800256e:	f7ff fc21 	bl	8001db4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8002572:	4825      	ldr	r0, [pc, #148]	; (8002608 <xTaskCreate+0x17c>)
 8002574:	f7ff fc1e 	bl	8001db4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8002578:	4b24      	ldr	r3, [pc, #144]	; (800260c <xTaskCreate+0x180>)
 800257a:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800257e:	4b24      	ldr	r3, [pc, #144]	; (8002610 <xTaskCreate+0x184>)
 8002580:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8002582:	4a24      	ldr	r2, [pc, #144]	; (8002614 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8002584:	4924      	ldr	r1, [pc, #144]	; (8002618 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8002586:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002588:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 800258a:	3301      	adds	r3, #1
 800258c:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800258e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002590:	2501      	movs	r5, #1
 8002592:	fa05 f302 	lsl.w	r3, r5, r2
 8002596:	4303      	orrs	r3, r0
 8002598:	2014      	movs	r0, #20
 800259a:	600b      	str	r3, [r1, #0]
 800259c:	fb00 8002 	mla	r0, r0, r2, r8
 80025a0:	4639      	mov	r1, r7
 80025a2:	f7ff fc15 	bl	8001dd0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80025a6:	f7ff fccf 	bl	8001f48 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80025aa:	4b1c      	ldr	r3, [pc, #112]	; (800261c <xTaskCreate+0x190>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	b163      	cbz	r3, 80025ca <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80025b0:	6833      	ldr	r3, [r6, #0]
 80025b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d207      	bcs.n	80025ca <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 80025ba:	4b19      	ldr	r3, [pc, #100]	; (8002620 <xTaskCreate+0x194>)
 80025bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	f3bf 8f4f 	dsb	sy
 80025c6:	f3bf 8f6f 	isb	sy
	}
 80025ca:	4628      	mov	r0, r5
 80025cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 80025d0:	4628      	mov	r0, r5
 80025d2:	f7ff fe95 	bl	8002300 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80025d6:	f04f 35ff 	mov.w	r5, #4294967295
 80025da:	e7f6      	b.n	80025ca <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 80025dc:	4b0f      	ldr	r3, [pc, #60]	; (800261c <xTaskCreate+0x190>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1ce      	bne.n	8002582 <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80025e4:	6833      	ldr	r3, [r6, #0]
 80025e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80025ea:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80025ec:	bf98      	it	ls
 80025ee:	6034      	strls	r4, [r6, #0]
 80025f0:	e7c7      	b.n	8002582 <xTaskCreate+0xf6>
 80025f2:	bf00      	nop
 80025f4:	200027ec 	.word	0x200027ec
 80025f8:	20002754 	.word	0x20002754
 80025fc:	20002818 	.word	0x20002818
 8002600:	20002838 	.word	0x20002838
 8002604:	20002864 	.word	0x20002864
 8002608:	20002850 	.word	0x20002850
 800260c:	20002758 	.word	0x20002758
 8002610:	2000275c 	.word	0x2000275c
 8002614:	200027fc 	.word	0x200027fc
 8002618:	20002800 	.word	0x20002800
 800261c:	2000284c 	.word	0x2000284c
 8002620:	e000ed04 	.word	0xe000ed04
 8002624:	20002760 	.word	0x20002760
 8002628:	20002804 	.word	0x20002804

0800262c <vTaskStartScheduler>:
{
 800262c:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800262e:	4b17      	ldr	r3, [pc, #92]	; (800268c <vTaskStartScheduler+0x60>)
 8002630:	9301      	str	r3, [sp, #4]
 8002632:	2400      	movs	r4, #0
 8002634:	9400      	str	r4, [sp, #0]
 8002636:	4623      	mov	r3, r4
 8002638:	2280      	movs	r2, #128	; 0x80
 800263a:	4915      	ldr	r1, [pc, #84]	; (8002690 <vTaskStartScheduler+0x64>)
 800263c:	4815      	ldr	r0, [pc, #84]	; (8002694 <vTaskStartScheduler+0x68>)
 800263e:	f7ff ff25 	bl	800248c <xTaskCreate>
	if( xReturn == pdPASS )
 8002642:	2801      	cmp	r0, #1
 8002644:	d114      	bne.n	8002670 <vTaskStartScheduler+0x44>
 8002646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264a:	f383 8811 	msr	BASEPRI, r3
 800264e:	f3bf 8f6f 	isb	sy
 8002652:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <vTaskStartScheduler+0x6c>)
 8002658:	f04f 32ff 	mov.w	r2, #4294967295
 800265c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800265e:	4b0f      	ldr	r3, [pc, #60]	; (800269c <vTaskStartScheduler+0x70>)
 8002660:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002662:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <vTaskStartScheduler+0x74>)
 8002664:	601c      	str	r4, [r3, #0]
}
 8002666:	b002      	add	sp, #8
 8002668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800266c:	f7ff bce2 	b.w	8002034 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002670:	3001      	adds	r0, #1
 8002672:	d108      	bne.n	8002686 <vTaskStartScheduler+0x5a>
 8002674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002678:	f383 8811 	msr	BASEPRI, r3
 800267c:	f3bf 8f6f 	isb	sy
 8002680:	f3bf 8f4f 	dsb	sy
 8002684:	e7fe      	b.n	8002684 <vTaskStartScheduler+0x58>
}
 8002686:	b002      	add	sp, #8
 8002688:	bd10      	pop	{r4, pc}
 800268a:	bf00      	nop
 800268c:	2000282c 	.word	0x2000282c
 8002690:	08003055 	.word	0x08003055
 8002694:	08002421 	.word	0x08002421
 8002698:	20002830 	.word	0x20002830
 800269c:	2000284c 	.word	0x2000284c
 80026a0:	20002878 	.word	0x20002878

080026a4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80026a4:	4a02      	ldr	r2, [pc, #8]	; (80026b0 <vTaskSuspendAll+0xc>)
 80026a6:	6813      	ldr	r3, [r2, #0]
 80026a8:	3301      	adds	r3, #1
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	200027f8 	.word	0x200027f8

080026b4 <xTaskIncrementTick>:
{
 80026b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026b8:	4b3c      	ldr	r3, [pc, #240]	; (80027ac <xTaskIncrementTick+0xf8>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d153      	bne.n	8002768 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80026c0:	4b3b      	ldr	r3, [pc, #236]	; (80027b0 <xTaskIncrementTick+0xfc>)
 80026c2:	681c      	ldr	r4, [r3, #0]
 80026c4:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80026c6:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80026c8:	b9bc      	cbnz	r4, 80026fa <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80026ca:	4b3a      	ldr	r3, [pc, #232]	; (80027b4 <xTaskIncrementTick+0x100>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	b142      	cbz	r2, 80026e4 <xTaskIncrementTick+0x30>
 80026d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d6:	f383 8811 	msr	BASEPRI, r3
 80026da:	f3bf 8f6f 	isb	sy
 80026de:	f3bf 8f4f 	dsb	sy
 80026e2:	e7fe      	b.n	80026e2 <xTaskIncrementTick+0x2e>
 80026e4:	4a34      	ldr	r2, [pc, #208]	; (80027b8 <xTaskIncrementTick+0x104>)
 80026e6:	6819      	ldr	r1, [r3, #0]
 80026e8:	6810      	ldr	r0, [r2, #0]
 80026ea:	6018      	str	r0, [r3, #0]
 80026ec:	6011      	str	r1, [r2, #0]
 80026ee:	4a33      	ldr	r2, [pc, #204]	; (80027bc <xTaskIncrementTick+0x108>)
 80026f0:	6813      	ldr	r3, [r2, #0]
 80026f2:	3301      	adds	r3, #1
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	f7ff fe3b 	bl	8002370 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80026fa:	4d31      	ldr	r5, [pc, #196]	; (80027c0 <xTaskIncrementTick+0x10c>)
 80026fc:	4f31      	ldr	r7, [pc, #196]	; (80027c4 <xTaskIncrementTick+0x110>)
 80026fe:	682b      	ldr	r3, [r5, #0]
 8002700:	429c      	cmp	r4, r3
 8002702:	f04f 0b00 	mov.w	fp, #0
 8002706:	d33e      	bcc.n	8002786 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002708:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80027b4 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 800270c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80027d4 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002710:	f8d8 2000 	ldr.w	r2, [r8]
 8002714:	6812      	ldr	r2, [r2, #0]
 8002716:	bb72      	cbnz	r2, 8002776 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002718:	f04f 32ff 	mov.w	r2, #4294967295
 800271c:	602a      	str	r2, [r5, #0]
					break;
 800271e:	e032      	b.n	8002786 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002720:	f106 0a04 	add.w	sl, r6, #4
 8002724:	4650      	mov	r0, sl
 8002726:	f7ff fb76 	bl	8001e16 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800272a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800272c:	b119      	cbz	r1, 8002736 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800272e:	f106 0018 	add.w	r0, r6, #24
 8002732:	f7ff fb70 	bl	8001e16 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002736:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002738:	f8d9 3000 	ldr.w	r3, [r9]
 800273c:	2201      	movs	r2, #1
 800273e:	fa02 f100 	lsl.w	r1, r2, r0
 8002742:	4319      	orrs	r1, r3
 8002744:	4b20      	ldr	r3, [pc, #128]	; (80027c8 <xTaskIncrementTick+0x114>)
 8002746:	f8c9 1000 	str.w	r1, [r9]
 800274a:	f04f 0e14 	mov.w	lr, #20
 800274e:	4651      	mov	r1, sl
 8002750:	fb0e 3000 	mla	r0, lr, r0, r3
 8002754:	f7ff fb3c 	bl	8001dd0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002758:	6838      	ldr	r0, [r7, #0]
 800275a:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800275c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800275e:	4291      	cmp	r1, r2
 8002760:	bf28      	it	cs
 8002762:	f04f 0b01 	movcs.w	fp, #1
 8002766:	e7d3      	b.n	8002710 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8002768:	4a18      	ldr	r2, [pc, #96]	; (80027cc <xTaskIncrementTick+0x118>)
 800276a:	6813      	ldr	r3, [r2, #0]
 800276c:	3301      	adds	r3, #1
 800276e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8002770:	f04f 0b00 	mov.w	fp, #0
 8002774:	e011      	b.n	800279a <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002776:	f8d8 2000 	ldr.w	r2, [r8]
 800277a:	68d2      	ldr	r2, [r2, #12]
 800277c:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800277e:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8002780:	428c      	cmp	r4, r1
 8002782:	d2cd      	bcs.n	8002720 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8002784:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	4b0f      	ldr	r3, [pc, #60]	; (80027c8 <xTaskIncrementTick+0x114>)
 800278a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800278c:	2214      	movs	r2, #20
 800278e:	434a      	muls	r2, r1
 8002790:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8002792:	2a02      	cmp	r2, #2
 8002794:	bf28      	it	cs
 8002796:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800279a:	4a0d      	ldr	r2, [pc, #52]	; (80027d0 <xTaskIncrementTick+0x11c>)
 800279c:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800279e:	2a00      	cmp	r2, #0
 80027a0:	bf18      	it	ne
 80027a2:	f04f 0b01 	movne.w	fp, #1
}
 80027a6:	4658      	mov	r0, fp
 80027a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027ac:	200027f8 	.word	0x200027f8
 80027b0:	20002878 	.word	0x20002878
 80027b4:	20002758 	.word	0x20002758
 80027b8:	2000275c 	.word	0x2000275c
 80027bc:	20002834 	.word	0x20002834
 80027c0:	20002830 	.word	0x20002830
 80027c4:	20002754 	.word	0x20002754
 80027c8:	20002760 	.word	0x20002760
 80027cc:	200027f4 	.word	0x200027f4
 80027d0:	2000287c 	.word	0x2000287c
 80027d4:	20002800 	.word	0x20002800

080027d8 <xTaskResumeAll>:
{
 80027d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80027dc:	4c31      	ldr	r4, [pc, #196]	; (80028a4 <xTaskResumeAll+0xcc>)
 80027de:	6823      	ldr	r3, [r4, #0]
 80027e0:	b943      	cbnz	r3, 80027f4 <xTaskResumeAll+0x1c>
 80027e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e6:	f383 8811 	msr	BASEPRI, r3
 80027ea:	f3bf 8f6f 	isb	sy
 80027ee:	f3bf 8f4f 	dsb	sy
 80027f2:	e7fe      	b.n	80027f2 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80027f4:	f7ff fb86 	bl	8001f04 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80027f8:	6823      	ldr	r3, [r4, #0]
 80027fa:	3b01      	subs	r3, #1
 80027fc:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027fe:	6824      	ldr	r4, [r4, #0]
 8002800:	b12c      	cbz	r4, 800280e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8002802:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002804:	f7ff fba0 	bl	8001f48 <vPortExitCritical>
}
 8002808:	4620      	mov	r0, r4
 800280a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800280e:	4b26      	ldr	r3, [pc, #152]	; (80028a8 <xTaskResumeAll+0xd0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f5      	beq.n	8002802 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002816:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80028c0 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 800281a:	4f24      	ldr	r7, [pc, #144]	; (80028ac <xTaskResumeAll+0xd4>)
 800281c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80028c4 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002820:	f8d9 3000 	ldr.w	r3, [r9]
 8002824:	b9e3      	cbnz	r3, 8002860 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8002826:	b10c      	cbz	r4, 800282c <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8002828:	f7ff fda2 	bl	8002370 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800282c:	4d20      	ldr	r5, [pc, #128]	; (80028b0 <xTaskResumeAll+0xd8>)
 800282e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002830:	b144      	cbz	r4, 8002844 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8002832:	4e20      	ldr	r6, [pc, #128]	; (80028b4 <xTaskResumeAll+0xdc>)
 8002834:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8002836:	f7ff ff3d 	bl	80026b4 <xTaskIncrementTick>
 800283a:	b100      	cbz	r0, 800283e <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 800283c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800283e:	3c01      	subs	r4, #1
 8002840:	d1f9      	bne.n	8002836 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8002842:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8002844:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <xTaskResumeAll+0xdc>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0da      	beq.n	8002802 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800284c:	4b1a      	ldr	r3, [pc, #104]	; (80028b8 <xTaskResumeAll+0xe0>)
 800284e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	f3bf 8f4f 	dsb	sy
 8002858:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800285c:	2401      	movs	r4, #1
 800285e:	e7d1      	b.n	8002804 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002860:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8002864:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002866:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002868:	f104 0018 	add.w	r0, r4, #24
 800286c:	f7ff fad3 	bl	8001e16 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002870:	4630      	mov	r0, r6
 8002872:	f7ff fad0 	bl	8001e16 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002876:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002878:	6839      	ldr	r1, [r7, #0]
 800287a:	2501      	movs	r5, #1
 800287c:	fa05 f302 	lsl.w	r3, r5, r2
 8002880:	2014      	movs	r0, #20
 8002882:	430b      	orrs	r3, r1
 8002884:	fb00 8002 	mla	r0, r0, r2, r8
 8002888:	4631      	mov	r1, r6
 800288a:	603b      	str	r3, [r7, #0]
 800288c:	f7ff faa0 	bl	8001dd0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002890:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <xTaskResumeAll+0xe4>)
 8002892:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002898:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 800289a:	bf24      	itt	cs
 800289c:	4b05      	ldrcs	r3, [pc, #20]	; (80028b4 <xTaskResumeAll+0xdc>)
 800289e:	601d      	strcs	r5, [r3, #0]
 80028a0:	e7be      	b.n	8002820 <xTaskResumeAll+0x48>
 80028a2:	bf00      	nop
 80028a4:	200027f8 	.word	0x200027f8
 80028a8:	200027ec 	.word	0x200027ec
 80028ac:	20002800 	.word	0x20002800
 80028b0:	200027f4 	.word	0x200027f4
 80028b4:	2000287c 	.word	0x2000287c
 80028b8:	e000ed04 	.word	0xe000ed04
 80028bc:	20002754 	.word	0x20002754
 80028c0:	20002838 	.word	0x20002838
 80028c4:	20002760 	.word	0x20002760

080028c8 <vTaskDelay>:
	{
 80028c8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80028ca:	b940      	cbnz	r0, 80028de <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80028cc:	4b0e      	ldr	r3, [pc, #56]	; (8002908 <vTaskDelay+0x40>)
 80028ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	f3bf 8f4f 	dsb	sy
 80028d8:	f3bf 8f6f 	isb	sy
 80028dc:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80028de:	4b0b      	ldr	r3, [pc, #44]	; (800290c <vTaskDelay+0x44>)
 80028e0:	6819      	ldr	r1, [r3, #0]
 80028e2:	b141      	cbz	r1, 80028f6 <vTaskDelay+0x2e>
 80028e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e8:	f383 8811 	msr	BASEPRI, r3
 80028ec:	f3bf 8f6f 	isb	sy
 80028f0:	f3bf 8f4f 	dsb	sy
 80028f4:	e7fe      	b.n	80028f4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80028f6:	f7ff fed5 	bl	80026a4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80028fa:	f7ff fd4b 	bl	8002394 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80028fe:	f7ff ff6b 	bl	80027d8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8002902:	2800      	cmp	r0, #0
 8002904:	d0e2      	beq.n	80028cc <vTaskDelay+0x4>
 8002906:	bd08      	pop	{r3, pc}
 8002908:	e000ed04 	.word	0xe000ed04
 800290c:	200027f8 	.word	0x200027f8

08002910 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002910:	4b17      	ldr	r3, [pc, #92]	; (8002970 <vTaskSwitchContext+0x60>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	4b17      	ldr	r3, [pc, #92]	; (8002974 <vTaskSwitchContext+0x64>)
{
 8002916:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002918:	b112      	cbz	r2, 8002920 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800291a:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8002920:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002922:	4b15      	ldr	r3, [pc, #84]	; (8002978 <vTaskSwitchContext+0x68>)
 8002924:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002926:	fab3 f383 	clz	r3, r3
 800292a:	b2db      	uxtb	r3, r3
 800292c:	f1c3 031f 	rsb	r3, r3, #31
 8002930:	2214      	movs	r2, #20
 8002932:	4912      	ldr	r1, [pc, #72]	; (800297c <vTaskSwitchContext+0x6c>)
 8002934:	435a      	muls	r2, r3
 8002936:	1888      	adds	r0, r1, r2
 8002938:	588c      	ldr	r4, [r1, r2]
 800293a:	b944      	cbnz	r4, 800294e <vTaskSwitchContext+0x3e>
	__asm volatile
 800293c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002940:	f383 8811 	msr	BASEPRI, r3
 8002944:	f3bf 8f6f 	isb	sy
 8002948:	f3bf 8f4f 	dsb	sy
 800294c:	e7fe      	b.n	800294c <vTaskSwitchContext+0x3c>
 800294e:	6844      	ldr	r4, [r0, #4]
 8002950:	3208      	adds	r2, #8
 8002952:	6864      	ldr	r4, [r4, #4]
 8002954:	6044      	str	r4, [r0, #4]
 8002956:	440a      	add	r2, r1
 8002958:	4294      	cmp	r4, r2
 800295a:	bf04      	itt	eq
 800295c:	6862      	ldreq	r2, [r4, #4]
 800295e:	6042      	streq	r2, [r0, #4]
 8002960:	2214      	movs	r2, #20
 8002962:	fb02 1303 	mla	r3, r2, r3, r1
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	4b05      	ldr	r3, [pc, #20]	; (8002980 <vTaskSwitchContext+0x70>)
 800296c:	e7d6      	b.n	800291c <vTaskSwitchContext+0xc>
 800296e:	bf00      	nop
 8002970:	200027f8 	.word	0x200027f8
 8002974:	2000287c 	.word	0x2000287c
 8002978:	20002800 	.word	0x20002800
 800297c:	20002760 	.word	0x20002760
 8002980:	20002754 	.word	0x20002754

08002984 <xTaskNotifyWait>:
	{
 8002984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8002988:	4c1f      	ldr	r4, [pc, #124]	; (8002a08 <xTaskNotifyWait+0x84>)
	{
 800298a:	461e      	mov	r6, r3
 800298c:	4680      	mov	r8, r0
 800298e:	460f      	mov	r7, r1
 8002990:	4615      	mov	r5, r2
		taskENTER_CRITICAL();
 8002992:	f7ff fab7 	bl	8001f04 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8002996:	6823      	ldr	r3, [r4, #0]
 8002998:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800299c:	2b02      	cmp	r3, #2
 800299e:	d014      	beq.n	80029ca <xTaskNotifyWait+0x46>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80029a0:	6823      	ldr	r3, [r4, #0]
 80029a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029a4:	ea22 0208 	bic.w	r2, r2, r8
 80029a8:	64da      	str	r2, [r3, #76]	; 0x4c
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80029aa:	6823      	ldr	r3, [r4, #0]
 80029ac:	2101      	movs	r1, #1
 80029ae:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
				if( xTicksToWait > ( TickType_t ) 0 )
 80029b2:	b156      	cbz	r6, 80029ca <xTaskNotifyWait+0x46>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80029b4:	4630      	mov	r0, r6
 80029b6:	f7ff fced 	bl	8002394 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 80029ba:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <xTaskNotifyWait+0x88>)
 80029bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	f3bf 8f4f 	dsb	sy
 80029c6:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
 80029ca:	f7ff fabd 	bl	8001f48 <vPortExitCritical>
		taskENTER_CRITICAL();
 80029ce:	f7ff fa99 	bl	8001f04 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 80029d2:	b115      	cbz	r5, 80029da <xTaskNotifyWait+0x56>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80029d4:	6823      	ldr	r3, [r4, #0]
 80029d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d8:	602b      	str	r3, [r5, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80029da:	6823      	ldr	r3, [r4, #0]
 80029dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029e0:	2b02      	cmp	r3, #2
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80029e2:	bf01      	itttt	eq
 80029e4:	6823      	ldreq	r3, [r4, #0]
 80029e6:	6cd9      	ldreq	r1, [r3, #76]	; 0x4c
 80029e8:	43b9      	biceq	r1, r7
 80029ea:	64d9      	streq	r1, [r3, #76]	; 0x4c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80029ec:	6823      	ldr	r3, [r4, #0]
 80029ee:	f04f 0200 	mov.w	r2, #0
				xReturn = pdTRUE;
 80029f2:	bf0c      	ite	eq
 80029f4:	2501      	moveq	r5, #1
				xReturn = pdFALSE;
 80029f6:	2500      	movne	r5, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80029f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		taskEXIT_CRITICAL();
 80029fc:	f7ff faa4 	bl	8001f48 <vPortExitCritical>
	}
 8002a00:	4628      	mov	r0, r5
 8002a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a06:	bf00      	nop
 8002a08:	20002754 	.word	0x20002754
 8002a0c:	e000ed04 	.word	0xe000ed04

08002a10 <xTaskGenericNotify>:
	{
 8002a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a12:	460f      	mov	r7, r1
 8002a14:	4616      	mov	r6, r2
 8002a16:	461d      	mov	r5, r3
		configASSERT( xTaskToNotify );
 8002a18:	4604      	mov	r4, r0
 8002a1a:	b940      	cbnz	r0, 8002a2e <xTaskGenericNotify+0x1e>
 8002a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a20:	f383 8811 	msr	BASEPRI, r3
 8002a24:	f3bf 8f6f 	isb	sy
 8002a28:	f3bf 8f4f 	dsb	sy
 8002a2c:	e7fe      	b.n	8002a2c <xTaskGenericNotify+0x1c>
		taskENTER_CRITICAL();
 8002a2e:	f7ff fa69 	bl	8001f04 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 8002a32:	b10d      	cbz	r5, 8002a38 <xTaskGenericNotify+0x28>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8002a34:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002a36:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8002a38:	f894 5050 	ldrb.w	r5, [r4, #80]	; 0x50
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8002a3c:	2302      	movs	r3, #2
			switch( eAction )
 8002a3e:	1e72      	subs	r2, r6, #1
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8002a40:	b2ed      	uxtb	r5, r5
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8002a42:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			switch( eAction )
 8002a46:	2a03      	cmp	r2, #3
 8002a48:	d80a      	bhi.n	8002a60 <xTaskGenericNotify+0x50>
 8002a4a:	e8df f002 	tbb	[pc, r2]
 8002a4e:	0602      	.short	0x0602
 8002a50:	1004      	.short	0x1004
					pxTCB->ulNotifiedValue |= ulValue;
 8002a52:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002a54:	430f      	orrs	r7, r1
						pxTCB->ulNotifiedValue = ulValue;
 8002a56:	64e7      	str	r7, [r4, #76]	; 0x4c
 8002a58:	e002      	b.n	8002a60 <xTaskGenericNotify+0x50>
					( pxTCB->ulNotifiedValue )++;
 8002a5a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	64e3      	str	r3, [r4, #76]	; 0x4c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002a60:	2d01      	cmp	r5, #1
 8002a62:	d008      	beq.n	8002a76 <xTaskGenericNotify+0x66>
	{
 8002a64:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 8002a66:	f7ff fa6f 	bl	8001f48 <vPortExitCritical>
	}
 8002a6a:	4628      	mov	r0, r5
 8002a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002a6e:	2d02      	cmp	r5, #2
 8002a70:	d1f1      	bne.n	8002a56 <xTaskGenericNotify+0x46>
						xReturn = pdFAIL;
 8002a72:	2500      	movs	r5, #0
 8002a74:	e7f7      	b.n	8002a66 <xTaskGenericNotify+0x56>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a76:	1d26      	adds	r6, r4, #4
 8002a78:	4630      	mov	r0, r6
 8002a7a:	f7ff f9cc 	bl	8001e16 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8002a7e:	4914      	ldr	r1, [pc, #80]	; (8002ad0 <xTaskGenericNotify+0xc0>)
 8002a80:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002a82:	6808      	ldr	r0, [r1, #0]
 8002a84:	fa05 f302 	lsl.w	r3, r5, r2
 8002a88:	4303      	orrs	r3, r0
 8002a8a:	600b      	str	r3, [r1, #0]
 8002a8c:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <xTaskGenericNotify+0xc4>)
 8002a8e:	2014      	movs	r0, #20
 8002a90:	fb00 3002 	mla	r0, r0, r2, r3
 8002a94:	4631      	mov	r1, r6
 8002a96:	f7ff f99b 	bl	8001dd0 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002a9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002a9c:	b143      	cbz	r3, 8002ab0 <xTaskGenericNotify+0xa0>
 8002a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa2:	f383 8811 	msr	BASEPRI, r3
 8002aa6:	f3bf 8f6f 	isb	sy
 8002aaa:	f3bf 8f4f 	dsb	sy
 8002aae:	e7fe      	b.n	8002aae <xTaskGenericNotify+0x9e>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002ab0:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <xTaskGenericNotify+0xc8>)
 8002ab2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d9d3      	bls.n	8002a64 <xTaskGenericNotify+0x54>
					taskYIELD_IF_USING_PREEMPTION();
 8002abc:	4b07      	ldr	r3, [pc, #28]	; (8002adc <xTaskGenericNotify+0xcc>)
 8002abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	f3bf 8f4f 	dsb	sy
 8002ac8:	f3bf 8f6f 	isb	sy
 8002acc:	e7cb      	b.n	8002a66 <xTaskGenericNotify+0x56>
 8002ace:	bf00      	nop
 8002ad0:	20002800 	.word	0x20002800
 8002ad4:	20002760 	.word	0x20002760
 8002ad8:	20002754 	.word	0x20002754
 8002adc:	e000ed04 	.word	0xe000ed04

08002ae0 <xTaskGenericNotifyFromISR>:
	{
 8002ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ae4:	9f08      	ldr	r7, [sp, #32]
 8002ae6:	4689      	mov	r9, r1
 8002ae8:	4690      	mov	r8, r2
 8002aea:	461d      	mov	r5, r3
		configASSERT( xTaskToNotify );
 8002aec:	4604      	mov	r4, r0
 8002aee:	b940      	cbnz	r0, 8002b02 <xTaskGenericNotifyFromISR+0x22>
 8002af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af4:	f383 8811 	msr	BASEPRI, r3
 8002af8:	f3bf 8f6f 	isb	sy
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	e7fe      	b.n	8002b00 <xTaskGenericNotifyFromISR+0x20>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b02:	f7ff fb1d 	bl	8002140 <vPortValidateInterruptPriority>
	__asm volatile
 8002b06:	f3ef 8611 	mrs	r6, BASEPRI
 8002b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0e:	f383 8811 	msr	BASEPRI, r3
 8002b12:	f3bf 8f6f 	isb	sy
 8002b16:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 8002b1a:	b10d      	cbz	r5, 8002b20 <xTaskGenericNotifyFromISR+0x40>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8002b1c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002b1e:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8002b20:	f894 5050 	ldrb.w	r5, [r4, #80]	; 0x50
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8002b24:	2302      	movs	r3, #2
			switch( eAction )
 8002b26:	f108 32ff 	add.w	r2, r8, #4294967295
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8002b2a:	b2ed      	uxtb	r5, r5
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8002b2c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			switch( eAction )
 8002b30:	2a03      	cmp	r2, #3
 8002b32:	d807      	bhi.n	8002b44 <xTaskGenericNotifyFromISR+0x64>
 8002b34:	e8df f002 	tbb	[pc, r2]
 8002b38:	11130d02 	.word	0x11130d02
					pxTCB->ulNotifiedValue |= ulValue;
 8002b3c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002b3e:	ea41 0109 	orr.w	r1, r1, r9
 8002b42:	64e1      	str	r1, [r4, #76]	; 0x4c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002b44:	2d01      	cmp	r5, #1
 8002b46:	d00d      	beq.n	8002b64 <xTaskGenericNotifyFromISR+0x84>
	{
 8002b48:	2001      	movs	r0, #1
	__asm volatile
 8002b4a:	f386 8811 	msr	BASEPRI, r6
	}
 8002b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					( pxTCB->ulNotifiedValue )++;
 8002b52:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002b54:	3301      	adds	r3, #1
 8002b56:	64e3      	str	r3, [r4, #76]	; 0x4c
					break;
 8002b58:	e7f4      	b.n	8002b44 <xTaskGenericNotifyFromISR+0x64>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002b5a:	2d02      	cmp	r5, #2
 8002b5c:	d033      	beq.n	8002bc6 <xTaskGenericNotifyFromISR+0xe6>
						pxTCB->ulNotifiedValue = ulValue;
 8002b5e:	f8c4 904c 	str.w	r9, [r4, #76]	; 0x4c
 8002b62:	e7ef      	b.n	8002b44 <xTaskGenericNotifyFromISR+0x64>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002b64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b66:	b143      	cbz	r3, 8002b7a <xTaskGenericNotifyFromISR+0x9a>
	__asm volatile
 8002b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6c:	f383 8811 	msr	BASEPRI, r3
 8002b70:	f3bf 8f6f 	isb	sy
 8002b74:	f3bf 8f4f 	dsb	sy
 8002b78:	e7fe      	b.n	8002b78 <xTaskGenericNotifyFromISR+0x98>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b7a:	4b14      	ldr	r3, [pc, #80]	; (8002bcc <xTaskGenericNotifyFromISR+0xec>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	b9db      	cbnz	r3, 8002bb8 <xTaskGenericNotifyFromISR+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b80:	f104 0804 	add.w	r8, r4, #4
 8002b84:	4640      	mov	r0, r8
 8002b86:	f7ff f946 	bl	8001e16 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002b8a:	4a11      	ldr	r2, [pc, #68]	; (8002bd0 <xTaskGenericNotifyFromISR+0xf0>)
 8002b8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b8e:	6811      	ldr	r1, [r2, #0]
 8002b90:	409d      	lsls	r5, r3
 8002b92:	430d      	orrs	r5, r1
 8002b94:	6015      	str	r5, [r2, #0]
 8002b96:	4a0f      	ldr	r2, [pc, #60]	; (8002bd4 <xTaskGenericNotifyFromISR+0xf4>)
 8002b98:	2014      	movs	r0, #20
 8002b9a:	4641      	mov	r1, r8
 8002b9c:	fb00 2003 	mla	r0, r0, r3, r2
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002ba0:	f7ff f916 	bl	8001dd0 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002ba4:	4b0c      	ldr	r3, [pc, #48]	; (8002bd8 <xTaskGenericNotifyFromISR+0xf8>)
 8002ba6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d9cb      	bls.n	8002b48 <xTaskGenericNotifyFromISR+0x68>
 8002bb0:	2001      	movs	r0, #1
					if( pxHigherPriorityTaskWoken != NULL )
 8002bb2:	b12f      	cbz	r7, 8002bc0 <xTaskGenericNotifyFromISR+0xe0>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8002bb4:	6038      	str	r0, [r7, #0]
 8002bb6:	e7c8      	b.n	8002b4a <xTaskGenericNotifyFromISR+0x6a>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002bb8:	f104 0118 	add.w	r1, r4, #24
 8002bbc:	4807      	ldr	r0, [pc, #28]	; (8002bdc <xTaskGenericNotifyFromISR+0xfc>)
 8002bbe:	e7ef      	b.n	8002ba0 <xTaskGenericNotifyFromISR+0xc0>
						xYieldPending = pdTRUE;
 8002bc0:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <xTaskGenericNotifyFromISR+0x100>)
 8002bc2:	6018      	str	r0, [r3, #0]
 8002bc4:	e7c1      	b.n	8002b4a <xTaskGenericNotifyFromISR+0x6a>
						xReturn = pdFAIL;
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	e7bf      	b.n	8002b4a <xTaskGenericNotifyFromISR+0x6a>
 8002bca:	bf00      	nop
 8002bcc:	200027f8 	.word	0x200027f8
 8002bd0:	20002800 	.word	0x20002800
 8002bd4:	20002760 	.word	0x20002760
 8002bd8:	20002754 	.word	0x20002754
 8002bdc:	20002838 	.word	0x20002838
 8002be0:	2000287c 	.word	0x2000287c

08002be4 <StartTask1>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void const * argument)
{
 8002be4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osSignalWait(SIGNAL_BUTTON_PRESS,osWaitForever);
    HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 8002be6:	4c06      	ldr	r4, [pc, #24]	; (8002c00 <StartTask1+0x1c>)
	osSignalWait(SIGNAL_BUTTON_PRESS,osWaitForever);
 8002be8:	4668      	mov	r0, sp
 8002bea:	f04f 32ff 	mov.w	r2, #4294967295
 8002bee:	2101      	movs	r1, #1
 8002bf0:	f7ff f8bc 	bl	8001d6c <osSignalWait>
    HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 8002bf4:	2104      	movs	r1, #4
 8002bf6:	4620      	mov	r0, r4
 8002bf8:	f7fd fdc3 	bl	8000782 <HAL_GPIO_TogglePin>
 8002bfc:	e7f4      	b.n	8002be8 <StartTask1+0x4>
 8002bfe:	bf00      	nop
 8002c00:	48000400 	.word	0x48000400

08002c04 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void const * argument)
{
 8002c04:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002c06:	2001      	movs	r0, #1
 8002c08:	f7ff f87e 	bl	8001d08 <osDelay>
 8002c0c:	e7fb      	b.n	8002c06 <StartTask2+0x2>

08002c0e <SystemClock_Config>:
{
 8002c0e:	b510      	push	{r4, lr}
 8002c10:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c12:	2244      	movs	r2, #68	; 0x44
 8002c14:	2100      	movs	r1, #0
 8002c16:	a805      	add	r0, sp, #20
 8002c18:	f000 f9ec 	bl	8002ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c1c:	2214      	movs	r2, #20
 8002c1e:	2100      	movs	r1, #0
 8002c20:	4668      	mov	r0, sp
 8002c22:	f000 f9e7 	bl	8002ff4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c26:	2288      	movs	r2, #136	; 0x88
 8002c28:	2100      	movs	r1, #0
 8002c2a:	a816      	add	r0, sp, #88	; 0x58
 8002c2c:	f000 f9e2 	bl	8002ff4 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002c30:	2310      	movs	r3, #16
 8002c32:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002c34:	2301      	movs	r3, #1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002c36:	2400      	movs	r4, #0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002c38:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c3a:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002c3c:	2360      	movs	r3, #96	; 0x60
 8002c3e:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c40:	f7fd fe84 	bl	800094c <HAL_RCC_OscConfig>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002c44:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002c46:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002c48:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002c4a:	e88d 0018 	stmia.w	sp, {r3, r4}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c4e:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c50:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c52:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002c54:	f7fe f8a0 	bl	8000d98 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002c58:	2302      	movs	r3, #2
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c5a:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002c5c:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002c5e:	9425      	str	r4, [sp, #148]	; 0x94
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c60:	f7fe fa7a 	bl	8001158 <HAL_RCCEx_PeriphCLKConfig>
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002c64:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002c68:	f7fd fda4 	bl	80007b4 <HAL_PWREx_ControlVoltageScaling>
}
 8002c6c:	b038      	add	sp, #224	; 0xe0
 8002c6e:	bd10      	pop	{r4, pc}

08002c70 <main>:
{
 8002c70:	b500      	push	{lr}
 8002c72:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 8002c74:	f7fd fc34 	bl	80004e0 <HAL_Init>
  SystemClock_Config();
 8002c78:	f7ff ffc9 	bl	8002c0e <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c7c:	2214      	movs	r2, #20
 8002c7e:	2100      	movs	r1, #0
 8002c80:	a809      	add	r0, sp, #36	; 0x24
 8002c82:	f000 f9b7 	bl	8002ff4 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c86:	4b41      	ldr	r3, [pc, #260]	; (8002d8c <main+0x11c>)
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8002c88:	4841      	ldr	r0, [pc, #260]	; (8002d90 <main+0x120>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c8c:	f042 0201 	orr.w	r2, r2, #1
 8002c90:	64da      	str	r2, [r3, #76]	; 0x4c
 8002c92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c94:	f002 0201 	and.w	r2, r2, #1
 8002c98:	9200      	str	r2, [sp, #0]
 8002c9a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c9e:	f042 0202 	orr.w	r2, r2, #2
 8002ca2:	64da      	str	r2, [r3, #76]	; 0x4c
 8002ca4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ca6:	f002 0202 	and.w	r2, r2, #2
 8002caa:	9201      	str	r2, [sp, #4]
 8002cac:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cb0:	f042 0210 	orr.w	r2, r2, #16
 8002cb4:	64da      	str	r2, [r3, #76]	; 0x4c
 8002cb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cb8:	f002 0210 	and.w	r2, r2, #16
 8002cbc:	9202      	str	r2, [sp, #8]
 8002cbe:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cc2:	f042 0208 	orr.w	r2, r2, #8
 8002cc6:	64da      	str	r2, [r3, #76]	; 0x4c
 8002cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2104      	movs	r1, #4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cd4:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8002cd6:	f7fd fd4f 	bl	8000778 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ce0:	482c      	ldr	r0, [pc, #176]	; (8002d94 <main+0x124>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce2:	2500      	movs	r5, #0
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8002ce4:	f7fd fd48 	bl	8000778 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = JOY_CENTER_Pin;
 8002ce8:	2401      	movs	r4, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cea:	4b2b      	ldr	r3, [pc, #172]	; (8002d98 <main+0x128>)
  GPIO_InitStruct.Pin = JOY_CENTER_Pin;
 8002cec:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(JOY_CENTER_GPIO_Port, &GPIO_InitStruct);
 8002cee:	a909      	add	r1, sp, #36	; 0x24
 8002cf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cf4:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(JOY_CENTER_GPIO_Port, &GPIO_InitStruct);
 8002cf8:	f7fd fc62 	bl	80005c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8002cfc:	2304      	movs	r3, #4
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8002cfe:	a909      	add	r1, sp, #36	; 0x24
 8002d00:	4823      	ldr	r0, [pc, #140]	; (8002d90 <main+0x120>)
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8002d02:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d04:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d06:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d08:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8002d0a:	f7fd fc59 	bl	80005c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8002d0e:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8002d12:	a909      	add	r1, sp, #36	; 0x24
 8002d14:	481f      	ldr	r0, [pc, #124]	; (8002d94 <main+0x124>)
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8002d16:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d18:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1a:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1c:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8002d1e:	f7fd fc4f 	bl	80005c0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002d22:	2105      	movs	r1, #5
 8002d24:	462a      	mov	r2, r5
 8002d26:	2006      	movs	r0, #6
 8002d28:	f7fd fc0a 	bl	8000540 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002d2c:	2006      	movs	r0, #6
 8002d2e:	f7fd fc3b 	bl	80005a8 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 8002d32:	481a      	ldr	r0, [pc, #104]	; (8002d9c <main+0x12c>)
  huart2.Init.BaudRate = 115200;
 8002d34:	4a1a      	ldr	r2, [pc, #104]	; (8002da0 <main+0x130>)
  osThreadDef(Task1, StartTask1, osPriorityNormal, 0, 512);
 8002d36:	4c1b      	ldr	r4, [pc, #108]	; (8002da4 <main+0x134>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d38:	6085      	str	r5, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8002d3a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002d3e:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d42:	230c      	movs	r3, #12
 8002d44:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d46:	60c5      	str	r5, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d48:	6105      	str	r5, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d4a:	6185      	str	r5, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d4c:	61c5      	str	r5, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d4e:	6205      	str	r5, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d50:	6245      	str	r5, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d52:	f7fe ff8a 	bl	8001c6a <HAL_UART_Init>
  osThreadDef(Task1, StartTask1, osPriorityNormal, 0, 512);
 8002d56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d58:	ae04      	add	r6, sp, #16
 8002d5a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002d5c:	f854 3b04 	ldr.w	r3, [r4], #4
 8002d60:	6033      	str	r3, [r6, #0]
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 8002d62:	4629      	mov	r1, r5
 8002d64:	a804      	add	r0, sp, #16
 8002d66:	f7fe ffb7 	bl	8001cd8 <osThreadCreate>
 8002d6a:	4b0f      	ldr	r3, [pc, #60]	; (8002da8 <main+0x138>)
 8002d6c:	6018      	str	r0, [r3, #0]
  osThreadDef(Task2, StartTask2, osPriorityNormal, 0, 512);
 8002d6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d70:	ae09      	add	r6, sp, #36	; 0x24
 8002d72:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002d74:	6823      	ldr	r3, [r4, #0]
 8002d76:	6033      	str	r3, [r6, #0]
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8002d78:	4629      	mov	r1, r5
 8002d7a:	a809      	add	r0, sp, #36	; 0x24
 8002d7c:	f7fe ffac 	bl	8001cd8 <osThreadCreate>
 8002d80:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <main+0x13c>)
 8002d82:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8002d84:	f7fe ffa3 	bl	8001cce <osKernelStart>
 8002d88:	e7fe      	b.n	8002d88 <main+0x118>
 8002d8a:	bf00      	nop
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	48000400 	.word	0x48000400
 8002d94:	48001000 	.word	0x48001000
 8002d98:	10110000 	.word	0x10110000
 8002d9c:	2000288c 	.word	0x2000288c
 8002da0:	40004400 	.word	0x40004400
 8002da4:	0800301c 	.word	0x0800301c
 8002da8:	20002884 	.word	0x20002884
 8002dac:	20002888 	.word	0x20002888

08002db0 <HAL_GPIO_EXTI_Callback>:
	 osSignalSet(Task1Handle,SIGNAL_BUTTON_PRESS);
 8002db0:	4b02      	ldr	r3, [pc, #8]	; (8002dbc <HAL_GPIO_EXTI_Callback+0xc>)
 8002db2:	2101      	movs	r1, #1
 8002db4:	6818      	ldr	r0, [r3, #0]
 8002db6:	f7fe bfaf 	b.w	8001d18 <osSignalSet>
 8002dba:	bf00      	nop
 8002dbc:	20002884 	.word	0x20002884

08002dc0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002dc0:	6802      	ldr	r2, [r0, #0]
 8002dc2:	4b03      	ldr	r3, [pc, #12]	; (8002dd0 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d101      	bne.n	8002dcc <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8002dc8:	f7fd bb9a 	b.w	8000500 <HAL_IncTick>
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40001000 	.word	0x40001000

08002dd4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd4:	4b0e      	ldr	r3, [pc, #56]	; (8002e10 <HAL_MspInit+0x3c>)
{
 8002dd6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	661a      	str	r2, [r3, #96]	; 0x60
 8002de0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002de2:	f002 0201 	and.w	r2, r2, #1
 8002de6:	9200      	str	r2, [sp, #0]
 8002de8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002dec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002df0:	659a      	str	r2, [r3, #88]	; 0x58
 8002df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df8:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	210f      	movs	r1, #15
 8002dfe:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e02:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e04:	f7fd fb9c 	bl	8000540 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e08:	b003      	add	sp, #12
 8002e0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e0e:	bf00      	nop
 8002e10:	40021000 	.word	0x40021000

08002e14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e14:	b510      	push	{r4, lr}
 8002e16:	4604      	mov	r4, r0
 8002e18:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e1a:	2214      	movs	r2, #20
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	a803      	add	r0, sp, #12
 8002e20:	f000 f8e8 	bl	8002ff4 <memset>
  if(huart->Instance==USART2)
 8002e24:	6822      	ldr	r2, [r4, #0]
 8002e26:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <HAL_UART_MspInit+0x5c>)
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d11f      	bne.n	8002e6c <HAL_UART_MspInit+0x58>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e2c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e30:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e32:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e34:	480f      	ldr	r0, [pc, #60]	; (8002e74 <HAL_UART_MspInit+0x60>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e36:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002e3a:	659a      	str	r2, [r3, #88]	; 0x58
 8002e3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e3e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002e42:	9201      	str	r2, [sp, #4]
 8002e44:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e48:	f042 0208 	orr.w	r2, r2, #8
 8002e4c:	64da      	str	r2, [r3, #76]	; 0x4c
 8002e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e50:	f003 0308 	and.w	r3, r3, #8
 8002e54:	9302      	str	r3, [sp, #8]
 8002e56:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002e58:	2360      	movs	r3, #96	; 0x60
 8002e5a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e60:	2303      	movs	r3, #3
 8002e62:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e64:	2307      	movs	r3, #7
 8002e66:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e68:	f7fd fbaa 	bl	80005c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002e6c:	b008      	add	sp, #32
 8002e6e:	bd10      	pop	{r4, pc}
 8002e70:	40004400 	.word	0x40004400
 8002e74:	48000c00 	.word	0x48000c00

08002e78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e78:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002e7a:	4601      	mov	r1, r0
{
 8002e7c:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002e7e:	2200      	movs	r2, #0
 8002e80:	2036      	movs	r0, #54	; 0x36
 8002e82:	f7fd fb5d 	bl	8000540 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8002e86:	2036      	movs	r0, #54	; 0x36
 8002e88:	f7fd fb8e 	bl	80005a8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002e8c:	4b14      	ldr	r3, [pc, #80]	; (8002ee0 <HAL_InitTick+0x68>)
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002e8e:	4c15      	ldr	r4, [pc, #84]	; (8002ee4 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002e90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e92:	f042 0210 	orr.w	r2, r2, #16
 8002e96:	659a      	str	r2, [r3, #88]	; 0x58
 8002e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9a:	f003 0310 	and.w	r3, r3, #16
 8002e9e:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ea0:	a901      	add	r1, sp, #4
 8002ea2:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002ea4:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ea6:	f7fe f82d 	bl	8000f04 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002eaa:	f7fe f807 	bl	8000ebc <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8002eae:	4b0e      	ldr	r3, [pc, #56]	; (8002ee8 <HAL_InitTick+0x70>)
 8002eb0:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002eb2:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002eb6:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <HAL_InitTick+0x74>)
 8002eba:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ebe:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 8002ec0:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8002ec2:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002ec4:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8002ec6:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ec8:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002eca:	f7fe fc61 	bl	8001790 <HAL_TIM_Base_Init>
 8002ece:	b920      	cbnz	r0, 8002eda <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002ed0:	4620      	mov	r0, r4
 8002ed2:	f7fe fb2b 	bl	800152c <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8002ed6:	b008      	add	sp, #32
 8002ed8:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8002eda:	2001      	movs	r0, #1
 8002edc:	e7fb      	b.n	8002ed6 <HAL_InitTick+0x5e>
 8002ede:	bf00      	nop
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	20002904 	.word	0x20002904
 8002ee8:	40001000 	.word	0x40001000
 8002eec:	000f4240 	.word	0x000f4240

08002ef0 <NMI_Handler>:
 8002ef0:	4770      	bx	lr

08002ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ef2:	e7fe      	b.n	8002ef2 <HardFault_Handler>

08002ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ef4:	e7fe      	b.n	8002ef4 <MemManage_Handler>

08002ef6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ef6:	e7fe      	b.n	8002ef6 <BusFault_Handler>

08002ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ef8:	e7fe      	b.n	8002ef8 <UsageFault_Handler>

08002efa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002efa:	4770      	bx	lr

08002efc <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002efc:	2001      	movs	r0, #1
 8002efe:	f7fd bc45 	b.w	800078c <HAL_GPIO_EXTI_IRQHandler>
	...

08002f04 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f04:	4801      	ldr	r0, [pc, #4]	; (8002f0c <TIM6_DAC_IRQHandler+0x8>)
 8002f06:	f7fe bb2d 	b.w	8001564 <HAL_TIM_IRQHandler>
 8002f0a:	bf00      	nop
 8002f0c:	20002904 	.word	0x20002904

08002f10 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f10:	490f      	ldr	r1, [pc, #60]	; (8002f50 <SystemInit+0x40>)
 8002f12:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002f16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002f1e:	4b0d      	ldr	r3, [pc, #52]	; (8002f54 <SystemInit+0x44>)
 8002f20:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002f22:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8002f24:	f042 0201 	orr.w	r2, r2, #1
 8002f28:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8002f2a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8002f32:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8002f36:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002f38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f3c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f44:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002f46:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f4c:	608b      	str	r3, [r1, #8]
 8002f4e:	4770      	bx	lr
 8002f50:	e000ed00 	.word	0xe000ed00
 8002f54:	40021000 	.word	0x40021000

08002f58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002f58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f90 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002f5c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002f5e:	e003      	b.n	8002f68 <LoopCopyDataInit>

08002f60 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002f60:	4b0c      	ldr	r3, [pc, #48]	; (8002f94 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002f62:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002f64:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002f66:	3104      	adds	r1, #4

08002f68 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002f68:	480b      	ldr	r0, [pc, #44]	; (8002f98 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002f6a:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002f6c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002f6e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002f70:	d3f6      	bcc.n	8002f60 <CopyDataInit>
	ldr	r2, =_sbss
 8002f72:	4a0b      	ldr	r2, [pc, #44]	; (8002fa0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002f74:	e002      	b.n	8002f7c <LoopFillZerobss>

08002f76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002f76:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002f78:	f842 3b04 	str.w	r3, [r2], #4

08002f7c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002f7c:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <LoopForever+0x16>)
	cmp	r2, r3
 8002f7e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002f80:	d3f9      	bcc.n	8002f76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f82:	f7ff ffc5 	bl	8002f10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f86:	f000 f811 	bl	8002fac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f8a:	f7ff fe71 	bl	8002c70 <main>

08002f8e <LoopForever>:

LoopForever:
    b LoopForever
 8002f8e:	e7fe      	b.n	8002f8e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002f90:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002f94:	080030c0 	.word	0x080030c0
	ldr	r0, =_sdata
 8002f98:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002f9c:	20000008 	.word	0x20000008
	ldr	r2, =_sbss
 8002fa0:	20000008 	.word	0x20000008
	ldr	r3, = _ebss
 8002fa4:	20002944 	.word	0x20002944

08002fa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002fa8:	e7fe      	b.n	8002fa8 <ADC1_2_IRQHandler>
	...

08002fac <__libc_init_array>:
 8002fac:	b570      	push	{r4, r5, r6, lr}
 8002fae:	4e0d      	ldr	r6, [pc, #52]	; (8002fe4 <__libc_init_array+0x38>)
 8002fb0:	4c0d      	ldr	r4, [pc, #52]	; (8002fe8 <__libc_init_array+0x3c>)
 8002fb2:	1ba4      	subs	r4, r4, r6
 8002fb4:	10a4      	asrs	r4, r4, #2
 8002fb6:	2500      	movs	r5, #0
 8002fb8:	42a5      	cmp	r5, r4
 8002fba:	d109      	bne.n	8002fd0 <__libc_init_array+0x24>
 8002fbc:	4e0b      	ldr	r6, [pc, #44]	; (8002fec <__libc_init_array+0x40>)
 8002fbe:	4c0c      	ldr	r4, [pc, #48]	; (8002ff0 <__libc_init_array+0x44>)
 8002fc0:	f000 f820 	bl	8003004 <_init>
 8002fc4:	1ba4      	subs	r4, r4, r6
 8002fc6:	10a4      	asrs	r4, r4, #2
 8002fc8:	2500      	movs	r5, #0
 8002fca:	42a5      	cmp	r5, r4
 8002fcc:	d105      	bne.n	8002fda <__libc_init_array+0x2e>
 8002fce:	bd70      	pop	{r4, r5, r6, pc}
 8002fd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fd4:	4798      	blx	r3
 8002fd6:	3501      	adds	r5, #1
 8002fd8:	e7ee      	b.n	8002fb8 <__libc_init_array+0xc>
 8002fda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fde:	4798      	blx	r3
 8002fe0:	3501      	adds	r5, #1
 8002fe2:	e7f2      	b.n	8002fca <__libc_init_array+0x1e>
 8002fe4:	080030b8 	.word	0x080030b8
 8002fe8:	080030b8 	.word	0x080030b8
 8002fec:	080030b8 	.word	0x080030b8
 8002ff0:	080030bc 	.word	0x080030bc

08002ff4 <memset>:
 8002ff4:	4402      	add	r2, r0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d100      	bne.n	8002ffe <memset+0xa>
 8002ffc:	4770      	bx	lr
 8002ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8003002:	e7f9      	b.n	8002ff8 <memset+0x4>

08003004 <_init>:
 8003004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003006:	bf00      	nop
 8003008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300a:	bc08      	pop	{r3}
 800300c:	469e      	mov	lr, r3
 800300e:	4770      	bx	lr

08003010 <_fini>:
 8003010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003012:	bf00      	nop
 8003014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003016:	bc08      	pop	{r3}
 8003018:	469e      	mov	lr, r3
 800301a:	4770      	bx	lr
