
Semaphores_lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000457c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0800470c  0800470c  0001470c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004864  08004864  00014864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800486c  0800486c  0001486c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004870  08004870  00014870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  20000000  08004874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002950  2000006c  080048e0  0002006c  2**2
                  ALLOC
  8 ._user_heap_stack 00002000  200029bc  080048e0  000229bc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000189d9  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000034b0  00000000  00000000  00038a75  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000b33c  00000000  00000000  0003bf25  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000fc8  00000000  00000000  00047268  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001330  00000000  00000000  00048230  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00008027  00000000  00000000  00049560  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00006462  00000000  00000000  00051587  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000579e9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000034c0  00000000  00000000  00057a68  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         00000084  00000000  00000000  0005af28  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      00000117  00000000  00000000  0005afac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080046f4 	.word	0x080046f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080046f4 	.word	0x080046f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000582:	2003      	movs	r0, #3
 8000584:	f000 f81a 	bl	80005bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000588:	2000      	movs	r0, #0
 800058a:	f003 f8b3 	bl	80036f4 <HAL_InitTick>
 800058e:	4604      	mov	r4, r0
 8000590:	b918      	cbnz	r0, 800059a <HAL_Init+0x1a>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000592:	f003 f85d 	bl	8003650 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 8000596:	4620      	mov	r0, r4
 8000598:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800059a:	2401      	movs	r4, #1
 800059c:	e7fb      	b.n	8000596 <HAL_Init+0x16>
	...

080005a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80005a0:	4a02      	ldr	r2, [pc, #8]	; (80005ac <HAL_IncTick+0xc>)
 80005a2:	6813      	ldr	r3, [r2, #0]
 80005a4:	3301      	adds	r3, #1
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	200028f0 	.word	0x200028f0

080005b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005b0:	4b01      	ldr	r3, [pc, #4]	; (80005b8 <HAL_GetTick+0x8>)
 80005b2:	6818      	ldr	r0, [r3, #0]
}
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	200028f0 	.word	0x200028f0

080005bc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005bc:	4a07      	ldr	r2, [pc, #28]	; (80005dc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005be:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005c4:	041b      	lsls	r3, r3, #16
 80005c6:	0c1b      	lsrs	r3, r3, #16
 80005c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005cc:	0200      	lsls	r0, r0, #8
 80005ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005d6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005d8:	60d3      	str	r3, [r2, #12]
 80005da:	4770      	bx	lr
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005e0:	4b17      	ldr	r3, [pc, #92]	; (8000640 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005e2:	b530      	push	{r4, r5, lr}
 80005e4:	68dc      	ldr	r4, [r3, #12]
 80005e6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ea:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ee:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005f0:	2b04      	cmp	r3, #4
 80005f2:	bf28      	it	cs
 80005f4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f8:	f04f 0501 	mov.w	r5, #1
 80005fc:	fa05 f303 	lsl.w	r3, r5, r3
 8000600:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000604:	bf8c      	ite	hi
 8000606:	3c03      	subhi	r4, #3
 8000608:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800060a:	4019      	ands	r1, r3
 800060c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800060e:	fa05 f404 	lsl.w	r4, r5, r4
 8000612:	3c01      	subs	r4, #1
 8000614:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000616:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000618:	ea42 0201 	orr.w	r2, r2, r1
 800061c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000620:	bfaf      	iteee	ge
 8000622:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000626:	f000 000f 	andlt.w	r0, r0, #15
 800062a:	4b06      	ldrlt	r3, [pc, #24]	; (8000644 <HAL_NVIC_SetPriority+0x64>)
 800062c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062e:	bfa5      	ittet	ge
 8000630:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000634:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000636:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000638:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800063c:	bd30      	pop	{r4, r5, pc}
 800063e:	bf00      	nop
 8000640:	e000ed00 	.word	0xe000ed00
 8000644:	e000ed14 	.word	0xe000ed14

08000648 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000648:	0942      	lsrs	r2, r0, #5
 800064a:	2301      	movs	r3, #1
 800064c:	f000 001f 	and.w	r0, r0, #31
 8000650:	fa03 f000 	lsl.w	r0, r3, r0
 8000654:	4b01      	ldr	r3, [pc, #4]	; (800065c <HAL_NVIC_EnableIRQ+0x14>)
 8000656:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800065a:	4770      	bx	lr
 800065c:	e000e100 	.word	0xe000e100

08000660 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000664:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000666:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000668:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000814 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800066c:	4c67      	ldr	r4, [pc, #412]	; (800080c <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800066e:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8000670:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000672:	9a01      	ldr	r2, [sp, #4]
 8000674:	40da      	lsrs	r2, r3
 8000676:	d102      	bne.n	800067e <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8000678:	b005      	add	sp, #20
 800067a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800067e:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8000680:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000682:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8000684:	ea12 0e06 	ands.w	lr, r2, r6
 8000688:	f000 80b1 	beq.w	80007ee <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800068c:	684a      	ldr	r2, [r1, #4]
 800068e:	f022 0710 	bic.w	r7, r2, #16
 8000692:	2f02      	cmp	r7, #2
 8000694:	d116      	bne.n	80006c4 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 8000696:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 800069a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800069e:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80006a2:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80006a6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80006aa:	f04f 0c0f 	mov.w	ip, #15
 80006ae:	fa0c fc0a 	lsl.w	ip, ip, sl
 80006b2:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80006b6:	690d      	ldr	r5, [r1, #16]
 80006b8:	fa05 f50a 	lsl.w	r5, r5, sl
 80006bc:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 80006c0:	f8c9 5020 	str.w	r5, [r9, #32]
 80006c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80006c8:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80006ca:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80006ce:	fa05 f50c 	lsl.w	r5, r5, ip
 80006d2:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006d4:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80006d8:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006dc:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006e0:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006e2:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006e6:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80006e8:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006ec:	d811      	bhi.n	8000712 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80006ee:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80006f0:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80006f4:	68cf      	ldr	r7, [r1, #12]
 80006f6:	fa07 f70c 	lsl.w	r7, r7, ip
 80006fa:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 80006fe:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000700:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000702:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000706:	f3c2 1700 	ubfx	r7, r2, #4, #1
 800070a:	409f      	lsls	r7, r3
 800070c:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8000710:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000712:	f1ba 0f03 	cmp.w	sl, #3
 8000716:	d107      	bne.n	8000728 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8000718:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800071a:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800071e:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8000722:	409f      	lsls	r7, r3
 8000724:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8000726:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8000728:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800072a:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800072c:	688e      	ldr	r6, [r1, #8]
 800072e:	fa06 f60c 	lsl.w	r6, r6, ip
 8000732:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8000734:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000736:	00d5      	lsls	r5, r2, #3
 8000738:	d559      	bpl.n	80007ee <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073a:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 800073e:	f045 0501 	orr.w	r5, r5, #1
 8000742:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8000746:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 800074a:	f023 0603 	bic.w	r6, r3, #3
 800074e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000752:	f005 0501 	and.w	r5, r5, #1
 8000756:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 800075a:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800075c:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000760:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000762:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000764:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000768:	270f      	movs	r7, #15
 800076a:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800076e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000772:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000776:	d03c      	beq.n	80007f2 <HAL_GPIO_Init+0x192>
 8000778:	4d25      	ldr	r5, [pc, #148]	; (8000810 <HAL_GPIO_Init+0x1b0>)
 800077a:	42a8      	cmp	r0, r5
 800077c:	d03b      	beq.n	80007f6 <HAL_GPIO_Init+0x196>
 800077e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000782:	42a8      	cmp	r0, r5
 8000784:	d039      	beq.n	80007fa <HAL_GPIO_Init+0x19a>
 8000786:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800078a:	42a8      	cmp	r0, r5
 800078c:	d037      	beq.n	80007fe <HAL_GPIO_Init+0x19e>
 800078e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000792:	42a8      	cmp	r0, r5
 8000794:	d035      	beq.n	8000802 <HAL_GPIO_Init+0x1a2>
 8000796:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800079a:	42a8      	cmp	r0, r5
 800079c:	d033      	beq.n	8000806 <HAL_GPIO_Init+0x1a6>
 800079e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007a2:	42a8      	cmp	r0, r5
 80007a4:	bf14      	ite	ne
 80007a6:	2507      	movne	r5, #7
 80007a8:	2506      	moveq	r5, #6
 80007aa:	fa05 f50c 	lsl.w	r5, r5, ip
 80007ae:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80007b0:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 80007b2:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80007b4:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007b8:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 80007ba:	bf54      	ite	pl
 80007bc:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80007be:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 80007c2:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 80007c4:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007c6:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 80007c8:	bf54      	ite	pl
 80007ca:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80007cc:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 80007d0:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 80007d2:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007d4:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 80007d6:	bf54      	ite	pl
 80007d8:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80007da:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 80007de:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 80007e0:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007e2:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 80007e4:	bf54      	ite	pl
 80007e6:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80007e8:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 80007ec:	60e5      	str	r5, [r4, #12]
    position++;
 80007ee:	3301      	adds	r3, #1
 80007f0:	e73f      	b.n	8000672 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80007f2:	2500      	movs	r5, #0
 80007f4:	e7d9      	b.n	80007aa <HAL_GPIO_Init+0x14a>
 80007f6:	2501      	movs	r5, #1
 80007f8:	e7d7      	b.n	80007aa <HAL_GPIO_Init+0x14a>
 80007fa:	2502      	movs	r5, #2
 80007fc:	e7d5      	b.n	80007aa <HAL_GPIO_Init+0x14a>
 80007fe:	2503      	movs	r5, #3
 8000800:	e7d3      	b.n	80007aa <HAL_GPIO_Init+0x14a>
 8000802:	2504      	movs	r5, #4
 8000804:	e7d1      	b.n	80007aa <HAL_GPIO_Init+0x14a>
 8000806:	2505      	movs	r5, #5
 8000808:	e7cf      	b.n	80007aa <HAL_GPIO_Init+0x14a>
 800080a:	bf00      	nop
 800080c:	40010400 	.word	0x40010400
 8000810:	48000400 	.word	0x48000400
 8000814:	40021000 	.word	0x40021000

08000818 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000818:	b10a      	cbz	r2, 800081e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800081a:	6181      	str	r1, [r0, #24]
 800081c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800081e:	6281      	str	r1, [r0, #40]	; 0x28
 8000820:	4770      	bx	lr
	...

08000824 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000824:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000826:	4b04      	ldr	r3, [pc, #16]	; (8000838 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000828:	6959      	ldr	r1, [r3, #20]
 800082a:	4201      	tst	r1, r0
 800082c:	d002      	beq.n	8000834 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800082e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000830:	f002 fefe 	bl	8003630 <HAL_GPIO_EXTI_Callback>
 8000834:	bd08      	pop	{r3, pc}
 8000836:	bf00      	nop
 8000838:	40010400 	.word	0x40010400

0800083c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800083c:	4b02      	ldr	r3, [pc, #8]	; (8000848 <HAL_PWREx_GetVoltageRange+0xc>)
 800083e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8000840:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	40007000 	.word	0x40007000

0800084c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800084c:	4b17      	ldr	r3, [pc, #92]	; (80008ac <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800084e:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000850:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000854:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000858:	d11c      	bne.n	8000894 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800085a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800085e:	d015      	beq.n	800088c <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800086a:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800086c:	4a10      	ldr	r2, [pc, #64]	; (80008b0 <HAL_PWREx_ControlVoltageScaling+0x64>)
 800086e:	6811      	ldr	r1, [r2, #0]
 8000870:	2232      	movs	r2, #50	; 0x32
 8000872:	434a      	muls	r2, r1
 8000874:	490f      	ldr	r1, [pc, #60]	; (80008b4 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8000876:	fbb2 f2f1 	udiv	r2, r2, r1
 800087a:	4619      	mov	r1, r3
 800087c:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800087e:	6958      	ldr	r0, [r3, #20]
 8000880:	0540      	lsls	r0, r0, #21
 8000882:	d500      	bpl.n	8000886 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8000884:	b922      	cbnz	r2, 8000890 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000886:	694b      	ldr	r3, [r1, #20]
 8000888:	055b      	lsls	r3, r3, #21
 800088a:	d40d      	bmi.n	80008a8 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800088c:	2000      	movs	r0, #0
 800088e:	4770      	bx	lr
        wait_loop_index--;
 8000890:	3a01      	subs	r2, #1
 8000892:	e7f4      	b.n	800087e <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000894:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000898:	bf1f      	itttt	ne
 800089a:	681a      	ldrne	r2, [r3, #0]
 800089c:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 80008a0:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 80008a4:	601a      	strne	r2, [r3, #0]
 80008a6:	e7f1      	b.n	800088c <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 80008a8:	2003      	movs	r0, #3
}
 80008aa:	4770      	bx	lr
 80008ac:	40007000 	.word	0x40007000
 80008b0:	20000004 	.word	0x20000004
 80008b4:	000f4240 	.word	0x000f4240

080008b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80008b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80008ba:	4d1e      	ldr	r5, [pc, #120]	; (8000934 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80008bc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80008be:	00da      	lsls	r2, r3, #3
{
 80008c0:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80008c2:	d518      	bpl.n	80008f6 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80008c4:	f7ff ffba 	bl	800083c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80008c8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80008cc:	d123      	bne.n	8000916 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80008ce:	2c80      	cmp	r4, #128	; 0x80
 80008d0:	d929      	bls.n	8000926 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80008d2:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80008d4:	bf8c      	ite	hi
 80008d6:	2002      	movhi	r0, #2
 80008d8:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80008da:	4a17      	ldr	r2, [pc, #92]	; (8000938 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80008dc:	6813      	ldr	r3, [r2, #0]
 80008de:	f023 0307 	bic.w	r3, r3, #7
 80008e2:	4303      	orrs	r3, r0
 80008e4:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80008e6:	6813      	ldr	r3, [r2, #0]
 80008e8:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80008ec:	1a18      	subs	r0, r3, r0
 80008ee:	bf18      	it	ne
 80008f0:	2001      	movne	r0, #1
 80008f2:	b003      	add	sp, #12
 80008f4:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80008f6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fc:	65ab      	str	r3, [r5, #88]	; 0x58
 80008fe:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000904:	9301      	str	r3, [sp, #4]
 8000906:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000908:	f7ff ff98 	bl	800083c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800090c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800090e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000912:	65ab      	str	r3, [r5, #88]	; 0x58
 8000914:	e7d8      	b.n	80008c8 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8000916:	2c80      	cmp	r4, #128	; 0x80
 8000918:	d807      	bhi.n	800092a <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 800091a:	d008      	beq.n	800092e <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 800091c:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8000920:	4258      	negs	r0, r3
 8000922:	4158      	adcs	r0, r3
 8000924:	e7d9      	b.n	80008da <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000926:	2000      	movs	r0, #0
 8000928:	e7d7      	b.n	80008da <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 800092a:	2003      	movs	r0, #3
 800092c:	e7d5      	b.n	80008da <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 800092e:	2002      	movs	r0, #2
 8000930:	e7d3      	b.n	80008da <RCC_SetFlashLatencyFromMSIRange+0x22>
 8000932:	bf00      	nop
 8000934:	40021000 	.word	0x40021000
 8000938:	40022000 	.word	0x40022000

0800093c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800093c:	4b25      	ldr	r3, [pc, #148]	; (80009d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800093e:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000940:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000942:	f012 020c 	ands.w	r2, r2, #12
 8000946:	d005      	beq.n	8000954 <HAL_RCC_GetSysClockFreq+0x18>
 8000948:	2a0c      	cmp	r2, #12
 800094a:	d115      	bne.n	8000978 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800094c:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000950:	2901      	cmp	r1, #1
 8000952:	d118      	bne.n	8000986 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000954:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8000956:	4820      	ldr	r0, [pc, #128]	; (80009d8 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000958:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800095a:	bf55      	itete	pl
 800095c:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000960:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000962:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000966:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 800096a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800096e:	b382      	cbz	r2, 80009d2 <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000970:	2a0c      	cmp	r2, #12
 8000972:	d009      	beq.n	8000988 <HAL_RCC_GetSysClockFreq+0x4c>
 8000974:	2000      	movs	r0, #0
  return sysclockfreq;
 8000976:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000978:	2a04      	cmp	r2, #4
 800097a:	d029      	beq.n	80009d0 <HAL_RCC_GetSysClockFreq+0x94>
 800097c:	2a08      	cmp	r2, #8
 800097e:	4817      	ldr	r0, [pc, #92]	; (80009dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8000980:	bf18      	it	ne
 8000982:	2000      	movne	r0, #0
 8000984:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000986:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000988:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800098a:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800098c:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000990:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 8000994:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000996:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 800099a:	d005      	beq.n	80009a8 <HAL_RCC_GetSysClockFreq+0x6c>
 800099c:	2903      	cmp	r1, #3
 800099e:	d012      	beq.n	80009c6 <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80009a0:	68d9      	ldr	r1, [r3, #12]
 80009a2:	f3c1 2106 	ubfx	r1, r1, #8, #7
 80009a6:	e003      	b.n	80009b0 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80009a8:	68d9      	ldr	r1, [r3, #12]
 80009aa:	480d      	ldr	r0, [pc, #52]	; (80009e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80009ac:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80009b0:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80009b2:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80009b6:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80009ba:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80009bc:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80009be:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80009c0:	fbb0 f0f3 	udiv	r0, r0, r3
 80009c4:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80009c6:	68d9      	ldr	r1, [r3, #12]
 80009c8:	4804      	ldr	r0, [pc, #16]	; (80009dc <HAL_RCC_GetSysClockFreq+0xa0>)
 80009ca:	f3c1 2106 	ubfx	r1, r1, #8, #7
 80009ce:	e7ef      	b.n	80009b0 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 80009d0:	4803      	ldr	r0, [pc, #12]	; (80009e0 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 80009d2:	4770      	bx	lr
 80009d4:	40021000 	.word	0x40021000
 80009d8:	0800479c 	.word	0x0800479c
 80009dc:	007a1200 	.word	0x007a1200
 80009e0:	00f42400 	.word	0x00f42400

080009e4 <HAL_RCC_OscConfig>:
{
 80009e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 80009e8:	4605      	mov	r5, r0
 80009ea:	b918      	cbnz	r0, 80009f4 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 80009ec:	2001      	movs	r0, #1
}
 80009ee:	b003      	add	sp, #12
 80009f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80009f4:	4ca5      	ldr	r4, [pc, #660]	; (8000c8c <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80009f6:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80009f8:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80009fa:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80009fc:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80009fe:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000a02:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000a06:	d53c      	bpl.n	8000a82 <HAL_RCC_OscConfig+0x9e>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000a08:	b11e      	cbz	r6, 8000a12 <HAL_RCC_OscConfig+0x2e>
 8000a0a:	2e0c      	cmp	r6, #12
 8000a0c:	d163      	bne.n	8000ad6 <HAL_RCC_OscConfig+0xf2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000a0e:	2f01      	cmp	r7, #1
 8000a10:	d161      	bne.n	8000ad6 <HAL_RCC_OscConfig+0xf2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000a12:	6823      	ldr	r3, [r4, #0]
 8000a14:	0798      	lsls	r0, r3, #30
 8000a16:	d502      	bpl.n	8000a1e <HAL_RCC_OscConfig+0x3a>
 8000a18:	69ab      	ldr	r3, [r5, #24]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0e6      	beq.n	80009ec <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000a1e:	6823      	ldr	r3, [r4, #0]
 8000a20:	6a28      	ldr	r0, [r5, #32]
 8000a22:	0719      	lsls	r1, r3, #28
 8000a24:	bf56      	itet	pl
 8000a26:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8000a2a:	6823      	ldrmi	r3, [r4, #0]
 8000a2c:	091b      	lsrpl	r3, r3, #4
 8000a2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a32:	4283      	cmp	r3, r0
 8000a34:	d23a      	bcs.n	8000aac <HAL_RCC_OscConfig+0xc8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a36:	f7ff ff3f 	bl	80008b8 <RCC_SetFlashLatencyFromMSIRange>
 8000a3a:	2800      	cmp	r0, #0
 8000a3c:	d1d6      	bne.n	80009ec <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a3e:	6823      	ldr	r3, [r4, #0]
 8000a40:	f043 0308 	orr.w	r3, r3, #8
 8000a44:	6023      	str	r3, [r4, #0]
 8000a46:	6823      	ldr	r3, [r4, #0]
 8000a48:	6a2a      	ldr	r2, [r5, #32]
 8000a4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a52:	6863      	ldr	r3, [r4, #4]
 8000a54:	69ea      	ldr	r2, [r5, #28]
 8000a56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000a5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a5e:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000a60:	f7ff ff6c 	bl	800093c <HAL_RCC_GetSysClockFreq>
 8000a64:	68a3      	ldr	r3, [r4, #8]
 8000a66:	4a8a      	ldr	r2, [pc, #552]	; (8000c90 <HAL_RCC_OscConfig+0x2ac>)
 8000a68:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000a6c:	5cd3      	ldrb	r3, [r2, r3]
 8000a6e:	f003 031f 	and.w	r3, r3, #31
 8000a72:	40d8      	lsrs	r0, r3
 8000a74:	4b87      	ldr	r3, [pc, #540]	; (8000c94 <HAL_RCC_OscConfig+0x2b0>)
 8000a76:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f002 fe3b 	bl	80036f4 <HAL_InitTick>
        if(status != HAL_OK)
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	d1b5      	bne.n	80009ee <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a82:	682b      	ldr	r3, [r5, #0]
 8000a84:	07d8      	lsls	r0, r3, #31
 8000a86:	d45d      	bmi.n	8000b44 <HAL_RCC_OscConfig+0x160>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a88:	682b      	ldr	r3, [r5, #0]
 8000a8a:	0799      	lsls	r1, r3, #30
 8000a8c:	f100 809c 	bmi.w	8000bc8 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a90:	682b      	ldr	r3, [r5, #0]
 8000a92:	0718      	lsls	r0, r3, #28
 8000a94:	f100 80d0 	bmi.w	8000c38 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a98:	682b      	ldr	r3, [r5, #0]
 8000a9a:	0759      	lsls	r1, r3, #29
 8000a9c:	f100 80fc 	bmi.w	8000c98 <HAL_RCC_OscConfig+0x2b4>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000aa0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	f040 8165 	bne.w	8000d72 <HAL_RCC_OscConfig+0x38e>
  return HAL_OK;
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	e7a0      	b.n	80009ee <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000aac:	6823      	ldr	r3, [r4, #0]
 8000aae:	f043 0308 	orr.w	r3, r3, #8
 8000ab2:	6023      	str	r3, [r4, #0]
 8000ab4:	6823      	ldr	r3, [r4, #0]
 8000ab6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000aba:	4303      	orrs	r3, r0
 8000abc:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000abe:	6863      	ldr	r3, [r4, #4]
 8000ac0:	69ea      	ldr	r2, [r5, #28]
 8000ac2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000ac6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000aca:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000acc:	f7ff fef4 	bl	80008b8 <RCC_SetFlashLatencyFromMSIRange>
 8000ad0:	2800      	cmp	r0, #0
 8000ad2:	d0c5      	beq.n	8000a60 <HAL_RCC_OscConfig+0x7c>
 8000ad4:	e78a      	b.n	80009ec <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ad6:	69ab      	ldr	r3, [r5, #24]
 8000ad8:	b31b      	cbz	r3, 8000b22 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_ENABLE();
 8000ada:	6823      	ldr	r3, [r4, #0]
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ae2:	f7ff fd65 	bl	80005b0 <HAL_GetTick>
 8000ae6:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ae8:	6823      	ldr	r3, [r4, #0]
 8000aea:	079a      	lsls	r2, r3, #30
 8000aec:	d511      	bpl.n	8000b12 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000aee:	6823      	ldr	r3, [r4, #0]
 8000af0:	f043 0308 	orr.w	r3, r3, #8
 8000af4:	6023      	str	r3, [r4, #0]
 8000af6:	6823      	ldr	r3, [r4, #0]
 8000af8:	6a2a      	ldr	r2, [r5, #32]
 8000afa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000afe:	4313      	orrs	r3, r2
 8000b00:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b02:	6863      	ldr	r3, [r4, #4]
 8000b04:	69ea      	ldr	r2, [r5, #28]
 8000b06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000b0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b0e:	6063      	str	r3, [r4, #4]
 8000b10:	e7b7      	b.n	8000a82 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b12:	f7ff fd4d 	bl	80005b0 <HAL_GetTick>
 8000b16:	eba0 0008 	sub.w	r0, r0, r8
 8000b1a:	2802      	cmp	r0, #2
 8000b1c:	d9e4      	bls.n	8000ae8 <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 8000b1e:	2003      	movs	r0, #3
 8000b20:	e765      	b.n	80009ee <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8000b22:	6823      	ldr	r3, [r4, #0]
 8000b24:	f023 0301 	bic.w	r3, r3, #1
 8000b28:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b2a:	f7ff fd41 	bl	80005b0 <HAL_GetTick>
 8000b2e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000b30:	6823      	ldr	r3, [r4, #0]
 8000b32:	079b      	lsls	r3, r3, #30
 8000b34:	d5a5      	bpl.n	8000a82 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b36:	f7ff fd3b 	bl	80005b0 <HAL_GetTick>
 8000b3a:	eba0 0008 	sub.w	r0, r0, r8
 8000b3e:	2802      	cmp	r0, #2
 8000b40:	d9f6      	bls.n	8000b30 <HAL_RCC_OscConfig+0x14c>
 8000b42:	e7ec      	b.n	8000b1e <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000b44:	2e08      	cmp	r6, #8
 8000b46:	d003      	beq.n	8000b50 <HAL_RCC_OscConfig+0x16c>
 8000b48:	2e0c      	cmp	r6, #12
 8000b4a:	d108      	bne.n	8000b5e <HAL_RCC_OscConfig+0x17a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8000b4c:	2f03      	cmp	r7, #3
 8000b4e:	d106      	bne.n	8000b5e <HAL_RCC_OscConfig+0x17a>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b50:	6823      	ldr	r3, [r4, #0]
 8000b52:	039a      	lsls	r2, r3, #14
 8000b54:	d598      	bpl.n	8000a88 <HAL_RCC_OscConfig+0xa4>
 8000b56:	686b      	ldr	r3, [r5, #4]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d195      	bne.n	8000a88 <HAL_RCC_OscConfig+0xa4>
 8000b5c:	e746      	b.n	80009ec <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b5e:	686b      	ldr	r3, [r5, #4]
 8000b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b64:	d110      	bne.n	8000b88 <HAL_RCC_OscConfig+0x1a4>
 8000b66:	6823      	ldr	r3, [r4, #0]
 8000b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b6c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b6e:	f7ff fd1f 	bl	80005b0 <HAL_GetTick>
 8000b72:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000b74:	6823      	ldr	r3, [r4, #0]
 8000b76:	039b      	lsls	r3, r3, #14
 8000b78:	d486      	bmi.n	8000a88 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b7a:	f7ff fd19 	bl	80005b0 <HAL_GetTick>
 8000b7e:	eba0 0008 	sub.w	r0, r0, r8
 8000b82:	2864      	cmp	r0, #100	; 0x64
 8000b84:	d9f6      	bls.n	8000b74 <HAL_RCC_OscConfig+0x190>
 8000b86:	e7ca      	b.n	8000b1e <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b8c:	d104      	bne.n	8000b98 <HAL_RCC_OscConfig+0x1b4>
 8000b8e:	6823      	ldr	r3, [r4, #0]
 8000b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b94:	6023      	str	r3, [r4, #0]
 8000b96:	e7e6      	b.n	8000b66 <HAL_RCC_OscConfig+0x182>
 8000b98:	6822      	ldr	r2, [r4, #0]
 8000b9a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000b9e:	6022      	str	r2, [r4, #0]
 8000ba0:	6822      	ldr	r2, [r4, #0]
 8000ba2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ba6:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d1e0      	bne.n	8000b6e <HAL_RCC_OscConfig+0x18a>
        tickstart = HAL_GetTick();
 8000bac:	f7ff fd00 	bl	80005b0 <HAL_GetTick>
 8000bb0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000bb2:	6823      	ldr	r3, [r4, #0]
 8000bb4:	0398      	lsls	r0, r3, #14
 8000bb6:	f57f af67 	bpl.w	8000a88 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bba:	f7ff fcf9 	bl	80005b0 <HAL_GetTick>
 8000bbe:	eba0 0008 	sub.w	r0, r0, r8
 8000bc2:	2864      	cmp	r0, #100	; 0x64
 8000bc4:	d9f5      	bls.n	8000bb2 <HAL_RCC_OscConfig+0x1ce>
 8000bc6:	e7aa      	b.n	8000b1e <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000bc8:	2e04      	cmp	r6, #4
 8000bca:	d003      	beq.n	8000bd4 <HAL_RCC_OscConfig+0x1f0>
 8000bcc:	2e0c      	cmp	r6, #12
 8000bce:	d110      	bne.n	8000bf2 <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8000bd0:	2f02      	cmp	r7, #2
 8000bd2:	d10e      	bne.n	8000bf2 <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000bd4:	6823      	ldr	r3, [r4, #0]
 8000bd6:	0559      	lsls	r1, r3, #21
 8000bd8:	d503      	bpl.n	8000be2 <HAL_RCC_OscConfig+0x1fe>
 8000bda:	68eb      	ldr	r3, [r5, #12]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	f43f af05 	beq.w	80009ec <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000be2:	6863      	ldr	r3, [r4, #4]
 8000be4:	692a      	ldr	r2, [r5, #16]
 8000be6:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000bea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000bee:	6063      	str	r3, [r4, #4]
 8000bf0:	e74e      	b.n	8000a90 <HAL_RCC_OscConfig+0xac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bf2:	68eb      	ldr	r3, [r5, #12]
 8000bf4:	b17b      	cbz	r3, 8000c16 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 8000bf6:	6823      	ldr	r3, [r4, #0]
 8000bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bfc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000bfe:	f7ff fcd7 	bl	80005b0 <HAL_GetTick>
 8000c02:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000c04:	6823      	ldr	r3, [r4, #0]
 8000c06:	055a      	lsls	r2, r3, #21
 8000c08:	d4eb      	bmi.n	8000be2 <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c0a:	f7ff fcd1 	bl	80005b0 <HAL_GetTick>
 8000c0e:	1bc0      	subs	r0, r0, r7
 8000c10:	2802      	cmp	r0, #2
 8000c12:	d9f7      	bls.n	8000c04 <HAL_RCC_OscConfig+0x220>
 8000c14:	e783      	b.n	8000b1e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 8000c16:	6823      	ldr	r3, [r4, #0]
 8000c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c1c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c1e:	f7ff fcc7 	bl	80005b0 <HAL_GetTick>
 8000c22:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000c24:	6823      	ldr	r3, [r4, #0]
 8000c26:	055b      	lsls	r3, r3, #21
 8000c28:	f57f af32 	bpl.w	8000a90 <HAL_RCC_OscConfig+0xac>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c2c:	f7ff fcc0 	bl	80005b0 <HAL_GetTick>
 8000c30:	1bc0      	subs	r0, r0, r7
 8000c32:	2802      	cmp	r0, #2
 8000c34:	d9f6      	bls.n	8000c24 <HAL_RCC_OscConfig+0x240>
 8000c36:	e772      	b.n	8000b1e <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c38:	696b      	ldr	r3, [r5, #20]
 8000c3a:	b19b      	cbz	r3, 8000c64 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8000c3c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000c48:	f7ff fcb2 	bl	80005b0 <HAL_GetTick>
 8000c4c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000c4e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000c52:	079a      	lsls	r2, r3, #30
 8000c54:	f53f af20 	bmi.w	8000a98 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c58:	f7ff fcaa 	bl	80005b0 <HAL_GetTick>
 8000c5c:	1bc0      	subs	r0, r0, r7
 8000c5e:	2802      	cmp	r0, #2
 8000c60:	d9f5      	bls.n	8000c4e <HAL_RCC_OscConfig+0x26a>
 8000c62:	e75c      	b.n	8000b1e <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 8000c64:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000c68:	f023 0301 	bic.w	r3, r3, #1
 8000c6c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000c70:	f7ff fc9e 	bl	80005b0 <HAL_GetTick>
 8000c74:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000c76:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000c7a:	079b      	lsls	r3, r3, #30
 8000c7c:	f57f af0c 	bpl.w	8000a98 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c80:	f7ff fc96 	bl	80005b0 <HAL_GetTick>
 8000c84:	1bc0      	subs	r0, r0, r7
 8000c86:	2802      	cmp	r0, #2
 8000c88:	d9f5      	bls.n	8000c76 <HAL_RCC_OscConfig+0x292>
 8000c8a:	e748      	b.n	8000b1e <HAL_RCC_OscConfig+0x13a>
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	08004781 	.word	0x08004781
 8000c94:	20000004 	.word	0x20000004
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000c98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c9a:	00d8      	lsls	r0, r3, #3
 8000c9c:	d429      	bmi.n	8000cf2 <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca4:	65a3      	str	r3, [r4, #88]	; 0x58
 8000ca6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cac:	9301      	str	r3, [sp, #4]
 8000cae:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000cb0:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000cb4:	4f5d      	ldr	r7, [pc, #372]	; (8000e2c <HAL_RCC_OscConfig+0x448>)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	05d9      	lsls	r1, r3, #23
 8000cba:	d51d      	bpl.n	8000cf8 <HAL_RCC_OscConfig+0x314>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cbc:	68ab      	ldr	r3, [r5, #8]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d12b      	bne.n	8000d1a <HAL_RCC_OscConfig+0x336>
 8000cc2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8000cce:	f7ff fc6f 	bl	80005b0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cd2:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000cd6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000cd8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000cdc:	079b      	lsls	r3, r3, #30
 8000cde:	d542      	bpl.n	8000d66 <HAL_RCC_OscConfig+0x382>
    if(pwrclkchanged == SET)
 8000ce0:	f1b8 0f00 	cmp.w	r8, #0
 8000ce4:	f43f aedc 	beq.w	8000aa0 <HAL_RCC_OscConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ce8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000cea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000cee:	65a3      	str	r3, [r4, #88]	; 0x58
 8000cf0:	e6d6      	b.n	8000aa0 <HAL_RCC_OscConfig+0xbc>
    FlagStatus       pwrclkchanged = RESET;
 8000cf2:	f04f 0800 	mov.w	r8, #0
 8000cf6:	e7dd      	b.n	8000cb4 <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cfe:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000d00:	f7ff fc56 	bl	80005b0 <HAL_GetTick>
 8000d04:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	05da      	lsls	r2, r3, #23
 8000d0a:	d4d7      	bmi.n	8000cbc <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d0c:	f7ff fc50 	bl	80005b0 <HAL_GetTick>
 8000d10:	eba0 0009 	sub.w	r0, r0, r9
 8000d14:	2802      	cmp	r0, #2
 8000d16:	d9f6      	bls.n	8000d06 <HAL_RCC_OscConfig+0x322>
 8000d18:	e701      	b.n	8000b1e <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d1a:	2b05      	cmp	r3, #5
 8000d1c:	d106      	bne.n	8000d2c <HAL_RCC_OscConfig+0x348>
 8000d1e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8000d2a:	e7ca      	b.n	8000cc2 <HAL_RCC_OscConfig+0x2de>
 8000d2c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000d30:	f022 0201 	bic.w	r2, r2, #1
 8000d34:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8000d38:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000d3c:	f022 0204 	bic.w	r2, r2, #4
 8000d40:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d1c2      	bne.n	8000cce <HAL_RCC_OscConfig+0x2ea>
      tickstart = HAL_GetTick();
 8000d48:	f7ff fc32 	bl	80005b0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d4c:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000d50:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000d52:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000d56:	0798      	lsls	r0, r3, #30
 8000d58:	d5c2      	bpl.n	8000ce0 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d5a:	f7ff fc29 	bl	80005b0 <HAL_GetTick>
 8000d5e:	1bc0      	subs	r0, r0, r7
 8000d60:	4548      	cmp	r0, r9
 8000d62:	d9f6      	bls.n	8000d52 <HAL_RCC_OscConfig+0x36e>
 8000d64:	e6db      	b.n	8000b1e <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d66:	f7ff fc23 	bl	80005b0 <HAL_GetTick>
 8000d6a:	1bc0      	subs	r0, r0, r7
 8000d6c:	4548      	cmp	r0, r9
 8000d6e:	d9b3      	bls.n	8000cd8 <HAL_RCC_OscConfig+0x2f4>
 8000d70:	e6d5      	b.n	8000b1e <HAL_RCC_OscConfig+0x13a>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000d72:	2e0c      	cmp	r6, #12
 8000d74:	f43f ae3a 	beq.w	80009ec <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000d78:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8000d7a:	6823      	ldr	r3, [r4, #0]
 8000d7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d80:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000d82:	d137      	bne.n	8000df4 <HAL_RCC_OscConfig+0x410>
        tickstart = HAL_GetTick();
 8000d84:	f7ff fc14 	bl	80005b0 <HAL_GetTick>
 8000d88:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000d8a:	6823      	ldr	r3, [r4, #0]
 8000d8c:	0199      	lsls	r1, r3, #6
 8000d8e:	d42b      	bmi.n	8000de8 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d90:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000d92:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000d94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000d98:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000d9a:	3a01      	subs	r2, #1
 8000d9c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000da0:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000da2:	0912      	lsrs	r2, r2, #4
 8000da4:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000da8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000daa:	0852      	lsrs	r2, r2, #1
 8000dac:	3a01      	subs	r2, #1
 8000dae:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8000db2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000db4:	0852      	lsrs	r2, r2, #1
 8000db6:	3a01      	subs	r2, #1
 8000db8:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8000dbc:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000dbe:	6823      	ldr	r3, [r4, #0]
 8000dc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dc4:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000dc6:	68e3      	ldr	r3, [r4, #12]
 8000dc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dcc:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000dce:	f7ff fbef 	bl	80005b0 <HAL_GetTick>
 8000dd2:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000dd4:	6823      	ldr	r3, [r4, #0]
 8000dd6:	019a      	lsls	r2, r3, #6
 8000dd8:	f53f ae66 	bmi.w	8000aa8 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ddc:	f7ff fbe8 	bl	80005b0 <HAL_GetTick>
 8000de0:	1b40      	subs	r0, r0, r5
 8000de2:	2802      	cmp	r0, #2
 8000de4:	d9f6      	bls.n	8000dd4 <HAL_RCC_OscConfig+0x3f0>
 8000de6:	e69a      	b.n	8000b1e <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000de8:	f7ff fbe2 	bl	80005b0 <HAL_GetTick>
 8000dec:	1b80      	subs	r0, r0, r6
 8000dee:	2802      	cmp	r0, #2
 8000df0:	d9cb      	bls.n	8000d8a <HAL_RCC_OscConfig+0x3a6>
 8000df2:	e694      	b.n	8000b1e <HAL_RCC_OscConfig+0x13a>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8000df4:	6823      	ldr	r3, [r4, #0]
 8000df6:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000dfa:	bf02      	ittt	eq
 8000dfc:	68e3      	ldreq	r3, [r4, #12]
 8000dfe:	f023 0303 	biceq.w	r3, r3, #3
 8000e02:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8000e04:	68e3      	ldr	r3, [r4, #12]
 8000e06:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e0e:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000e10:	f7ff fbce 	bl	80005b0 <HAL_GetTick>
 8000e14:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e16:	6823      	ldr	r3, [r4, #0]
 8000e18:	019b      	lsls	r3, r3, #6
 8000e1a:	f57f ae45 	bpl.w	8000aa8 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e1e:	f7ff fbc7 	bl	80005b0 <HAL_GetTick>
 8000e22:	1b40      	subs	r0, r0, r5
 8000e24:	2802      	cmp	r0, #2
 8000e26:	d9f6      	bls.n	8000e16 <HAL_RCC_OscConfig+0x432>
 8000e28:	e679      	b.n	8000b1e <HAL_RCC_OscConfig+0x13a>
 8000e2a:	bf00      	nop
 8000e2c:	40007000 	.word	0x40007000

08000e30 <HAL_RCC_ClockConfig>:
{
 8000e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e34:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8000e36:	4604      	mov	r4, r0
 8000e38:	b910      	cbnz	r0, 8000e40 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000e40:	4a40      	ldr	r2, [pc, #256]	; (8000f44 <HAL_RCC_ClockConfig+0x114>)
 8000e42:	6813      	ldr	r3, [r2, #0]
 8000e44:	f003 0307 	and.w	r3, r3, #7
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d329      	bcc.n	8000ea0 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e4c:	6823      	ldr	r3, [r4, #0]
 8000e4e:	07d9      	lsls	r1, r3, #31
 8000e50:	d431      	bmi.n	8000eb6 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e52:	6821      	ldr	r1, [r4, #0]
 8000e54:	078a      	lsls	r2, r1, #30
 8000e56:	d45b      	bmi.n	8000f10 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000e58:	4a3a      	ldr	r2, [pc, #232]	; (8000f44 <HAL_RCC_ClockConfig+0x114>)
 8000e5a:	6813      	ldr	r3, [r2, #0]
 8000e5c:	f003 0307 	and.w	r3, r3, #7
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d35d      	bcc.n	8000f20 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e64:	f011 0f04 	tst.w	r1, #4
 8000e68:	4d37      	ldr	r5, [pc, #220]	; (8000f48 <HAL_RCC_ClockConfig+0x118>)
 8000e6a:	d164      	bne.n	8000f36 <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e6c:	070b      	lsls	r3, r1, #28
 8000e6e:	d506      	bpl.n	8000e7e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000e70:	68ab      	ldr	r3, [r5, #8]
 8000e72:	6922      	ldr	r2, [r4, #16]
 8000e74:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000e78:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000e7c:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e7e:	f7ff fd5d 	bl	800093c <HAL_RCC_GetSysClockFreq>
 8000e82:	68ab      	ldr	r3, [r5, #8]
 8000e84:	4a31      	ldr	r2, [pc, #196]	; (8000f4c <HAL_RCC_ClockConfig+0x11c>)
 8000e86:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8000e8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e8e:	5cd3      	ldrb	r3, [r2, r3]
 8000e90:	f003 031f 	and.w	r3, r3, #31
 8000e94:	40d8      	lsrs	r0, r3
 8000e96:	4b2e      	ldr	r3, [pc, #184]	; (8000f50 <HAL_RCC_ClockConfig+0x120>)
 8000e98:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f002 bc2a 	b.w	80036f4 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ea0:	6813      	ldr	r3, [r2, #0]
 8000ea2:	f023 0307 	bic.w	r3, r3, #7
 8000ea6:	430b      	orrs	r3, r1
 8000ea8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000eaa:	6813      	ldr	r3, [r2, #0]
 8000eac:	f003 0307 	and.w	r3, r3, #7
 8000eb0:	4299      	cmp	r1, r3
 8000eb2:	d1c2      	bne.n	8000e3a <HAL_RCC_ClockConfig+0xa>
 8000eb4:	e7ca      	b.n	8000e4c <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000eb6:	6862      	ldr	r2, [r4, #4]
 8000eb8:	4d23      	ldr	r5, [pc, #140]	; (8000f48 <HAL_RCC_ClockConfig+0x118>)
 8000eba:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000ebc:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ebe:	d11b      	bne.n	8000ef8 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000ec0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ec4:	d0b9      	beq.n	8000e3a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000ec6:	68ab      	ldr	r3, [r5, #8]
 8000ec8:	f023 0303 	bic.w	r3, r3, #3
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8000ed0:	f7ff fb6e 	bl	80005b0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ed4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000ed8:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000eda:	68ab      	ldr	r3, [r5, #8]
 8000edc:	6862      	ldr	r2, [r4, #4]
 8000ede:	f003 030c 	and.w	r3, r3, #12
 8000ee2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000ee6:	d0b4      	beq.n	8000e52 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ee8:	f7ff fb62 	bl	80005b0 <HAL_GetTick>
 8000eec:	1bc0      	subs	r0, r0, r7
 8000eee:	4540      	cmp	r0, r8
 8000ef0:	d9f3      	bls.n	8000eda <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 8000ef2:	2003      	movs	r0, #3
}
 8000ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ef8:	2a02      	cmp	r2, #2
 8000efa:	d102      	bne.n	8000f02 <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000efc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f00:	e7e0      	b.n	8000ec4 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000f02:	b912      	cbnz	r2, 8000f0a <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f04:	f013 0f02 	tst.w	r3, #2
 8000f08:	e7dc      	b.n	8000ec4 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f0a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000f0e:	e7d9      	b.n	8000ec4 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f10:	4a0d      	ldr	r2, [pc, #52]	; (8000f48 <HAL_RCC_ClockConfig+0x118>)
 8000f12:	68a0      	ldr	r0, [r4, #8]
 8000f14:	6893      	ldr	r3, [r2, #8]
 8000f16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f1a:	4303      	orrs	r3, r0
 8000f1c:	6093      	str	r3, [r2, #8]
 8000f1e:	e79b      	b.n	8000e58 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f20:	6813      	ldr	r3, [r2, #0]
 8000f22:	f023 0307 	bic.w	r3, r3, #7
 8000f26:	4333      	orrs	r3, r6
 8000f28:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f2a:	6813      	ldr	r3, [r2, #0]
 8000f2c:	f003 0307 	and.w	r3, r3, #7
 8000f30:	429e      	cmp	r6, r3
 8000f32:	d182      	bne.n	8000e3a <HAL_RCC_ClockConfig+0xa>
 8000f34:	e796      	b.n	8000e64 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f36:	68ab      	ldr	r3, [r5, #8]
 8000f38:	68e2      	ldr	r2, [r4, #12]
 8000f3a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	60ab      	str	r3, [r5, #8]
 8000f42:	e793      	b.n	8000e6c <HAL_RCC_ClockConfig+0x3c>
 8000f44:	40022000 	.word	0x40022000
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	08004781 	.word	0x08004781
 8000f50:	20000004 	.word	0x20000004

08000f54 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000f56:	4a06      	ldr	r2, [pc, #24]	; (8000f70 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000f5e:	5cd3      	ldrb	r3, [r2, r3]
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000f62:	6810      	ldr	r0, [r2, #0]
 8000f64:	f003 031f 	and.w	r3, r3, #31
}
 8000f68:	40d8      	lsrs	r0, r3
 8000f6a:	4770      	bx	lr
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	08004791 	.word	0x08004791
 8000f74:	20000004 	.word	0x20000004

08000f78 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000f7a:	4a06      	ldr	r2, [pc, #24]	; (8000f94 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000f82:	5cd3      	ldrb	r3, [r2, r3]
 8000f84:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000f86:	6810      	ldr	r0, [r2, #0]
 8000f88:	f003 031f 	and.w	r3, r3, #31
}
 8000f8c:	40d8      	lsrs	r0, r3
 8000f8e:	4770      	bx	lr
 8000f90:	40021000 	.word	0x40021000
 8000f94:	08004791 	.word	0x08004791
 8000f98:	20000004 	.word	0x20000004

08000f9c <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000f9c:	230f      	movs	r3, #15
 8000f9e:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <HAL_RCC_GetClockConfig+0x34>)
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	f002 0203 	and.w	r2, r2, #3
 8000fa8:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000fb0:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8000fb8:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	08db      	lsrs	r3, r3, #3
 8000fbe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000fc2:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8000fc4:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <HAL_RCC_GetClockConfig+0x38>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 0307 	and.w	r3, r3, #7
 8000fcc:	600b      	str	r3, [r1, #0]
 8000fce:	4770      	bx	lr
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40022000 	.word	0x40022000

08000fd8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8000fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8000fda:	4b45      	ldr	r3, [pc, #276]	; (80010f0 <RCCEx_PLLSAI1_Config+0x118>)
 8000fdc:	68da      	ldr	r2, [r3, #12]
 8000fde:	f012 0f03 	tst.w	r2, #3
{
 8000fe2:	4605      	mov	r5, r0
 8000fe4:	460e      	mov	r6, r1
 8000fe6:	461c      	mov	r4, r3
 8000fe8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8000fea:	d02a      	beq.n	8001042 <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8000fec:	68da      	ldr	r2, [r3, #12]
 8000fee:	f002 0203 	and.w	r2, r2, #3
 8000ff2:	4282      	cmp	r2, r0
 8000ff4:	d13c      	bne.n	8001070 <RCCEx_PLLSAI1_Config+0x98>
       ||
 8000ff6:	2a00      	cmp	r2, #0
 8000ff8:	d03a      	beq.n	8001070 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8000ffa:	68db      	ldr	r3, [r3, #12]
       ||
 8000ffc:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8000ffe:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001002:	3301      	adds	r3, #1
       ||
 8001004:	4293      	cmp	r3, r2
 8001006:	d133      	bne.n	8001070 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001008:	6823      	ldr	r3, [r4, #0]
 800100a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800100e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001010:	f7ff face 	bl	80005b0 <HAL_GetTick>
 8001014:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001016:	6823      	ldr	r3, [r4, #0]
 8001018:	011a      	lsls	r2, r3, #4
 800101a:	d432      	bmi.n	8001082 <RCCEx_PLLSAI1_Config+0xaa>
 800101c:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800101e:	2e00      	cmp	r6, #0
 8001020:	d036      	beq.n	8001090 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001022:	2e01      	cmp	r6, #1
 8001024:	d150      	bne.n	80010c8 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001026:	6922      	ldr	r2, [r4, #16]
 8001028:	6928      	ldr	r0, [r5, #16]
 800102a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800102e:	0840      	lsrs	r0, r0, #1
 8001030:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001034:	3801      	subs	r0, #1
 8001036:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800103a:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 800103e:	6122      	str	r2, [r4, #16]
 8001040:	e032      	b.n	80010a8 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8001042:	2802      	cmp	r0, #2
 8001044:	d010      	beq.n	8001068 <RCCEx_PLLSAI1_Config+0x90>
 8001046:	2803      	cmp	r0, #3
 8001048:	d014      	beq.n	8001074 <RCCEx_PLLSAI1_Config+0x9c>
 800104a:	2801      	cmp	r0, #1
 800104c:	d110      	bne.n	8001070 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	079f      	lsls	r7, r3, #30
 8001052:	d538      	bpl.n	80010c6 <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001054:	68e3      	ldr	r3, [r4, #12]
 8001056:	686a      	ldr	r2, [r5, #4]
 8001058:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800105c:	3a01      	subs	r2, #1
 800105e:	4318      	orrs	r0, r3
 8001060:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001064:	60e0      	str	r0, [r4, #12]
 8001066:	e7cf      	b.n	8001008 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800106e:	d1f1      	bne.n	8001054 <RCCEx_PLLSAI1_Config+0x7c>
 8001070:	2001      	movs	r0, #1
 8001072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	0391      	lsls	r1, r2, #14
 8001078:	d4ec      	bmi.n	8001054 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001080:	e7f5      	b.n	800106e <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001082:	f7ff fa95 	bl	80005b0 <HAL_GetTick>
 8001086:	1bc0      	subs	r0, r0, r7
 8001088:	2802      	cmp	r0, #2
 800108a:	d9c4      	bls.n	8001016 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 800108c:	2003      	movs	r0, #3
 800108e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001090:	6921      	ldr	r1, [r4, #16]
 8001092:	68eb      	ldr	r3, [r5, #12]
 8001094:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8001098:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800109c:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80010a0:	091b      	lsrs	r3, r3, #4
 80010a2:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 80010a6:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80010a8:	6823      	ldr	r3, [r4, #0]
 80010aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010ae:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010b0:	f7ff fa7e 	bl	80005b0 <HAL_GetTick>
 80010b4:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80010b6:	6823      	ldr	r3, [r4, #0]
 80010b8:	011b      	lsls	r3, r3, #4
 80010ba:	d513      	bpl.n	80010e4 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80010bc:	6923      	ldr	r3, [r4, #16]
 80010be:	69aa      	ldr	r2, [r5, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	6123      	str	r3, [r4, #16]
 80010c4:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80010c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80010c8:	6923      	ldr	r3, [r4, #16]
 80010ca:	6968      	ldr	r0, [r5, #20]
 80010cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80010d0:	0840      	lsrs	r0, r0, #1
 80010d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80010d6:	3801      	subs	r0, #1
 80010d8:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80010dc:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80010e0:	6123      	str	r3, [r4, #16]
 80010e2:	e7e1      	b.n	80010a8 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80010e4:	f7ff fa64 	bl	80005b0 <HAL_GetTick>
 80010e8:	1b80      	subs	r0, r0, r6
 80010ea:	2802      	cmp	r0, #2
 80010ec:	d9e3      	bls.n	80010b6 <RCCEx_PLLSAI1_Config+0xde>
 80010ee:	e7cd      	b.n	800108c <RCCEx_PLLSAI1_Config+0xb4>
 80010f0:	40021000 	.word	0x40021000

080010f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80010f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80010f6:	4b3d      	ldr	r3, [pc, #244]	; (80011ec <RCCEx_PLLSAI2_Config+0xf8>)
 80010f8:	68da      	ldr	r2, [r3, #12]
 80010fa:	f012 0f03 	tst.w	r2, #3
{
 80010fe:	4605      	mov	r5, r0
 8001100:	460e      	mov	r6, r1
 8001102:	461c      	mov	r4, r3
 8001104:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001106:	d028      	beq.n	800115a <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001108:	68da      	ldr	r2, [r3, #12]
 800110a:	f002 0203 	and.w	r2, r2, #3
 800110e:	4282      	cmp	r2, r0
 8001110:	d13a      	bne.n	8001188 <RCCEx_PLLSAI2_Config+0x94>
       ||
 8001112:	2a00      	cmp	r2, #0
 8001114:	d038      	beq.n	8001188 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001116:	68db      	ldr	r3, [r3, #12]
       ||
 8001118:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800111a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800111e:	3301      	adds	r3, #1
       ||
 8001120:	4293      	cmp	r3, r2
 8001122:	d131      	bne.n	8001188 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8001124:	6823      	ldr	r3, [r4, #0]
 8001126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800112a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800112c:	f7ff fa40 	bl	80005b0 <HAL_GetTick>
 8001130:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001132:	6823      	ldr	r3, [r4, #0]
 8001134:	009a      	lsls	r2, r3, #2
 8001136:	d430      	bmi.n	800119a <RCCEx_PLLSAI2_Config+0xa6>
 8001138:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800113a:	2e00      	cmp	r6, #0
 800113c:	d034      	beq.n	80011a8 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800113e:	6963      	ldr	r3, [r4, #20]
 8001140:	6929      	ldr	r1, [r5, #16]
 8001142:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001146:	0849      	lsrs	r1, r1, #1
 8001148:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800114c:	3901      	subs	r1, #1
 800114e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001152:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8001156:	6163      	str	r3, [r4, #20]
 8001158:	e032      	b.n	80011c0 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 800115a:	2802      	cmp	r0, #2
 800115c:	d010      	beq.n	8001180 <RCCEx_PLLSAI2_Config+0x8c>
 800115e:	2803      	cmp	r0, #3
 8001160:	d014      	beq.n	800118c <RCCEx_PLLSAI2_Config+0x98>
 8001162:	2801      	cmp	r0, #1
 8001164:	d110      	bne.n	8001188 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	079f      	lsls	r7, r3, #30
 800116a:	d538      	bpl.n	80011de <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800116c:	68e3      	ldr	r3, [r4, #12]
 800116e:	686a      	ldr	r2, [r5, #4]
 8001170:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001174:	3a01      	subs	r2, #1
 8001176:	4318      	orrs	r0, r3
 8001178:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800117c:	60e0      	str	r0, [r4, #12]
 800117e:	e7d1      	b.n	8001124 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001186:	d1f1      	bne.n	800116c <RCCEx_PLLSAI2_Config+0x78>
 8001188:	2001      	movs	r0, #1
 800118a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	0391      	lsls	r1, r2, #14
 8001190:	d4ec      	bmi.n	800116c <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001198:	e7f5      	b.n	8001186 <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800119a:	f7ff fa09 	bl	80005b0 <HAL_GetTick>
 800119e:	1bc0      	subs	r0, r0, r7
 80011a0:	2802      	cmp	r0, #2
 80011a2:	d9c6      	bls.n	8001132 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 80011a4:	2003      	movs	r0, #3
 80011a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80011a8:	6962      	ldr	r2, [r4, #20]
 80011aa:	68eb      	ldr	r3, [r5, #12]
 80011ac:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 80011b0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80011b4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80011b8:	091b      	lsrs	r3, r3, #4
 80011ba:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 80011be:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80011c0:	6823      	ldr	r3, [r4, #0]
 80011c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c6:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011c8:	f7ff f9f2 	bl	80005b0 <HAL_GetTick>
 80011cc:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80011ce:	6823      	ldr	r3, [r4, #0]
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	d505      	bpl.n	80011e0 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80011d4:	6963      	ldr	r3, [r4, #20]
 80011d6:	696a      	ldr	r2, [r5, #20]
 80011d8:	4313      	orrs	r3, r2
 80011da:	6163      	str	r3, [r4, #20]
 80011dc:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80011de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80011e0:	f7ff f9e6 	bl	80005b0 <HAL_GetTick>
 80011e4:	1b80      	subs	r0, r0, r6
 80011e6:	2802      	cmp	r0, #2
 80011e8:	d9f1      	bls.n	80011ce <RCCEx_PLLSAI2_Config+0xda>
 80011ea:	e7db      	b.n	80011a4 <RCCEx_PLLSAI2_Config+0xb0>
 80011ec:	40021000 	.word	0x40021000

080011f0 <HAL_RCCEx_PeriphCLKConfig>:
{
 80011f0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80011f4:	6806      	ldr	r6, [r0, #0]
 80011f6:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 80011fa:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80011fc:	d024      	beq.n	8001248 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80011fe:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8001200:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8001204:	d02c      	beq.n	8001260 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8001206:	d802      	bhi.n	800120e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001208:	b1c1      	cbz	r1, 800123c <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 800120a:	2601      	movs	r6, #1
 800120c:	e01c      	b.n	8001248 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800120e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001212:	d00d      	beq.n	8001230 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001214:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001218:	d1f7      	bne.n	800120a <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800121a:	4a4d      	ldr	r2, [pc, #308]	; (8001350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800121c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800121e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001222:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001226:	430b      	orrs	r3, r1
 8001228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800122c:	2600      	movs	r6, #0
 800122e:	e00b      	b.n	8001248 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001230:	4a47      	ldr	r2, [pc, #284]	; (8001350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001232:	68d3      	ldr	r3, [r2, #12]
 8001234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001238:	60d3      	str	r3, [r2, #12]
      break;
 800123a:	e7ee      	b.n	800121a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800123c:	3004      	adds	r0, #4
 800123e:	f7ff fecb 	bl	8000fd8 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001242:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001244:	2800      	cmp	r0, #0
 8001246:	d0e8      	beq.n	800121a <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001248:	6823      	ldr	r3, [r4, #0]
 800124a:	04d8      	lsls	r0, r3, #19
 800124c:	d506      	bpl.n	800125c <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 800124e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001250:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8001254:	d074      	beq.n	8001340 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8001256:	d808      	bhi.n	800126a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001258:	b1a9      	cbz	r1, 8001286 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 800125a:	2601      	movs	r6, #1
 800125c:	4635      	mov	r5, r6
 800125e:	e021      	b.n	80012a4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001260:	2100      	movs	r1, #0
 8001262:	3020      	adds	r0, #32
 8001264:	f7ff ff46 	bl	80010f4 <RCCEx_PLLSAI2_Config>
 8001268:	e7eb      	b.n	8001242 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 800126a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800126e:	d004      	beq.n	800127a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8001270:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8001274:	d1f1      	bne.n	800125a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8001276:	4635      	mov	r5, r6
 8001278:	e009      	b.n	800128e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800127a:	4a35      	ldr	r2, [pc, #212]	; (8001350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800127c:	68d3      	ldr	r3, [r2, #12]
 800127e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001282:	60d3      	str	r3, [r2, #12]
 8001284:	e7f7      	b.n	8001276 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001286:	1d20      	adds	r0, r4, #4
 8001288:	f7ff fea6 	bl	8000fd8 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800128c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800128e:	2d00      	cmp	r5, #0
 8001290:	d15c      	bne.n	800134c <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001292:	4a2f      	ldr	r2, [pc, #188]	; (8001350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001294:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001296:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800129a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800129e:	430b      	orrs	r3, r1
 80012a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80012a4:	6823      	ldr	r3, [r4, #0]
 80012a6:	0399      	lsls	r1, r3, #14
 80012a8:	f140 814f 	bpl.w	800154a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80012ac:	4f28      	ldr	r7, [pc, #160]	; (8001350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80012ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012b0:	00da      	lsls	r2, r3, #3
 80012b2:	f140 8176 	bpl.w	80015a2 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 80012b6:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012ba:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8001354 <HAL_RCCEx_PeriphCLKConfig+0x164>
 80012be:	f8d9 3000 	ldr.w	r3, [r9]
 80012c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c6:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 80012ca:	f7ff f971 	bl	80005b0 <HAL_GetTick>
 80012ce:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80012d0:	f8d9 3000 	ldr.w	r3, [r9]
 80012d4:	05db      	lsls	r3, r3, #23
 80012d6:	d53f      	bpl.n	8001358 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 80012d8:	2d00      	cmp	r5, #0
 80012da:	d144      	bne.n	8001366 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80012dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80012e0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80012e4:	d015      	beq.n	8001312 <HAL_RCCEx_PeriphCLKConfig+0x122>
 80012e6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d011      	beq.n	8001312 <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80012ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80012f2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80012f6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80012fa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80012fe:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001306:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800130a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800130e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001312:	07d8      	lsls	r0, r3, #31
 8001314:	d509      	bpl.n	800132a <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8001316:	f7ff f94b 	bl	80005b0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800131a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800131e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001320:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001324:	0799      	lsls	r1, r3, #30
 8001326:	f140 8109 	bpl.w	800153c <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800132a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800132e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001336:	4313      	orrs	r3, r2
 8001338:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800133c:	4635      	mov	r5, r6
 800133e:	e012      	b.n	8001366 <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001340:	2100      	movs	r1, #0
 8001342:	f104 0020 	add.w	r0, r4, #32
 8001346:	f7ff fed5 	bl	80010f4 <RCCEx_PLLSAI2_Config>
 800134a:	e79f      	b.n	800128c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800134c:	462e      	mov	r6, r5
 800134e:	e7a9      	b.n	80012a4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8001350:	40021000 	.word	0x40021000
 8001354:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001358:	f7ff f92a 	bl	80005b0 <HAL_GetTick>
 800135c:	eba0 000a 	sub.w	r0, r0, sl
 8001360:	2802      	cmp	r0, #2
 8001362:	d9b5      	bls.n	80012d0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 8001364:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8001366:	f1b8 0f00 	cmp.w	r8, #0
 800136a:	d003      	beq.n	8001374 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 800136c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800136e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001372:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001374:	6823      	ldr	r3, [r4, #0]
 8001376:	07da      	lsls	r2, r3, #31
 8001378:	d508      	bpl.n	800138c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800137a:	4990      	ldr	r1, [pc, #576]	; (80015bc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800137c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800137e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001382:	f022 0203 	bic.w	r2, r2, #3
 8001386:	4302      	orrs	r2, r0
 8001388:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800138c:	079f      	lsls	r7, r3, #30
 800138e:	d508      	bpl.n	80013a2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001390:	498a      	ldr	r1, [pc, #552]	; (80015bc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001392:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001394:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001398:	f022 020c 	bic.w	r2, r2, #12
 800139c:	4302      	orrs	r2, r0
 800139e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80013a2:	075e      	lsls	r6, r3, #29
 80013a4:	d508      	bpl.n	80013b8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80013a6:	4985      	ldr	r1, [pc, #532]	; (80015bc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80013a8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80013aa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80013ae:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80013b2:	4302      	orrs	r2, r0
 80013b4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80013b8:	0718      	lsls	r0, r3, #28
 80013ba:	d508      	bpl.n	80013ce <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80013bc:	497f      	ldr	r1, [pc, #508]	; (80015bc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80013be:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80013c0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80013c4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80013c8:	4302      	orrs	r2, r0
 80013ca:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80013ce:	06d9      	lsls	r1, r3, #27
 80013d0:	d508      	bpl.n	80013e4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80013d2:	497a      	ldr	r1, [pc, #488]	; (80015bc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80013d4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80013d6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80013da:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80013de:	4302      	orrs	r2, r0
 80013e0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80013e4:	069a      	lsls	r2, r3, #26
 80013e6:	d508      	bpl.n	80013fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80013e8:	4974      	ldr	r1, [pc, #464]	; (80015bc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80013ea:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80013ec:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80013f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80013f4:	4302      	orrs	r2, r0
 80013f6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80013fa:	059f      	lsls	r7, r3, #22
 80013fc:	d508      	bpl.n	8001410 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80013fe:	496f      	ldr	r1, [pc, #444]	; (80015bc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001400:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001402:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001406:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800140a:	4302      	orrs	r2, r0
 800140c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001410:	055e      	lsls	r6, r3, #21
 8001412:	d508      	bpl.n	8001426 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001414:	4969      	ldr	r1, [pc, #420]	; (80015bc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001416:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001418:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800141c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001420:	4302      	orrs	r2, r0
 8001422:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001426:	0658      	lsls	r0, r3, #25
 8001428:	d508      	bpl.n	800143c <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800142a:	4964      	ldr	r1, [pc, #400]	; (80015bc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800142c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800142e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001432:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001436:	4302      	orrs	r2, r0
 8001438:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800143c:	0619      	lsls	r1, r3, #24
 800143e:	d508      	bpl.n	8001452 <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001440:	495e      	ldr	r1, [pc, #376]	; (80015bc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001442:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001444:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001448:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800144c:	4302      	orrs	r2, r0
 800144e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001452:	05da      	lsls	r2, r3, #23
 8001454:	d508      	bpl.n	8001468 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001456:	4959      	ldr	r1, [pc, #356]	; (80015bc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800145a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800145e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001462:	4302      	orrs	r2, r0
 8001464:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001468:	049b      	lsls	r3, r3, #18
 800146a:	d50f      	bpl.n	800148c <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800146c:	4a53      	ldr	r2, [pc, #332]	; (80015bc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800146e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8001470:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001474:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001478:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800147a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800147e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001482:	d164      	bne.n	800154e <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001484:	68d3      	ldr	r3, [r2, #12]
 8001486:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800148a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800148c:	6823      	ldr	r3, [r4, #0]
 800148e:	031f      	lsls	r7, r3, #12
 8001490:	d50f      	bpl.n	80014b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001492:	4a4a      	ldr	r2, [pc, #296]	; (80015bc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001494:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8001496:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800149a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800149e:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80014a0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80014a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80014a8:	d15c      	bne.n	8001564 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80014aa:	68d3      	ldr	r3, [r2, #12]
 80014ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014b0:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80014b2:	6823      	ldr	r3, [r4, #0]
 80014b4:	035e      	lsls	r6, r3, #13
 80014b6:	d50f      	bpl.n	80014d8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80014b8:	4a40      	ldr	r2, [pc, #256]	; (80015bc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80014ba:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80014bc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80014c0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80014c4:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80014c6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80014ca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80014ce:	d154      	bne.n	800157a <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80014d0:	68d3      	ldr	r3, [r2, #12]
 80014d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014d6:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80014d8:	6823      	ldr	r3, [r4, #0]
 80014da:	0458      	lsls	r0, r3, #17
 80014dc:	d512      	bpl.n	8001504 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80014de:	4937      	ldr	r1, [pc, #220]	; (80015bc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80014e0:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80014e2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80014e6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80014ea:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80014ec:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80014f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80014f4:	d14c      	bne.n	8001590 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80014f6:	2102      	movs	r1, #2
 80014f8:	1d20      	adds	r0, r4, #4
 80014fa:	f7ff fd6d 	bl	8000fd8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80014fe:	2800      	cmp	r0, #0
 8001500:	bf18      	it	ne
 8001502:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001504:	6822      	ldr	r2, [r4, #0]
 8001506:	0411      	lsls	r1, r2, #16
 8001508:	d508      	bpl.n	800151c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800150a:	492c      	ldr	r1, [pc, #176]	; (80015bc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800150c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800150e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001512:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001516:	4303      	orrs	r3, r0
 8001518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800151c:	03d3      	lsls	r3, r2, #15
 800151e:	d509      	bpl.n	8001534 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001520:	4a26      	ldr	r2, [pc, #152]	; (80015bc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001522:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8001526:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800152a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800152e:	430b      	orrs	r3, r1
 8001530:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8001534:	4628      	mov	r0, r5
 8001536:	b002      	add	sp, #8
 8001538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800153c:	f7ff f838 	bl	80005b0 <HAL_GetTick>
 8001540:	1b40      	subs	r0, r0, r5
 8001542:	4548      	cmp	r0, r9
 8001544:	f67f aeec 	bls.w	8001320 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8001548:	e70c      	b.n	8001364 <HAL_RCCEx_PeriphCLKConfig+0x174>
 800154a:	4635      	mov	r5, r6
 800154c:	e712      	b.n	8001374 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800154e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001552:	d19b      	bne.n	800148c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001554:	2101      	movs	r1, #1
 8001556:	1d20      	adds	r0, r4, #4
 8001558:	f7ff fd3e 	bl	8000fd8 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800155c:	2800      	cmp	r0, #0
 800155e:	bf18      	it	ne
 8001560:	4605      	movne	r5, r0
 8001562:	e793      	b.n	800148c <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001564:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001568:	d1a3      	bne.n	80014b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800156a:	2101      	movs	r1, #1
 800156c:	1d20      	adds	r0, r4, #4
 800156e:	f7ff fd33 	bl	8000fd8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001572:	2800      	cmp	r0, #0
 8001574:	bf18      	it	ne
 8001576:	4605      	movne	r5, r0
 8001578:	e79b      	b.n	80014b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800157a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800157e:	d1ab      	bne.n	80014d8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001580:	2101      	movs	r1, #1
 8001582:	1d20      	adds	r0, r4, #4
 8001584:	f7ff fd28 	bl	8000fd8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001588:	2800      	cmp	r0, #0
 800158a:	bf18      	it	ne
 800158c:	4605      	movne	r5, r0
 800158e:	e7a3      	b.n	80014d8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001590:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8001594:	d1b6      	bne.n	8001504 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001596:	2102      	movs	r1, #2
 8001598:	f104 0020 	add.w	r0, r4, #32
 800159c:	f7ff fdaa 	bl	80010f4 <RCCEx_PLLSAI2_Config>
 80015a0:	e7ad      	b.n	80014fe <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80015aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b0:	9301      	str	r3, [sp, #4]
 80015b2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80015b4:	f04f 0801 	mov.w	r8, #1
 80015b8:	e67f      	b.n	80012ba <HAL_RCCEx_PeriphCLKConfig+0xca>
 80015ba:	bf00      	nop
 80015bc:	40021000 	.word	0x40021000

080015c0 <HAL_TIM_Base_MspInit>:
 80015c0:	4770      	bx	lr
	...

080015c4 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015c4:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 80015c6:	480a      	ldr	r0, [pc, #40]	; (80015f0 <HAL_TIM_Base_Start_IT+0x2c>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015c8:	68da      	ldr	r2, [r3, #12]
 80015ca:	f042 0201 	orr.w	r2, r2, #1
 80015ce:	60da      	str	r2, [r3, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 80015d0:	6899      	ldr	r1, [r3, #8]
 80015d2:	4001      	ands	r1, r0
 80015d4:	2906      	cmp	r1, #6
 80015d6:	d008      	beq.n	80015ea <HAL_TIM_Base_Start_IT+0x26>
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	4002      	ands	r2, r0
 80015dc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 80015e0:	bf1e      	ittt	ne
 80015e2:	681a      	ldrne	r2, [r3, #0]
 80015e4:	f042 0201 	orrne.w	r2, r2, #1
 80015e8:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80015ea:	2000      	movs	r0, #0
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	00010007 	.word	0x00010007

080015f4 <HAL_TIM_OC_DelayElapsedCallback>:
 80015f4:	4770      	bx	lr

080015f6 <HAL_TIM_IC_CaptureCallback>:
 80015f6:	4770      	bx	lr

080015f8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80015f8:	4770      	bx	lr

080015fa <HAL_TIM_TriggerCallback>:
 80015fa:	4770      	bx	lr

080015fc <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015fc:	6803      	ldr	r3, [r0, #0]
 80015fe:	691a      	ldr	r2, [r3, #16]
 8001600:	0791      	lsls	r1, r2, #30
{
 8001602:	b510      	push	{r4, lr}
 8001604:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001606:	d50f      	bpl.n	8001628 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001608:	68da      	ldr	r2, [r3, #12]
 800160a:	0792      	lsls	r2, r2, #30
 800160c:	d50c      	bpl.n	8001628 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800160e:	f06f 0202 	mvn.w	r2, #2
 8001612:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001614:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001616:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001618:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800161a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800161c:	f000 8085 	beq.w	800172a <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001620:	f7ff ffe9 	bl	80015f6 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001624:	2300      	movs	r3, #0
 8001626:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001628:	6823      	ldr	r3, [r4, #0]
 800162a:	691a      	ldr	r2, [r3, #16]
 800162c:	0752      	lsls	r2, r2, #29
 800162e:	d510      	bpl.n	8001652 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	0750      	lsls	r0, r2, #29
 8001634:	d50d      	bpl.n	8001652 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001636:	f06f 0204 	mvn.w	r2, #4
 800163a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800163c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800163e:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001640:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001644:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001646:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001648:	d075      	beq.n	8001736 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800164a:	f7ff ffd4 	bl	80015f6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800164e:	2300      	movs	r3, #0
 8001650:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001652:	6823      	ldr	r3, [r4, #0]
 8001654:	691a      	ldr	r2, [r3, #16]
 8001656:	0711      	lsls	r1, r2, #28
 8001658:	d50f      	bpl.n	800167a <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800165a:	68da      	ldr	r2, [r3, #12]
 800165c:	0712      	lsls	r2, r2, #28
 800165e:	d50c      	bpl.n	800167a <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001660:	f06f 0208 	mvn.w	r2, #8
 8001664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001666:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001668:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800166a:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800166c:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800166e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001670:	d067      	beq.n	8001742 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001672:	f7ff ffc0 	bl	80015f6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001676:	2300      	movs	r3, #0
 8001678:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800167a:	6823      	ldr	r3, [r4, #0]
 800167c:	691a      	ldr	r2, [r3, #16]
 800167e:	06d0      	lsls	r0, r2, #27
 8001680:	d510      	bpl.n	80016a4 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001682:	68da      	ldr	r2, [r3, #12]
 8001684:	06d1      	lsls	r1, r2, #27
 8001686:	d50d      	bpl.n	80016a4 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001688:	f06f 0210 	mvn.w	r2, #16
 800168c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800168e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001690:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001692:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001696:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001698:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800169a:	d058      	beq.n	800174e <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800169c:	f7ff ffab 	bl	80015f6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016a0:	2300      	movs	r3, #0
 80016a2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016a4:	6823      	ldr	r3, [r4, #0]
 80016a6:	691a      	ldr	r2, [r3, #16]
 80016a8:	07d2      	lsls	r2, r2, #31
 80016aa:	d508      	bpl.n	80016be <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80016ac:	68da      	ldr	r2, [r3, #12]
 80016ae:	07d0      	lsls	r0, r2, #31
 80016b0:	d505      	bpl.n	80016be <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016b2:	f06f 0201 	mvn.w	r2, #1
 80016b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016b8:	4620      	mov	r0, r4
 80016ba:	f001 ffbf 	bl	800363c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016be:	6823      	ldr	r3, [r4, #0]
 80016c0:	691a      	ldr	r2, [r3, #16]
 80016c2:	0611      	lsls	r1, r2, #24
 80016c4:	d508      	bpl.n	80016d8 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016c6:	68da      	ldr	r2, [r3, #12]
 80016c8:	0612      	lsls	r2, r2, #24
 80016ca:	d505      	bpl.n	80016d8 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80016d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016d2:	4620      	mov	r0, r4
 80016d4:	f000 f8c3 	bl	800185e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80016d8:	6823      	ldr	r3, [r4, #0]
 80016da:	691a      	ldr	r2, [r3, #16]
 80016dc:	05d0      	lsls	r0, r2, #23
 80016de:	d508      	bpl.n	80016f2 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	0611      	lsls	r1, r2, #24
 80016e4:	d505      	bpl.n	80016f2 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80016e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80016ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80016ec:	4620      	mov	r0, r4
 80016ee:	f000 f8b7 	bl	8001860 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016f2:	6823      	ldr	r3, [r4, #0]
 80016f4:	691a      	ldr	r2, [r3, #16]
 80016f6:	0652      	lsls	r2, r2, #25
 80016f8:	d508      	bpl.n	800170c <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	0650      	lsls	r0, r2, #25
 80016fe:	d505      	bpl.n	800170c <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001700:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001706:	4620      	mov	r0, r4
 8001708:	f7ff ff77 	bl	80015fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800170c:	6823      	ldr	r3, [r4, #0]
 800170e:	691a      	ldr	r2, [r3, #16]
 8001710:	0691      	lsls	r1, r2, #26
 8001712:	d522      	bpl.n	800175a <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	0692      	lsls	r2, r2, #26
 8001718:	d51f      	bpl.n	800175a <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800171a:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 800171e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001720:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001726:	f000 b899 	b.w	800185c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800172a:	f7ff ff63 	bl	80015f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800172e:	4620      	mov	r0, r4
 8001730:	f7ff ff62 	bl	80015f8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001734:	e776      	b.n	8001624 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001736:	f7ff ff5d 	bl	80015f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800173a:	4620      	mov	r0, r4
 800173c:	f7ff ff5c 	bl	80015f8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001740:	e785      	b.n	800164e <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001742:	f7ff ff57 	bl	80015f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001746:	4620      	mov	r0, r4
 8001748:	f7ff ff56 	bl	80015f8 <HAL_TIM_PWM_PulseFinishedCallback>
 800174c:	e793      	b.n	8001676 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800174e:	f7ff ff51 	bl	80015f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001752:	4620      	mov	r0, r4
 8001754:	f7ff ff50 	bl	80015f8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001758:	e7a2      	b.n	80016a0 <HAL_TIM_IRQHandler+0xa4>
 800175a:	bd10      	pop	{r4, pc}

0800175c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800175c:	4a30      	ldr	r2, [pc, #192]	; (8001820 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800175e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001760:	4290      	cmp	r0, r2
 8001762:	d012      	beq.n	800178a <TIM_Base_SetConfig+0x2e>
 8001764:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001768:	d00f      	beq.n	800178a <TIM_Base_SetConfig+0x2e>
 800176a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800176e:	4290      	cmp	r0, r2
 8001770:	d00b      	beq.n	800178a <TIM_Base_SetConfig+0x2e>
 8001772:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001776:	4290      	cmp	r0, r2
 8001778:	d007      	beq.n	800178a <TIM_Base_SetConfig+0x2e>
 800177a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800177e:	4290      	cmp	r0, r2
 8001780:	d003      	beq.n	800178a <TIM_Base_SetConfig+0x2e>
 8001782:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8001786:	4290      	cmp	r0, r2
 8001788:	d119      	bne.n	80017be <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800178a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800178c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001790:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001792:	4a23      	ldr	r2, [pc, #140]	; (8001820 <TIM_Base_SetConfig+0xc4>)
 8001794:	4290      	cmp	r0, r2
 8001796:	d01d      	beq.n	80017d4 <TIM_Base_SetConfig+0x78>
 8001798:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800179c:	d01a      	beq.n	80017d4 <TIM_Base_SetConfig+0x78>
 800179e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80017a2:	4290      	cmp	r0, r2
 80017a4:	d016      	beq.n	80017d4 <TIM_Base_SetConfig+0x78>
 80017a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017aa:	4290      	cmp	r0, r2
 80017ac:	d012      	beq.n	80017d4 <TIM_Base_SetConfig+0x78>
 80017ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017b2:	4290      	cmp	r0, r2
 80017b4:	d00e      	beq.n	80017d4 <TIM_Base_SetConfig+0x78>
 80017b6:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80017ba:	4290      	cmp	r0, r2
 80017bc:	d00a      	beq.n	80017d4 <TIM_Base_SetConfig+0x78>
 80017be:	4a19      	ldr	r2, [pc, #100]	; (8001824 <TIM_Base_SetConfig+0xc8>)
 80017c0:	4290      	cmp	r0, r2
 80017c2:	d007      	beq.n	80017d4 <TIM_Base_SetConfig+0x78>
 80017c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017c8:	4290      	cmp	r0, r2
 80017ca:	d003      	beq.n	80017d4 <TIM_Base_SetConfig+0x78>
 80017cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017d0:	4290      	cmp	r0, r2
 80017d2:	d103      	bne.n	80017dc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017d4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80017d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017da:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017dc:	694a      	ldr	r2, [r1, #20]
 80017de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017e2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80017e4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017e6:	688b      	ldr	r3, [r1, #8]
 80017e8:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80017ea:	680b      	ldr	r3, [r1, #0]
 80017ec:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017ee:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <TIM_Base_SetConfig+0xc4>)
 80017f0:	4298      	cmp	r0, r3
 80017f2:	d00f      	beq.n	8001814 <TIM_Base_SetConfig+0xb8>
 80017f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017f8:	4298      	cmp	r0, r3
 80017fa:	d00b      	beq.n	8001814 <TIM_Base_SetConfig+0xb8>
 80017fc:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001800:	4298      	cmp	r0, r3
 8001802:	d007      	beq.n	8001814 <TIM_Base_SetConfig+0xb8>
 8001804:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001808:	4298      	cmp	r0, r3
 800180a:	d003      	beq.n	8001814 <TIM_Base_SetConfig+0xb8>
 800180c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001810:	4298      	cmp	r0, r3
 8001812:	d101      	bne.n	8001818 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001814:	690b      	ldr	r3, [r1, #16]
 8001816:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001818:	2301      	movs	r3, #1
 800181a:	6143      	str	r3, [r0, #20]
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40012c00 	.word	0x40012c00
 8001824:	40014000 	.word	0x40014000

08001828 <HAL_TIM_Base_Init>:
{
 8001828:	b510      	push	{r4, lr}
  if (htim == NULL)
 800182a:	4604      	mov	r4, r0
 800182c:	b1a0      	cbz	r0, 8001858 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800182e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001832:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001836:	b91b      	cbnz	r3, 8001840 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001838:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800183c:	f7ff fec0 	bl	80015c0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001840:	2302      	movs	r3, #2
 8001842:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001846:	6820      	ldr	r0, [r4, #0]
 8001848:	1d21      	adds	r1, r4, #4
 800184a:	f7ff ff87 	bl	800175c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800184e:	2301      	movs	r3, #1
 8001850:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001854:	2000      	movs	r0, #0
 8001856:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001858:	2001      	movs	r0, #1
}
 800185a:	bd10      	pop	{r4, pc}

0800185c <HAL_TIMEx_CommutationCallback>:
 800185c:	4770      	bx	lr

0800185e <HAL_TIMEx_BreakCallback>:
 800185e:	4770      	bx	lr

08001860 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001860:	4770      	bx	lr
	...

08001864 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8001864:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001866:	69c1      	ldr	r1, [r0, #28]
{
 8001868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800186a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800186c:	6883      	ldr	r3, [r0, #8]
 800186e:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001870:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001872:	4303      	orrs	r3, r0
 8001874:	6960      	ldr	r0, [r4, #20]
 8001876:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001878:	48ba      	ldr	r0, [pc, #744]	; (8001b64 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800187a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800187c:	4028      	ands	r0, r5
 800187e:	4303      	orrs	r3, r0
 8001880:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001882:	6853      	ldr	r3, [r2, #4]
 8001884:	68e0      	ldr	r0, [r4, #12]
 8001886:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800188a:	4303      	orrs	r3, r0
 800188c:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800188e:	4bb6      	ldr	r3, [pc, #728]	; (8001b68 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001890:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001892:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001894:	bf1c      	itt	ne
 8001896:	6a23      	ldrne	r3, [r4, #32]
 8001898:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800189a:	6893      	ldr	r3, [r2, #8]
 800189c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80018a0:	4303      	orrs	r3, r0
 80018a2:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018a4:	4bb1      	ldr	r3, [pc, #708]	; (8001b6c <UART_SetConfig+0x308>)
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d119      	bne.n	80018de <UART_SetConfig+0x7a>
 80018aa:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80018ae:	4ab0      	ldr	r2, [pc, #704]	; (8001b70 <UART_SetConfig+0x30c>)
 80018b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b4:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018b8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80018bc:	5cd3      	ldrb	r3, [r2, r3]
 80018be:	f040 8138 	bne.w	8001b32 <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	f200 808f 	bhi.w	80019e6 <UART_SetConfig+0x182>
 80018c8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80018cc:	00ca011a 	.word	0x00ca011a
 80018d0:	008d00f9 	.word	0x008d00f9
 80018d4:	008d0114 	.word	0x008d0114
 80018d8:	008d008d 	.word	0x008d008d
 80018dc:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018de:	4ba5      	ldr	r3, [pc, #660]	; (8001b74 <UART_SetConfig+0x310>)
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d107      	bne.n	80018f4 <UART_SetConfig+0x90>
 80018e4:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80018e8:	4aa3      	ldr	r2, [pc, #652]	; (8001b78 <UART_SetConfig+0x314>)
 80018ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ee:	f003 030c 	and.w	r3, r3, #12
 80018f2:	e7e1      	b.n	80018b8 <UART_SetConfig+0x54>
 80018f4:	4ba1      	ldr	r3, [pc, #644]	; (8001b7c <UART_SetConfig+0x318>)
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d123      	bne.n	8001942 <UART_SetConfig+0xde>
 80018fa:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 80018fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001902:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001906:	2b10      	cmp	r3, #16
 8001908:	f000 80f1 	beq.w	8001aee <UART_SetConfig+0x28a>
 800190c:	d80b      	bhi.n	8001926 <UART_SetConfig+0xc2>
 800190e:	2b00      	cmp	r3, #0
 8001910:	f000 80f3 	beq.w	8001afa <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001914:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001918:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 800191c:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001920:	f000 80f8 	beq.w	8001b14 <UART_SetConfig+0x2b0>
 8001924:	e0a8      	b.n	8001a78 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001926:	2b20      	cmp	r3, #32
 8001928:	f000 80c6 	beq.w	8001ab8 <UART_SetConfig+0x254>
 800192c:	2b30      	cmp	r3, #48	; 0x30
 800192e:	d1f1      	bne.n	8001914 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001930:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001934:	f040 80b8 	bne.w	8001aa8 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001938:	6860      	ldr	r0, [r4, #4]
 800193a:	0843      	lsrs	r3, r0, #1
 800193c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001940:	e0c3      	b.n	8001aca <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001942:	4b8f      	ldr	r3, [pc, #572]	; (8001b80 <UART_SetConfig+0x31c>)
 8001944:	429a      	cmp	r2, r3
 8001946:	d11e      	bne.n	8001986 <UART_SetConfig+0x122>
 8001948:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 800194c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001950:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001954:	2b40      	cmp	r3, #64	; 0x40
 8001956:	f000 80bb 	beq.w	8001ad0 <UART_SetConfig+0x26c>
 800195a:	d80a      	bhi.n	8001972 <UART_SetConfig+0x10e>
 800195c:	b97b      	cbnz	r3, 800197e <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 800195e:	4b82      	ldr	r3, [pc, #520]	; (8001b68 <UART_SetConfig+0x304>)
 8001960:	429a      	cmp	r2, r3
 8001962:	f040 80ca 	bne.w	8001afa <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8001966:	f7ff faf5 	bl	8000f54 <HAL_RCC_GetPCLK1Freq>
        break;
 800196a:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 800196c:	bbb0      	cbnz	r0, 80019dc <UART_SetConfig+0x178>
 800196e:	4602      	mov	r2, r0
 8001970:	e03a      	b.n	80019e8 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001972:	2b80      	cmp	r3, #128	; 0x80
 8001974:	f000 809d 	beq.w	8001ab2 <UART_SetConfig+0x24e>
 8001978:	2bc0      	cmp	r3, #192	; 0xc0
 800197a:	f000 80b0 	beq.w	8001ade <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 800197e:	4b7a      	ldr	r3, [pc, #488]	; (8001b68 <UART_SetConfig+0x304>)
 8001980:	429a      	cmp	r2, r3
 8001982:	d1c7      	bne.n	8001914 <UART_SetConfig+0xb0>
 8001984:	e02f      	b.n	80019e6 <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001986:	4b7f      	ldr	r3, [pc, #508]	; (8001b84 <UART_SetConfig+0x320>)
 8001988:	429a      	cmp	r2, r3
 800198a:	d111      	bne.n	80019b0 <UART_SetConfig+0x14c>
 800198c:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8001990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001994:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800199c:	f000 8098 	beq.w	8001ad0 <UART_SetConfig+0x26c>
 80019a0:	d9dc      	bls.n	800195c <UART_SetConfig+0xf8>
 80019a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019a6:	f000 8084 	beq.w	8001ab2 <UART_SetConfig+0x24e>
 80019aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80019ae:	e7e4      	b.n	800197a <UART_SetConfig+0x116>
 80019b0:	4b6d      	ldr	r3, [pc, #436]	; (8001b68 <UART_SetConfig+0x304>)
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d1ae      	bne.n	8001914 <UART_SetConfig+0xb0>
 80019b6:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 80019ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019be:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80019c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019c6:	f000 8083 	beq.w	8001ad0 <UART_SetConfig+0x26c>
 80019ca:	d9c7      	bls.n	800195c <UART_SetConfig+0xf8>
 80019cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019d0:	d06f      	beq.n	8001ab2 <UART_SetConfig+0x24e>
 80019d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80019d6:	e7d0      	b.n	800197a <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80019d8:	486b      	ldr	r0, [pc, #428]	; (8001b88 <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 80019da:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80019dc:	6862      	ldr	r2, [r4, #4]
 80019de:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80019e2:	4281      	cmp	r1, r0
 80019e4:	d905      	bls.n	80019f2 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 80019e6:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80019ec:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 80019ee:	4610      	mov	r0, r2
 80019f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80019f2:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80019f6:	d8f6      	bhi.n	80019e6 <UART_SetConfig+0x182>
        switch (clocksource)
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	d82e      	bhi.n	8001a5a <UART_SetConfig+0x1f6>
 80019fc:	e8df f003 	tbb	[pc, r3]
 8001a00:	2d1c2d05 	.word	0x2d1c2d05
 8001a04:	2d2d2d24 	.word	0x2d2d2d24
 8001a08:	27          	.byte	0x27
 8001a09:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001a0a:	f7ff faa3 	bl	8000f54 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001a0e:	6862      	ldr	r2, [r4, #4]
 8001a10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a14:	0856      	lsrs	r6, r2, #1
 8001a16:	2700      	movs	r7, #0
 8001a18:	fbe1 6700 	umlal	r6, r7, r1, r0
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	4630      	mov	r0, r6
 8001a20:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001a22:	f7fe fc25 	bl	8000270 <__aeabi_uldivmod>
            break;
 8001a26:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001a28:	4b58      	ldr	r3, [pc, #352]	; (8001b8c <UART_SetConfig+0x328>)
 8001a2a:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8001a2e:	4299      	cmp	r1, r3
 8001a30:	d8d9      	bhi.n	80019e6 <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8001a32:	6823      	ldr	r3, [r4, #0]
 8001a34:	60d8      	str	r0, [r3, #12]
 8001a36:	e7d7      	b.n	80019e8 <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8001a38:	4855      	ldr	r0, [pc, #340]	; (8001b90 <UART_SetConfig+0x32c>)
 8001a3a:	0855      	lsrs	r5, r2, #1
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	2100      	movs	r1, #0
 8001a40:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001a42:	f141 0100 	adc.w	r1, r1, #0
 8001a46:	e7ec      	b.n	8001a22 <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001a48:	f7fe ff78 	bl	800093c <HAL_RCC_GetSysClockFreq>
 8001a4c:	e7df      	b.n	8001a0e <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001a4e:	0850      	lsrs	r0, r2, #1
 8001a50:	2100      	movs	r1, #0
 8001a52:	2300      	movs	r3, #0
 8001a54:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8001a58:	e7f3      	b.n	8001a42 <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 8001a5a:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	e7e3      	b.n	8001a28 <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001a60:	f7ff fa8a 	bl	8000f78 <HAL_RCC_GetPCLK2Freq>
 8001a64:	e04e      	b.n	8001b04 <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001a66:	f7ff fa75 	bl	8000f54 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001a6a:	6862      	ldr	r2, [r4, #4]
 8001a6c:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001a70:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a74:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001a76:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001a78:	f1a3 0010 	sub.w	r0, r3, #16
 8001a7c:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001a80:	4288      	cmp	r0, r1
 8001a82:	d8b0      	bhi.n	80019e6 <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8001a84:	6821      	ldr	r1, [r4, #0]
 8001a86:	60cb      	str	r3, [r1, #12]
 8001a88:	e7ae      	b.n	80019e8 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001a8a:	f7ff fa75 	bl	8000f78 <HAL_RCC_GetPCLK2Freq>
 8001a8e:	e7ec      	b.n	8001a6a <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001a90:	6860      	ldr	r0, [r4, #4]
 8001a92:	0843      	lsrs	r3, r0, #1
 8001a94:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001a98:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001a9c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001aa0:	e7e8      	b.n	8001a74 <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001aa2:	f7fe ff4b 	bl	800093c <HAL_RCC_GetSysClockFreq>
 8001aa6:	e7e0      	b.n	8001a6a <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001aa8:	6860      	ldr	r0, [r4, #4]
 8001aaa:	0843      	lsrs	r3, r0, #1
 8001aac:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001ab0:	e7f4      	b.n	8001a9c <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001ab2:	4b2d      	ldr	r3, [pc, #180]	; (8001b68 <UART_SetConfig+0x304>)
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d08f      	beq.n	80019d8 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ab8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001abc:	d1e8      	bne.n	8001a90 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001abe:	6860      	ldr	r0, [r4, #4]
 8001ac0:	0843      	lsrs	r3, r0, #1
 8001ac2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8001ac6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001aca:	fbb3 f3f0 	udiv	r3, r3, r0
 8001ace:	e01f      	b.n	8001b10 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001ad0:	4b25      	ldr	r3, [pc, #148]	; (8001b68 <UART_SetConfig+0x304>)
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d10b      	bne.n	8001aee <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001ad6:	f7fe ff31 	bl	800093c <HAL_RCC_GetSysClockFreq>
        break;
 8001ada:	2304      	movs	r3, #4
 8001adc:	e746      	b.n	800196c <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001ade:	4b22      	ldr	r3, [pc, #136]	; (8001b68 <UART_SetConfig+0x304>)
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	f47f af25 	bne.w	8001930 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001ae6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8001aea:	2308      	movs	r3, #8
 8001aec:	e776      	b.n	80019dc <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001aee:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001af2:	d1d6      	bne.n	8001aa2 <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001af4:	f7fe ff22 	bl	800093c <HAL_RCC_GetSysClockFreq>
 8001af8:	e004      	b.n	8001b04 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001afa:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001afe:	d1b2      	bne.n	8001a66 <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001b00:	f7ff fa28 	bl	8000f54 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001b04:	6861      	ldr	r1, [r4, #4]
 8001b06:	084a      	lsrs	r2, r1, #1
 8001b08:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001b0c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b10:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001b12:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001b14:	f1a3 0010 	sub.w	r0, r3, #16
 8001b18:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001b1c:	4288      	cmp	r0, r1
 8001b1e:	f63f af62 	bhi.w	80019e6 <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 8001b22:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8001b26:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001b28:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8001b2c:	430b      	orrs	r3, r1
 8001b2e:	60c3      	str	r3, [r0, #12]
 8001b30:	e75a      	b.n	80019e8 <UART_SetConfig+0x184>
    switch (clocksource)
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	f63f af57 	bhi.w	80019e6 <UART_SetConfig+0x182>
 8001b38:	a201      	add	r2, pc, #4	; (adr r2, 8001b40 <UART_SetConfig+0x2dc>)
 8001b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b3e:	bf00      	nop
 8001b40:	08001a67 	.word	0x08001a67
 8001b44:	08001a8b 	.word	0x08001a8b
 8001b48:	08001a91 	.word	0x08001a91
 8001b4c:	080019e7 	.word	0x080019e7
 8001b50:	08001aa3 	.word	0x08001aa3
 8001b54:	080019e7 	.word	0x080019e7
 8001b58:	080019e7 	.word	0x080019e7
 8001b5c:	080019e7 	.word	0x080019e7
 8001b60:	08001aa9 	.word	0x08001aa9
 8001b64:	efff69f3 	.word	0xefff69f3
 8001b68:	40008000 	.word	0x40008000
 8001b6c:	40013800 	.word	0x40013800
 8001b70:	08004734 	.word	0x08004734
 8001b74:	40004400 	.word	0x40004400
 8001b78:	08004738 	.word	0x08004738
 8001b7c:	40004800 	.word	0x40004800
 8001b80:	40004c00 	.word	0x40004c00
 8001b84:	40005000 	.word	0x40005000
 8001b88:	00f42400 	.word	0x00f42400
 8001b8c:	000ffcff 	.word	0x000ffcff
 8001b90:	f4240000 	.word	0xf4240000

08001b94 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001b94:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b96:	07da      	lsls	r2, r3, #31
{
 8001b98:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001b9a:	d506      	bpl.n	8001baa <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001b9c:	6801      	ldr	r1, [r0, #0]
 8001b9e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001ba0:	684a      	ldr	r2, [r1, #4]
 8001ba2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001ba6:	4322      	orrs	r2, r4
 8001ba8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001baa:	079c      	lsls	r4, r3, #30
 8001bac:	d506      	bpl.n	8001bbc <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001bae:	6801      	ldr	r1, [r0, #0]
 8001bb0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001bb2:	684a      	ldr	r2, [r1, #4]
 8001bb4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001bb8:	4322      	orrs	r2, r4
 8001bba:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001bbc:	0759      	lsls	r1, r3, #29
 8001bbe:	d506      	bpl.n	8001bce <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001bc0:	6801      	ldr	r1, [r0, #0]
 8001bc2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001bc4:	684a      	ldr	r2, [r1, #4]
 8001bc6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001bca:	4322      	orrs	r2, r4
 8001bcc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001bce:	071a      	lsls	r2, r3, #28
 8001bd0:	d506      	bpl.n	8001be0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001bd2:	6801      	ldr	r1, [r0, #0]
 8001bd4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001bd6:	684a      	ldr	r2, [r1, #4]
 8001bd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bdc:	4322      	orrs	r2, r4
 8001bde:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001be0:	06dc      	lsls	r4, r3, #27
 8001be2:	d506      	bpl.n	8001bf2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001be4:	6801      	ldr	r1, [r0, #0]
 8001be6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001be8:	688a      	ldr	r2, [r1, #8]
 8001bea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bee:	4322      	orrs	r2, r4
 8001bf0:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001bf2:	0699      	lsls	r1, r3, #26
 8001bf4:	d506      	bpl.n	8001c04 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001bf6:	6801      	ldr	r1, [r0, #0]
 8001bf8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001bfa:	688a      	ldr	r2, [r1, #8]
 8001bfc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c00:	4322      	orrs	r2, r4
 8001c02:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001c04:	065a      	lsls	r2, r3, #25
 8001c06:	d50f      	bpl.n	8001c28 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001c08:	6801      	ldr	r1, [r0, #0]
 8001c0a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001c0c:	684a      	ldr	r2, [r1, #4]
 8001c0e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001c12:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001c14:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001c18:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001c1a:	d105      	bne.n	8001c28 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001c1c:	684a      	ldr	r2, [r1, #4]
 8001c1e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001c20:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001c24:	4322      	orrs	r2, r4
 8001c26:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001c28:	061b      	lsls	r3, r3, #24
 8001c2a:	d506      	bpl.n	8001c3a <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001c2c:	6802      	ldr	r2, [r0, #0]
 8001c2e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001c30:	6853      	ldr	r3, [r2, #4]
 8001c32:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001c36:	430b      	orrs	r3, r1
 8001c38:	6053      	str	r3, [r2, #4]
 8001c3a:	bd10      	pop	{r4, pc}

08001c3c <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c40:	9d06      	ldr	r5, [sp, #24]
 8001c42:	4604      	mov	r4, r0
 8001c44:	460f      	mov	r7, r1
 8001c46:	4616      	mov	r6, r2
 8001c48:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c4a:	6821      	ldr	r1, [r4, #0]
 8001c4c:	69ca      	ldr	r2, [r1, #28]
 8001c4e:	ea37 0302 	bics.w	r3, r7, r2
 8001c52:	bf0c      	ite	eq
 8001c54:	2201      	moveq	r2, #1
 8001c56:	2200      	movne	r2, #0
 8001c58:	42b2      	cmp	r2, r6
 8001c5a:	d002      	beq.n	8001c62 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001c5c:	2000      	movs	r0, #0
}
 8001c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001c62:	1c6b      	adds	r3, r5, #1
 8001c64:	d0f2      	beq.n	8001c4c <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c66:	b99d      	cbnz	r5, 8001c90 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c68:	6823      	ldr	r3, [r4, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c70:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	f022 0201 	bic.w	r2, r2, #1
 8001c78:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001c7a:	2320      	movs	r3, #32
 8001c7c:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8001c80:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8001c84:	2300      	movs	r3, #0
 8001c86:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8001c8a:	2003      	movs	r0, #3
 8001c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c90:	f7fe fc8e 	bl	80005b0 <HAL_GetTick>
 8001c94:	eba0 0008 	sub.w	r0, r0, r8
 8001c98:	4285      	cmp	r5, r0
 8001c9a:	d2d6      	bcs.n	8001c4a <UART_WaitOnFlagUntilTimeout+0xe>
 8001c9c:	e7e4      	b.n	8001c68 <UART_WaitOnFlagUntilTimeout+0x2c>

08001c9e <HAL_UART_Transmit>:
{
 8001c9e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001ca2:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001ca4:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8001ca8:	2b20      	cmp	r3, #32
{
 8001caa:	4604      	mov	r4, r0
 8001cac:	460d      	mov	r5, r1
 8001cae:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001cb0:	d14a      	bne.n	8001d48 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8001cb2:	2900      	cmp	r1, #0
 8001cb4:	d046      	beq.n	8001d44 <HAL_UART_Transmit+0xa6>
 8001cb6:	2a00      	cmp	r2, #0
 8001cb8:	d044      	beq.n	8001d44 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8001cba:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d042      	beq.n	8001d48 <HAL_UART_Transmit+0xaa>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ccc:	2321      	movs	r3, #33	; 0x21
 8001cce:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 8001cd2:	f7fe fc6d 	bl	80005b0 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8001cd6:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8001cda:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001cdc:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8001ce0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ce4:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
 8001ce6:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ce8:	4633      	mov	r3, r6
    while (huart->TxXferCount > 0U)
 8001cea:	b952      	cbnz	r2, 8001d02 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cec:	2140      	movs	r1, #64	; 0x40
 8001cee:	4620      	mov	r0, r4
 8001cf0:	f7ff ffa4 	bl	8001c3c <UART_WaitOnFlagUntilTimeout>
 8001cf4:	b958      	cbnz	r0, 8001d0e <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 8001cf6:	2320      	movs	r3, #32
 8001cf8:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 8001cfc:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8001d00:	e006      	b.n	8001d10 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d02:	2200      	movs	r2, #0
 8001d04:	2180      	movs	r1, #128	; 0x80
 8001d06:	4620      	mov	r0, r4
 8001d08:	f7ff ff98 	bl	8001c3c <UART_WaitOnFlagUntilTimeout>
 8001d0c:	b118      	cbz	r0, 8001d16 <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 8001d0e:	2003      	movs	r0, #3
}
 8001d10:	b002      	add	sp, #8
 8001d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d16:	68a3      	ldr	r3, [r4, #8]
 8001d18:	6822      	ldr	r2, [r4, #0]
 8001d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d1e:	d10d      	bne.n	8001d3c <HAL_UART_Transmit+0x9e>
 8001d20:	6923      	ldr	r3, [r4, #16]
 8001d22:	b95b      	cbnz	r3, 8001d3c <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001d24:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d2c:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8001d2e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8001d32:	3b01      	subs	r3, #1
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8001d3a:	e7d1      	b.n	8001ce0 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001d3c:	782b      	ldrb	r3, [r5, #0]
 8001d3e:	8513      	strh	r3, [r2, #40]	; 0x28
 8001d40:	3501      	adds	r5, #1
 8001d42:	e7f4      	b.n	8001d2e <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8001d44:	2001      	movs	r0, #1
 8001d46:	e7e3      	b.n	8001d10 <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 8001d48:	2002      	movs	r0, #2
 8001d4a:	e7e1      	b.n	8001d10 <HAL_UART_Transmit+0x72>

08001d4c <UART_CheckIdleState>:
{
 8001d4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001d4e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d50:	2600      	movs	r6, #0
 8001d52:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8001d54:	f7fe fc2c 	bl	80005b0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001d58:	6823      	ldr	r3, [r4, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001d5e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001d60:	d417      	bmi.n	8001d92 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001d62:	6823      	ldr	r3, [r4, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	075b      	lsls	r3, r3, #29
 8001d68:	d50a      	bpl.n	8001d80 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d6a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	2200      	movs	r2, #0
 8001d72:	462b      	mov	r3, r5
 8001d74:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001d78:	4620      	mov	r0, r4
 8001d7a:	f7ff ff5f 	bl	8001c3c <UART_WaitOnFlagUntilTimeout>
 8001d7e:	b9a0      	cbnz	r0, 8001daa <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8001d80:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001d82:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001d84:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8001d88:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8001d8c:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8001d90:	e00c      	b.n	8001dac <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	4632      	mov	r2, r6
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001da0:	4620      	mov	r0, r4
 8001da2:	f7ff ff4b 	bl	8001c3c <UART_WaitOnFlagUntilTimeout>
 8001da6:	2800      	cmp	r0, #0
 8001da8:	d0db      	beq.n	8001d62 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001daa:	2003      	movs	r0, #3
}
 8001dac:	b002      	add	sp, #8
 8001dae:	bd70      	pop	{r4, r5, r6, pc}

08001db0 <HAL_UART_Init>:
{
 8001db0:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001db2:	4604      	mov	r4, r0
 8001db4:	b360      	cbz	r0, 8001e10 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001db6:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8001dba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001dbe:	b91b      	cbnz	r3, 8001dc8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001dc0:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001dc4:	f001 fc64 	bl	8003690 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001dc8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001dca:	2324      	movs	r3, #36	; 0x24
 8001dcc:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8001dd0:	6813      	ldr	r3, [r2, #0]
 8001dd2:	f023 0301 	bic.w	r3, r3, #1
 8001dd6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001dd8:	4620      	mov	r0, r4
 8001dda:	f7ff fd43 	bl	8001864 <UART_SetConfig>
 8001dde:	2801      	cmp	r0, #1
 8001de0:	d016      	beq.n	8001e10 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001de2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001de4:	b113      	cbz	r3, 8001dec <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001de6:	4620      	mov	r0, r4
 8001de8:	f7ff fed4 	bl	8001b94 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dec:	6823      	ldr	r3, [r4, #0]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001df4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001dfc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001e04:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001e06:	601a      	str	r2, [r3, #0]
}
 8001e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001e0c:	f7ff bf9e 	b.w	8001d4c <UART_CheckIdleState>
}
 8001e10:	2001      	movs	r0, #1
 8001e12:	bd10      	pop	{r4, pc}

08001e14 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001e14:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001e16:	f000 ffc1 	bl	8002d9c <vTaskStartScheduler>
  
  return osOK;
}
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	bd08      	pop	{r3, pc}

08001e1e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001e1e:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e20:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8001e24:	8a02      	ldrh	r2, [r0, #16]
{
 8001e26:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e28:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 8001e2c:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8001e2e:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001e30:	bf14      	ite	ne
 8001e32:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001e34:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e36:	a803      	add	r0, sp, #12
 8001e38:	9001      	str	r0, [sp, #4]
 8001e3a:	9400      	str	r4, [sp, #0]
 8001e3c:	4628      	mov	r0, r5
 8001e3e:	f000 fedd 	bl	8002bfc <xTaskCreate>
 8001e42:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001e44:	bf0c      	ite	eq
 8001e46:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8001e48:	2000      	movne	r0, #0
}
 8001e4a:	b005      	add	sp, #20
 8001e4c:	bd30      	pop	{r4, r5, pc}

08001e4e <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8001e4e:	2901      	cmp	r1, #1
{ 
 8001e50:	b510      	push	{r4, lr}
 8001e52:	4608      	mov	r0, r1
  if (count == 1) {
 8001e54:	d10c      	bne.n	8001e70 <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 8001e56:	2203      	movs	r2, #3
 8001e58:	2100      	movs	r1, #0
 8001e5a:	f000 fc05 	bl	8002668 <xQueueGenericCreate>
 8001e5e:	4604      	mov	r4, r0
 8001e60:	b120      	cbz	r0, 8001e6c <osSemaphoreCreate+0x1e>
 8001e62:	2300      	movs	r3, #0
 8001e64:	461a      	mov	r2, r3
 8001e66:	4619      	mov	r1, r3
 8001e68:	f000 fc20 	bl	80026ac <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 8001e6c:	4620      	mov	r0, r4
 8001e6e:	bd10      	pop	{r4, pc}
    return NULL;
 8001e70:	2400      	movs	r4, #0
 8001e72:	e7fb      	b.n	8001e6c <osSemaphoreCreate+0x1e>

08001e74 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8001e74:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8001e76:	2400      	movs	r4, #0
 8001e78:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8001e7a:	b1e0      	cbz	r0, 8001eb6 <osSemaphoreWait+0x42>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e7c:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8001e80:	b1a3      	cbz	r3, 8001eac <osSemaphoreWait+0x38>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001e82:	aa01      	add	r2, sp, #4
 8001e84:	4621      	mov	r1, r4
 8001e86:	f000 fddb 	bl	8002a40 <xQueueReceiveFromISR>
 8001e8a:	2801      	cmp	r0, #1
 8001e8c:	d002      	beq.n	8001e94 <osSemaphoreWait+0x20>
      return osErrorOS;
 8001e8e:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8001e90:	b002      	add	sp, #8
 8001e92:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8001e94:	9b01      	ldr	r3, [sp, #4]
 8001e96:	b13b      	cbz	r3, 8001ea8 <osSemaphoreWait+0x34>
 8001e98:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <osSemaphoreWait+0x48>)
 8001e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	f3bf 8f4f 	dsb	sy
 8001ea4:	f3bf 8f6f 	isb	sy
  return osOK;
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	e7f1      	b.n	8001e90 <osSemaphoreWait+0x1c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8001eac:	f000 fd08 	bl	80028c0 <xQueueSemaphoreTake>
 8001eb0:	2801      	cmp	r0, #1
 8001eb2:	d1ec      	bne.n	8001e8e <osSemaphoreWait+0x1a>
 8001eb4:	e7f8      	b.n	8001ea8 <osSemaphoreWait+0x34>
    return osErrorParameter;
 8001eb6:	2080      	movs	r0, #128	; 0x80
 8001eb8:	e7ea      	b.n	8001e90 <osSemaphoreWait+0x1c>
 8001eba:	bf00      	nop
 8001ebc:	e000ed04 	.word	0xe000ed04

08001ec0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8001ec0:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8001ec2:	2400      	movs	r4, #0
 8001ec4:	9401      	str	r4, [sp, #4]
 8001ec6:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 8001eca:	b193      	cbz	r3, 8001ef2 <osSemaphoreRelease+0x32>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001ecc:	a901      	add	r1, sp, #4
 8001ece:	f000 fca3 	bl	8002818 <xQueueGiveFromISR>
 8001ed2:	2801      	cmp	r0, #1
 8001ed4:	d113      	bne.n	8001efe <osSemaphoreRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001ed6:	9b01      	ldr	r3, [sp, #4]
 8001ed8:	b913      	cbnz	r3, 8001ee0 <osSemaphoreRelease+0x20>
  osStatus result = osOK;
 8001eda:	2000      	movs	r0, #0
      result = osErrorOS;
    }
  }
  
  return result;
}
 8001edc:	b002      	add	sp, #8
 8001ede:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <osSemaphoreRelease+0x44>)
 8001ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	f3bf 8f4f 	dsb	sy
 8001eec:	f3bf 8f6f 	isb	sy
 8001ef0:	e7f3      	b.n	8001eda <osSemaphoreRelease+0x1a>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f000 fbd9 	bl	80026ac <xQueueGenericSend>
 8001efa:	2801      	cmp	r0, #1
 8001efc:	d0ed      	beq.n	8001eda <osSemaphoreRelease+0x1a>
      result = osErrorOS;
 8001efe:	20ff      	movs	r0, #255	; 0xff
 8001f00:	e7ec      	b.n	8001edc <osSemaphoreRelease+0x1c>
 8001f02:	bf00      	nop
 8001f04:	e000ed04 	.word	0xe000ed04

08001f08 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f08:	f100 0308 	add.w	r3, r0, #8
 8001f0c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f0e:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f12:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f14:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f16:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f18:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f1a:	6003      	str	r3, [r0, #0]
 8001f1c:	4770      	bx	lr

08001f1e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	6103      	str	r3, [r0, #16]
 8001f22:	4770      	bx	lr

08001f24 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f24:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001f26:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f30:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001f32:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f34:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001f36:	3301      	adds	r3, #1
 8001f38:	6003      	str	r3, [r0, #0]
 8001f3a:	4770      	bx	lr

08001f3c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f3c:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001f3e:	1c53      	adds	r3, r2, #1
{
 8001f40:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8001f42:	d10a      	bne.n	8001f5a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001f44:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f4a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001f4c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001f4e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001f50:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f52:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001f54:	3301      	adds	r3, #1
 8001f56:	6003      	str	r3, [r0, #0]
 8001f58:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f5a:	f100 0308 	add.w	r3, r0, #8
 8001f5e:	685c      	ldr	r4, [r3, #4]
 8001f60:	6825      	ldr	r5, [r4, #0]
 8001f62:	42aa      	cmp	r2, r5
 8001f64:	d3ef      	bcc.n	8001f46 <vListInsert+0xa>
 8001f66:	4623      	mov	r3, r4
 8001f68:	e7f9      	b.n	8001f5e <vListInsert+0x22>

08001f6a <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f6a:	6841      	ldr	r1, [r0, #4]
 8001f6c:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001f6e:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f70:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f72:	6882      	ldr	r2, [r0, #8]
 8001f74:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001f76:	6859      	ldr	r1, [r3, #4]
 8001f78:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f7a:	bf08      	it	eq
 8001f7c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001f7e:	2200      	movs	r2, #0
 8001f80:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	3a01      	subs	r2, #1
 8001f86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001f88:	6818      	ldr	r0, [r3, #0]
}
 8001f8a:	4770      	bx	lr

08001f8c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001f8c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001f92:	4b0d      	ldr	r3, [pc, #52]	; (8001fc8 <prvTaskExitError+0x3c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	3301      	adds	r3, #1
 8001f98:	d008      	beq.n	8001fac <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f9e:	f383 8811 	msr	BASEPRI, r3
 8001fa2:	f3bf 8f6f 	isb	sy
 8001fa6:	f3bf 8f4f 	dsb	sy
 8001faa:	e7fe      	b.n	8001faa <prvTaskExitError+0x1e>
 8001fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fb0:	f383 8811 	msr	BASEPRI, r3
 8001fb4:	f3bf 8f6f 	isb	sy
 8001fb8:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001fbc:	9b01      	ldr	r3, [sp, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0fc      	beq.n	8001fbc <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001fc2:	b002      	add	sp, #8
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	20000000 	.word	0x20000000

08001fcc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001fcc:	4808      	ldr	r0, [pc, #32]	; (8001ff0 <prvPortStartFirstTask+0x24>)
 8001fce:	6800      	ldr	r0, [r0, #0]
 8001fd0:	6800      	ldr	r0, [r0, #0]
 8001fd2:	f380 8808 	msr	MSP, r0
 8001fd6:	f04f 0000 	mov.w	r0, #0
 8001fda:	f380 8814 	msr	CONTROL, r0
 8001fde:	b662      	cpsie	i
 8001fe0:	b661      	cpsie	f
 8001fe2:	f3bf 8f4f 	dsb	sy
 8001fe6:	f3bf 8f6f 	isb	sy
 8001fea:	df00      	svc	0
 8001fec:	bf00      	nop
 8001fee:	0000      	.short	0x0000
 8001ff0:	e000ed08 	.word	0xe000ed08

08001ff4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001ff4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002004 <vPortEnableVFP+0x10>
 8001ff8:	6801      	ldr	r1, [r0, #0]
 8001ffa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001ffe:	6001      	str	r1, [r0, #0]
 8002000:	4770      	bx	lr
 8002002:	0000      	.short	0x0000
 8002004:	e000ed88 	.word	0xe000ed88

08002008 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002008:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800200c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002010:	4b07      	ldr	r3, [pc, #28]	; (8002030 <pxPortInitialiseStack+0x28>)
 8002012:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002016:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800201a:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800201e:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002022:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002026:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800202a:	3844      	subs	r0, #68	; 0x44
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	08001f8d 	.word	0x08001f8d
	...

08002040 <SVC_Handler>:
	__asm volatile (
 8002040:	4b07      	ldr	r3, [pc, #28]	; (8002060 <pxCurrentTCBConst2>)
 8002042:	6819      	ldr	r1, [r3, #0]
 8002044:	6808      	ldr	r0, [r1, #0]
 8002046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800204a:	f380 8809 	msr	PSP, r0
 800204e:	f3bf 8f6f 	isb	sy
 8002052:	f04f 0000 	mov.w	r0, #0
 8002056:	f380 8811 	msr	BASEPRI, r0
 800205a:	4770      	bx	lr
 800205c:	f3af 8000 	nop.w

08002060 <pxCurrentTCBConst2>:
 8002060:	200027b8 	.word	0x200027b8

08002064 <vPortEnterCritical>:
 8002064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002068:	f383 8811 	msr	BASEPRI, r3
 800206c:	f3bf 8f6f 	isb	sy
 8002070:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002074:	4a0a      	ldr	r2, [pc, #40]	; (80020a0 <vPortEnterCritical+0x3c>)
 8002076:	6813      	ldr	r3, [r2, #0]
 8002078:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800207a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800207c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800207e:	d10d      	bne.n	800209c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <vPortEnterCritical+0x40>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002088:	d008      	beq.n	800209c <vPortEnterCritical+0x38>
 800208a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800208e:	f383 8811 	msr	BASEPRI, r3
 8002092:	f3bf 8f6f 	isb	sy
 8002096:	f3bf 8f4f 	dsb	sy
 800209a:	e7fe      	b.n	800209a <vPortEnterCritical+0x36>
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	20000000 	.word	0x20000000
 80020a4:	e000ed04 	.word	0xe000ed04

080020a8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80020a8:	4a08      	ldr	r2, [pc, #32]	; (80020cc <vPortExitCritical+0x24>)
 80020aa:	6813      	ldr	r3, [r2, #0]
 80020ac:	b943      	cbnz	r3, 80020c0 <vPortExitCritical+0x18>
 80020ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b2:	f383 8811 	msr	BASEPRI, r3
 80020b6:	f3bf 8f6f 	isb	sy
 80020ba:	f3bf 8f4f 	dsb	sy
 80020be:	e7fe      	b.n	80020be <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80020c0:	3b01      	subs	r3, #1
 80020c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80020c4:	b90b      	cbnz	r3, 80020ca <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80020c6:	f383 8811 	msr	BASEPRI, r3
 80020ca:	4770      	bx	lr
 80020cc:	20000000 	.word	0x20000000

080020d0 <PendSV_Handler>:
	__asm volatile
 80020d0:	f3ef 8009 	mrs	r0, PSP
 80020d4:	f3bf 8f6f 	isb	sy
 80020d8:	4b15      	ldr	r3, [pc, #84]	; (8002130 <pxCurrentTCBConst>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	f01e 0f10 	tst.w	lr, #16
 80020e0:	bf08      	it	eq
 80020e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80020e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020ea:	6010      	str	r0, [r2, #0]
 80020ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80020f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80020f4:	f380 8811 	msr	BASEPRI, r0
 80020f8:	f3bf 8f4f 	dsb	sy
 80020fc:	f3bf 8f6f 	isb	sy
 8002100:	f000 ff9a 	bl	8003038 <vTaskSwitchContext>
 8002104:	f04f 0000 	mov.w	r0, #0
 8002108:	f380 8811 	msr	BASEPRI, r0
 800210c:	bc09      	pop	{r0, r3}
 800210e:	6819      	ldr	r1, [r3, #0]
 8002110:	6808      	ldr	r0, [r1, #0]
 8002112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002116:	f01e 0f10 	tst.w	lr, #16
 800211a:	bf08      	it	eq
 800211c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002120:	f380 8809 	msr	PSP, r0
 8002124:	f3bf 8f6f 	isb	sy
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	f3af 8000 	nop.w

08002130 <pxCurrentTCBConst>:
 8002130:	200027b8 	.word	0x200027b8

08002134 <SysTick_Handler>:
{
 8002134:	b508      	push	{r3, lr}
	__asm volatile
 8002136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800213a:	f383 8811 	msr	BASEPRI, r3
 800213e:	f3bf 8f6f 	isb	sy
 8002142:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002146:	f000 fe6d 	bl	8002e24 <xTaskIncrementTick>
 800214a:	b118      	cbz	r0, 8002154 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800214c:	4b03      	ldr	r3, [pc, #12]	; (800215c <SysTick_Handler+0x28>)
 800214e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002152:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002154:	2300      	movs	r3, #0
 8002156:	f383 8811 	msr	BASEPRI, r3
 800215a:	bd08      	pop	{r3, pc}
 800215c:	e000ed04 	.word	0xe000ed04

08002160 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002160:	4a08      	ldr	r2, [pc, #32]	; (8002184 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002162:	4909      	ldr	r1, [pc, #36]	; (8002188 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002164:	2300      	movs	r3, #0
 8002166:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002168:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800216a:	4b08      	ldr	r3, [pc, #32]	; (800218c <vPortSetupTimerInterrupt+0x2c>)
 800216c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	fbb3 f3f1 	udiv	r3, r3, r1
 8002176:	4906      	ldr	r1, [pc, #24]	; (8002190 <vPortSetupTimerInterrupt+0x30>)
 8002178:	3b01      	subs	r3, #1
 800217a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800217c:	2307      	movs	r3, #7
 800217e:	6013      	str	r3, [r2, #0]
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	e000e010 	.word	0xe000e010
 8002188:	e000e018 	.word	0xe000e018
 800218c:	20000004 	.word	0x20000004
 8002190:	e000e014 	.word	0xe000e014

08002194 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002194:	4b39      	ldr	r3, [pc, #228]	; (800227c <xPortStartScheduler+0xe8>)
 8002196:	4a3a      	ldr	r2, [pc, #232]	; (8002280 <xPortStartScheduler+0xec>)
{
 8002198:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800219a:	6819      	ldr	r1, [r3, #0]
 800219c:	4291      	cmp	r1, r2
 800219e:	d108      	bne.n	80021b2 <xPortStartScheduler+0x1e>
	__asm volatile
 80021a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a4:	f383 8811 	msr	BASEPRI, r3
 80021a8:	f3bf 8f6f 	isb	sy
 80021ac:	f3bf 8f4f 	dsb	sy
 80021b0:	e7fe      	b.n	80021b0 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4b33      	ldr	r3, [pc, #204]	; (8002284 <xPortStartScheduler+0xf0>)
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d108      	bne.n	80021cc <xPortStartScheduler+0x38>
 80021ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021be:	f383 8811 	msr	BASEPRI, r3
 80021c2:	f3bf 8f6f 	isb	sy
 80021c6:	f3bf 8f4f 	dsb	sy
 80021ca:	e7fe      	b.n	80021ca <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80021cc:	4b2e      	ldr	r3, [pc, #184]	; (8002288 <xPortStartScheduler+0xf4>)
 80021ce:	781a      	ldrb	r2, [r3, #0]
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80021d4:	22ff      	movs	r2, #255	; 0xff
 80021d6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80021d8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80021da:	4a2c      	ldr	r2, [pc, #176]	; (800228c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80021e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80021e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021ea:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80021ec:	4b28      	ldr	r3, [pc, #160]	; (8002290 <xPortStartScheduler+0xfc>)
 80021ee:	2207      	movs	r2, #7
 80021f0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80021f2:	2100      	movs	r1, #0
 80021f4:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80021f8:	0600      	lsls	r0, r0, #24
 80021fa:	f102 34ff 	add.w	r4, r2, #4294967295
 80021fe:	d40d      	bmi.n	800221c <xPortStartScheduler+0x88>
 8002200:	b101      	cbz	r1, 8002204 <xPortStartScheduler+0x70>
 8002202:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	2a03      	cmp	r2, #3
 8002208:	d011      	beq.n	800222e <xPortStartScheduler+0x9a>
 800220a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800220e:	f383 8811 	msr	BASEPRI, r3
 8002212:	f3bf 8f6f 	isb	sy
 8002216:	f3bf 8f4f 	dsb	sy
 800221a:	e7fe      	b.n	800221a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800221c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002220:	0052      	lsls	r2, r2, #1
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	f88d 2003 	strb.w	r2, [sp, #3]
 8002228:	2101      	movs	r1, #1
 800222a:	4622      	mov	r2, r4
 800222c:	e7e2      	b.n	80021f4 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800222e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002230:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002234:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002236:	9b01      	ldr	r3, [sp, #4]
 8002238:	4a13      	ldr	r2, [pc, #76]	; (8002288 <xPortStartScheduler+0xf4>)
 800223a:	b2db      	uxtb	r3, r3
 800223c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800223e:	4b15      	ldr	r3, [pc, #84]	; (8002294 <xPortStartScheduler+0x100>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002246:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800224e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002250:	f7ff ff86 	bl	8002160 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002254:	4b10      	ldr	r3, [pc, #64]	; (8002298 <xPortStartScheduler+0x104>)
 8002256:	2400      	movs	r4, #0
 8002258:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800225a:	f7ff fecb 	bl	8001ff4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800225e:	4a0f      	ldr	r2, [pc, #60]	; (800229c <xPortStartScheduler+0x108>)
 8002260:	6813      	ldr	r3, [r2, #0]
 8002262:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002266:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002268:	f7ff feb0 	bl	8001fcc <prvPortStartFirstTask>
	vTaskSwitchContext();
 800226c:	f000 fee4 	bl	8003038 <vTaskSwitchContext>
	prvTaskExitError();
 8002270:	f7ff fe8c 	bl	8001f8c <prvTaskExitError>
}
 8002274:	4620      	mov	r0, r4
 8002276:	b002      	add	sp, #8
 8002278:	bd10      	pop	{r4, pc}
 800227a:	bf00      	nop
 800227c:	e000ed00 	.word	0xe000ed00
 8002280:	410fc271 	.word	0x410fc271
 8002284:	410fc270 	.word	0x410fc270
 8002288:	e000e400 	.word	0xe000e400
 800228c:	20000088 	.word	0x20000088
 8002290:	2000008c 	.word	0x2000008c
 8002294:	e000ed20 	.word	0xe000ed20
 8002298:	20000000 	.word	0x20000000
 800229c:	e000ef34 	.word	0xe000ef34

080022a0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80022a0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80022a4:	2b0f      	cmp	r3, #15
 80022a6:	d90e      	bls.n	80022c6 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80022a8:	4a10      	ldr	r2, [pc, #64]	; (80022ec <vPortValidateInterruptPriority+0x4c>)
 80022aa:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80022ac:	4a10      	ldr	r2, [pc, #64]	; (80022f0 <vPortValidateInterruptPriority+0x50>)
 80022ae:	7812      	ldrb	r2, [r2, #0]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d908      	bls.n	80022c6 <vPortValidateInterruptPriority+0x26>
 80022b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b8:	f383 8811 	msr	BASEPRI, r3
 80022bc:	f3bf 8f6f 	isb	sy
 80022c0:	f3bf 8f4f 	dsb	sy
 80022c4:	e7fe      	b.n	80022c4 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80022c6:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <vPortValidateInterruptPriority+0x54>)
 80022c8:	4a0b      	ldr	r2, [pc, #44]	; (80022f8 <vPortValidateInterruptPriority+0x58>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d908      	bls.n	80022e8 <vPortValidateInterruptPriority+0x48>
 80022d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022da:	f383 8811 	msr	BASEPRI, r3
 80022de:	f3bf 8f6f 	isb	sy
 80022e2:	f3bf 8f4f 	dsb	sy
 80022e6:	e7fe      	b.n	80022e6 <vPortValidateInterruptPriority+0x46>
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	e000e3f0 	.word	0xe000e3f0
 80022f0:	20000088 	.word	0x20000088
 80022f4:	e000ed0c 	.word	0xe000ed0c
 80022f8:	2000008c 	.word	0x2000008c

080022fc <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80022fc:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80022fe:	4b0f      	ldr	r3, [pc, #60]	; (800233c <prvInsertBlockIntoFreeList+0x40>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	4282      	cmp	r2, r0
 8002304:	d318      	bcc.n	8002338 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002306:	685c      	ldr	r4, [r3, #4]
 8002308:	1919      	adds	r1, r3, r4
 800230a:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800230c:	bf01      	itttt	eq
 800230e:	6841      	ldreq	r1, [r0, #4]
 8002310:	4618      	moveq	r0, r3
 8002312:	1909      	addeq	r1, r1, r4
 8002314:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002316:	6844      	ldr	r4, [r0, #4]
 8002318:	1901      	adds	r1, r0, r4
 800231a:	428a      	cmp	r2, r1
 800231c:	d107      	bne.n	800232e <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800231e:	4908      	ldr	r1, [pc, #32]	; (8002340 <prvInsertBlockIntoFreeList+0x44>)
 8002320:	6809      	ldr	r1, [r1, #0]
 8002322:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002324:	bf1f      	itttt	ne
 8002326:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002328:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800232a:	1909      	addne	r1, r1, r4
 800232c:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800232e:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002330:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002332:	bf18      	it	ne
 8002334:	6018      	strne	r0, [r3, #0]
 8002336:	bd10      	pop	{r4, pc}
 8002338:	4613      	mov	r3, r2
 800233a:	e7e1      	b.n	8002300 <prvInsertBlockIntoFreeList+0x4>
 800233c:	200027b0 	.word	0x200027b0
 8002340:	20000090 	.word	0x20000090

08002344 <pvPortMalloc>:
{
 8002344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002348:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800234a:	f000 fd63 	bl	8002e14 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800234e:	493d      	ldr	r1, [pc, #244]	; (8002444 <pvPortMalloc+0x100>)
 8002350:	4d3d      	ldr	r5, [pc, #244]	; (8002448 <pvPortMalloc+0x104>)
 8002352:	680b      	ldr	r3, [r1, #0]
 8002354:	b9fb      	cbnz	r3, 8002396 <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 8002356:	4a3d      	ldr	r2, [pc, #244]	; (800244c <pvPortMalloc+0x108>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002358:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800235a:	bf1c      	itt	ne
 800235c:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800235e:	4b3c      	ldrne	r3, [pc, #240]	; (8002450 <pvPortMalloc+0x10c>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002360:	4e3c      	ldr	r6, [pc, #240]	; (8002454 <pvPortMalloc+0x110>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002362:	bf1a      	itte	ne
 8002364:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002368:	1a9b      	subne	r3, r3, r2
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800236a:	f242 7310 	movweq	r3, #10000	; 0x2710
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800236e:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8002370:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002372:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8002376:	2000      	movs	r0, #0
 8002378:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800237a:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 800237c:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800237e:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 8002380:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002382:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002384:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002386:	4b34      	ldr	r3, [pc, #208]	; (8002458 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002388:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800238a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800238c:	4b33      	ldr	r3, [pc, #204]	; (800245c <pvPortMalloc+0x118>)
 800238e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002390:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002394:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002396:	682f      	ldr	r7, [r5, #0]
 8002398:	4227      	tst	r7, r4
 800239a:	d116      	bne.n	80023ca <pvPortMalloc+0x86>
			if( xWantedSize > 0 )
 800239c:	2c00      	cmp	r4, #0
 800239e:	d041      	beq.n	8002424 <pvPortMalloc+0xe0>
				xWantedSize += xHeapStructSize;
 80023a0:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80023a4:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80023a6:	bf1c      	itt	ne
 80023a8:	f023 0307 	bicne.w	r3, r3, #7
 80023ac:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80023ae:	b163      	cbz	r3, 80023ca <pvPortMalloc+0x86>
 80023b0:	4a2a      	ldr	r2, [pc, #168]	; (800245c <pvPortMalloc+0x118>)
 80023b2:	6816      	ldr	r6, [r2, #0]
 80023b4:	42b3      	cmp	r3, r6
 80023b6:	4690      	mov	r8, r2
 80023b8:	d807      	bhi.n	80023ca <pvPortMalloc+0x86>
				pxBlock = xStart.pxNextFreeBlock;
 80023ba:	4a26      	ldr	r2, [pc, #152]	; (8002454 <pvPortMalloc+0x110>)
 80023bc:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80023be:	6868      	ldr	r0, [r5, #4]
 80023c0:	4283      	cmp	r3, r0
 80023c2:	d804      	bhi.n	80023ce <pvPortMalloc+0x8a>
				if( pxBlock != pxEnd )
 80023c4:	6809      	ldr	r1, [r1, #0]
 80023c6:	428d      	cmp	r5, r1
 80023c8:	d107      	bne.n	80023da <pvPortMalloc+0x96>
void *pvReturn = NULL;
 80023ca:	2400      	movs	r4, #0
 80023cc:	e02a      	b.n	8002424 <pvPortMalloc+0xe0>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80023ce:	682c      	ldr	r4, [r5, #0]
 80023d0:	2c00      	cmp	r4, #0
 80023d2:	d0f7      	beq.n	80023c4 <pvPortMalloc+0x80>
 80023d4:	462a      	mov	r2, r5
 80023d6:	4625      	mov	r5, r4
 80023d8:	e7f1      	b.n	80023be <pvPortMalloc+0x7a>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80023da:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80023dc:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80023de:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80023e0:	1ac2      	subs	r2, r0, r3
 80023e2:	2a10      	cmp	r2, #16
 80023e4:	d90f      	bls.n	8002406 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80023e6:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80023e8:	0741      	lsls	r1, r0, #29
 80023ea:	d008      	beq.n	80023fe <pvPortMalloc+0xba>
 80023ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f0:	f383 8811 	msr	BASEPRI, r3
 80023f4:	f3bf 8f6f 	isb	sy
 80023f8:	f3bf 8f4f 	dsb	sy
 80023fc:	e7fe      	b.n	80023fc <pvPortMalloc+0xb8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80023fe:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002400:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002402:	f7ff ff7b 	bl	80022fc <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002406:	4914      	ldr	r1, [pc, #80]	; (8002458 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002408:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800240a:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800240c:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800240e:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002410:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8002412:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002416:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800241a:	bf38      	it	cc
 800241c:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800241e:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002420:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002422:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8002424:	f000 fd90 	bl	8002f48 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002428:	0763      	lsls	r3, r4, #29
 800242a:	d008      	beq.n	800243e <pvPortMalloc+0xfa>
 800242c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002430:	f383 8811 	msr	BASEPRI, r3
 8002434:	f3bf 8f6f 	isb	sy
 8002438:	f3bf 8f4f 	dsb	sy
 800243c:	e7fe      	b.n	800243c <pvPortMalloc+0xf8>
}
 800243e:	4620      	mov	r0, r4
 8002440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002444:	20000090 	.word	0x20000090
 8002448:	200027a4 	.word	0x200027a4
 800244c:	20000094 	.word	0x20000094
 8002450:	200027a4 	.word	0x200027a4
 8002454:	200027b0 	.word	0x200027b0
 8002458:	200027ac 	.word	0x200027ac
 800245c:	200027a8 	.word	0x200027a8

08002460 <vPortFree>:
{
 8002460:	b510      	push	{r4, lr}
	if( pv != NULL )
 8002462:	4604      	mov	r4, r0
 8002464:	b370      	cbz	r0, 80024c4 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002466:	4a18      	ldr	r2, [pc, #96]	; (80024c8 <vPortFree+0x68>)
 8002468:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800246c:	6812      	ldr	r2, [r2, #0]
 800246e:	4213      	tst	r3, r2
 8002470:	d108      	bne.n	8002484 <vPortFree+0x24>
 8002472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002476:	f383 8811 	msr	BASEPRI, r3
 800247a:	f3bf 8f6f 	isb	sy
 800247e:	f3bf 8f4f 	dsb	sy
 8002482:	e7fe      	b.n	8002482 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002484:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002488:	b141      	cbz	r1, 800249c <vPortFree+0x3c>
 800248a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800248e:	f383 8811 	msr	BASEPRI, r3
 8002492:	f3bf 8f6f 	isb	sy
 8002496:	f3bf 8f4f 	dsb	sy
 800249a:	e7fe      	b.n	800249a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800249c:	ea23 0302 	bic.w	r3, r3, r2
 80024a0:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80024a4:	f000 fcb6 	bl	8002e14 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80024a8:	4a08      	ldr	r2, [pc, #32]	; (80024cc <vPortFree+0x6c>)
 80024aa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80024ae:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80024b0:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80024b4:	440b      	add	r3, r1
 80024b6:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80024b8:	f7ff ff20 	bl	80022fc <prvInsertBlockIntoFreeList>
}
 80024bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80024c0:	f000 bd42 	b.w	8002f48 <xTaskResumeAll>
 80024c4:	bd10      	pop	{r4, pc}
 80024c6:	bf00      	nop
 80024c8:	200027a4 	.word	0x200027a4
 80024cc:	200027a8 	.word	0x200027a8

080024d0 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80024d0:	b510      	push	{r4, lr}
 80024d2:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80024d4:	f7ff fdc6 	bl	8002064 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80024d8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80024da:	f7ff fde5 	bl	80020a8 <vPortExitCritical>

	return xReturn;
}
 80024de:	fab4 f084 	clz	r0, r4
 80024e2:	0940      	lsrs	r0, r0, #5
 80024e4:	bd10      	pop	{r4, pc}

080024e6 <prvCopyDataToQueue>:
{
 80024e6:	b570      	push	{r4, r5, r6, lr}
 80024e8:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80024ea:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024ec:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 80024ee:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80024f0:	b942      	cbnz	r2, 8002504 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80024f2:	6805      	ldr	r5, [r0, #0]
 80024f4:	b99d      	cbnz	r5, 800251e <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80024f6:	6840      	ldr	r0, [r0, #4]
 80024f8:	f000 fee6 	bl	80032c8 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80024fc:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80024fe:	3601      	adds	r6, #1
 8002500:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8002502:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002504:	b96d      	cbnz	r5, 8002522 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002506:	6880      	ldr	r0, [r0, #8]
 8002508:	f001 f9b2 	bl	8003870 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800250c:	68a3      	ldr	r3, [r4, #8]
 800250e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002510:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002512:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002514:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002516:	4293      	cmp	r3, r2
 8002518:	d301      	bcc.n	800251e <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800251a:	6823      	ldr	r3, [r4, #0]
 800251c:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800251e:	2000      	movs	r0, #0
 8002520:	e7ed      	b.n	80024fe <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002522:	68c0      	ldr	r0, [r0, #12]
 8002524:	f001 f9a4 	bl	8003870 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002528:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800252a:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800252c:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800252e:	425b      	negs	r3, r3
 8002530:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002532:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002534:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002536:	bf3e      	ittt	cc
 8002538:	6862      	ldrcc	r2, [r4, #4]
 800253a:	189b      	addcc	r3, r3, r2
 800253c:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800253e:	2d02      	cmp	r5, #2
 8002540:	d1ed      	bne.n	800251e <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002542:	b10e      	cbz	r6, 8002548 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8002544:	3e01      	subs	r6, #1
 8002546:	e7ea      	b.n	800251e <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8002548:	4630      	mov	r0, r6
 800254a:	e7d8      	b.n	80024fe <prvCopyDataToQueue+0x18>

0800254c <prvCopyDataFromQueue>:
{
 800254c:	4603      	mov	r3, r0
 800254e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002550:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8002552:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002554:	b162      	cbz	r2, 8002570 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002556:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002558:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800255a:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800255c:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800255e:	60d9      	str	r1, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002560:	bf24      	itt	cs
 8002562:	6819      	ldrcs	r1, [r3, #0]
 8002564:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002566:	68d9      	ldr	r1, [r3, #12]
}
 8002568:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800256c:	f001 b980 	b.w	8003870 <memcpy>
}
 8002570:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002574:	4770      	bx	lr

08002576 <prvUnlockQueue>:
{
 8002576:	b570      	push	{r4, r5, r6, lr}
 8002578:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800257a:	f7ff fd73 	bl	8002064 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800257e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002582:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8002586:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002588:	2d00      	cmp	r5, #0
 800258a:	dc14      	bgt.n	80025b6 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800258c:	23ff      	movs	r3, #255	; 0xff
 800258e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002592:	f7ff fd89 	bl	80020a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002596:	f7ff fd65 	bl	8002064 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800259a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800259e:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80025a2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80025a4:	2d00      	cmp	r5, #0
 80025a6:	dc12      	bgt.n	80025ce <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80025a8:	23ff      	movs	r3, #255	; 0xff
 80025aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80025ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80025b2:	f7ff bd79 	b.w	80020a8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0e7      	beq.n	800258c <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025bc:	4630      	mov	r0, r6
 80025be:	f000 fd8f 	bl	80030e0 <xTaskRemoveFromEventList>
 80025c2:	b108      	cbz	r0, 80025c8 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80025c4:	f000 fe16 	bl	80031f4 <vTaskMissedYield>
 80025c8:	3d01      	subs	r5, #1
 80025ca:	b26d      	sxtb	r5, r5
 80025cc:	e7dc      	b.n	8002588 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025ce:	6923      	ldr	r3, [r4, #16]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0e9      	beq.n	80025a8 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025d4:	4630      	mov	r0, r6
 80025d6:	f000 fd83 	bl	80030e0 <xTaskRemoveFromEventList>
 80025da:	b108      	cbz	r0, 80025e0 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80025dc:	f000 fe0a 	bl	80031f4 <vTaskMissedYield>
 80025e0:	3d01      	subs	r5, #1
 80025e2:	b26d      	sxtb	r5, r5
 80025e4:	e7de      	b.n	80025a4 <prvUnlockQueue+0x2e>
	...

080025e8 <xQueueGenericReset>:
{
 80025e8:	b538      	push	{r3, r4, r5, lr}
 80025ea:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80025ec:	4604      	mov	r4, r0
 80025ee:	b940      	cbnz	r0, 8002602 <xQueueGenericReset+0x1a>
 80025f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f4:	f383 8811 	msr	BASEPRI, r3
 80025f8:	f3bf 8f6f 	isb	sy
 80025fc:	f3bf 8f4f 	dsb	sy
 8002600:	e7fe      	b.n	8002600 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8002602:	f7ff fd2f 	bl	8002064 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002606:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002608:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800260a:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800260c:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800260e:	4343      	muls	r3, r0
 8002610:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002612:	1a1b      	subs	r3, r3, r0
 8002614:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002616:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002618:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800261a:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800261c:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800261e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8002620:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002624:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8002628:	b995      	cbnz	r5, 8002650 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800262a:	6923      	ldr	r3, [r4, #16]
 800262c:	b163      	cbz	r3, 8002648 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800262e:	f104 0010 	add.w	r0, r4, #16
 8002632:	f000 fd55 	bl	80030e0 <xTaskRemoveFromEventList>
 8002636:	b138      	cbz	r0, 8002648 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8002638:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <xQueueGenericReset+0x7c>)
 800263a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	f3bf 8f4f 	dsb	sy
 8002644:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8002648:	f7ff fd2e 	bl	80020a8 <vPortExitCritical>
}
 800264c:	2001      	movs	r0, #1
 800264e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002650:	f104 0010 	add.w	r0, r4, #16
 8002654:	f7ff fc58 	bl	8001f08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002658:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800265c:	f7ff fc54 	bl	8001f08 <vListInitialise>
 8002660:	e7f2      	b.n	8002648 <xQueueGenericReset+0x60>
 8002662:	bf00      	nop
 8002664:	e000ed04 	.word	0xe000ed04

08002668 <xQueueGenericCreate>:
	{
 8002668:	b570      	push	{r4, r5, r6, lr}
 800266a:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800266c:	4606      	mov	r6, r0
 800266e:	b940      	cbnz	r0, 8002682 <xQueueGenericCreate+0x1a>
 8002670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002674:	f383 8811 	msr	BASEPRI, r3
 8002678:	f3bf 8f6f 	isb	sy
 800267c:	f3bf 8f4f 	dsb	sy
 8002680:	e7fe      	b.n	8002680 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002682:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002684:	3048      	adds	r0, #72	; 0x48
 8002686:	f7ff fe5d 	bl	8002344 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800268a:	4604      	mov	r4, r0
 800268c:	b138      	cbz	r0, 800269e <xQueueGenericCreate+0x36>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800268e:	b945      	cbnz	r5, 80026a2 <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002690:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8002692:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002694:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002696:	2101      	movs	r1, #1
 8002698:	4620      	mov	r0, r4
 800269a:	f7ff ffa5 	bl	80025e8 <xQueueGenericReset>
	}
 800269e:	4620      	mov	r0, r4
 80026a0:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80026a2:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80026a6:	6003      	str	r3, [r0, #0]
 80026a8:	e7f3      	b.n	8002692 <xQueueGenericCreate+0x2a>
	...

080026ac <xQueueGenericSend>:
{
 80026ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80026b0:	4689      	mov	r9, r1
 80026b2:	9201      	str	r2, [sp, #4]
 80026b4:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80026b6:	4604      	mov	r4, r0
 80026b8:	b940      	cbnz	r0, 80026cc <xQueueGenericSend+0x20>
 80026ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026be:	f383 8811 	msr	BASEPRI, r3
 80026c2:	f3bf 8f6f 	isb	sy
 80026c6:	f3bf 8f4f 	dsb	sy
 80026ca:	e7fe      	b.n	80026ca <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026cc:	2900      	cmp	r1, #0
 80026ce:	f040 8088 	bne.w	80027e2 <xQueueGenericSend+0x136>
 80026d2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 8084 	beq.w	80027e2 <xQueueGenericSend+0x136>
 80026da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026de:	f383 8811 	msr	BASEPRI, r3
 80026e2:	f3bf 8f6f 	isb	sy
 80026e6:	f3bf 8f4f 	dsb	sy
 80026ea:	e7fe      	b.n	80026ea <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026ec:	9e01      	ldr	r6, [sp, #4]
 80026ee:	2e00      	cmp	r6, #0
 80026f0:	f000 8082 	beq.w	80027f8 <xQueueGenericSend+0x14c>
 80026f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f8:	f383 8811 	msr	BASEPRI, r3
 80026fc:	f3bf 8f6f 	isb	sy
 8002700:	f3bf 8f4f 	dsb	sy
 8002704:	e7fe      	b.n	8002704 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002706:	9d01      	ldr	r5, [sp, #4]
 8002708:	b91d      	cbnz	r5, 8002712 <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 800270a:	f7ff fccd 	bl	80020a8 <vPortExitCritical>
			return errQUEUE_FULL;
 800270e:	2000      	movs	r0, #0
 8002710:	e058      	b.n	80027c4 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8002712:	b916      	cbnz	r6, 800271a <xQueueGenericSend+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002714:	a802      	add	r0, sp, #8
 8002716:	f000 fd25 	bl	8003164 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800271a:	f7ff fcc5 	bl	80020a8 <vPortExitCritical>
		vTaskSuspendAll();
 800271e:	f000 fb79 	bl	8002e14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002722:	f7ff fc9f 	bl	8002064 <vPortEnterCritical>
 8002726:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800272a:	2bff      	cmp	r3, #255	; 0xff
 800272c:	bf08      	it	eq
 800272e:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8002732:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002736:	2bff      	cmp	r3, #255	; 0xff
 8002738:	bf08      	it	eq
 800273a:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 800273e:	f7ff fcb3 	bl	80020a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002742:	a901      	add	r1, sp, #4
 8002744:	a802      	add	r0, sp, #8
 8002746:	f000 fd19 	bl	800317c <xTaskCheckForTimeOut>
 800274a:	2800      	cmp	r0, #0
 800274c:	d143      	bne.n	80027d6 <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800274e:	f7ff fc89 	bl	8002064 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002752:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8002754:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002756:	f7ff fca7 	bl	80020a8 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800275a:	42ae      	cmp	r6, r5
 800275c:	d135      	bne.n	80027ca <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800275e:	9901      	ldr	r1, [sp, #4]
 8002760:	f104 0010 	add.w	r0, r4, #16
 8002764:	f000 fca2 	bl	80030ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002768:	4620      	mov	r0, r4
 800276a:	f7ff ff04 	bl	8002576 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800276e:	f000 fbeb 	bl	8002f48 <xTaskResumeAll>
 8002772:	b938      	cbnz	r0, 8002784 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8002774:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002778:	f8ca 3000 	str.w	r3, [sl]
 800277c:	f3bf 8f4f 	dsb	sy
 8002780:	f3bf 8f6f 	isb	sy
 8002784:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002786:	f7ff fc6d 	bl	8002064 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800278a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800278c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800278e:	429a      	cmp	r2, r3
 8002790:	d301      	bcc.n	8002796 <xQueueGenericSend+0xea>
 8002792:	2f02      	cmp	r7, #2
 8002794:	d1b7      	bne.n	8002706 <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002796:	463a      	mov	r2, r7
 8002798:	4649      	mov	r1, r9
 800279a:	4620      	mov	r0, r4
 800279c:	f7ff fea3 	bl	80024e6 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027a2:	b11b      	cbz	r3, 80027ac <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80027a8:	f000 fc9a 	bl	80030e0 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80027ac:	b138      	cbz	r0, 80027be <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 80027ae:	4b19      	ldr	r3, [pc, #100]	; (8002814 <xQueueGenericSend+0x168>)
 80027b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	f3bf 8f4f 	dsb	sy
 80027ba:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80027be:	f7ff fc73 	bl	80020a8 <vPortExitCritical>
				return pdPASS;
 80027c2:	2001      	movs	r0, #1
}
 80027c4:	b004      	add	sp, #16
 80027c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 80027ca:	4620      	mov	r0, r4
 80027cc:	f7ff fed3 	bl	8002576 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80027d0:	f000 fbba 	bl	8002f48 <xTaskResumeAll>
 80027d4:	e7d6      	b.n	8002784 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 80027d6:	4620      	mov	r0, r4
 80027d8:	f7ff fecd 	bl	8002576 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80027dc:	f000 fbb4 	bl	8002f48 <xTaskResumeAll>
 80027e0:	e795      	b.n	800270e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027e2:	2f02      	cmp	r7, #2
 80027e4:	d102      	bne.n	80027ec <xQueueGenericSend+0x140>
 80027e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d10a      	bne.n	8002802 <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027ec:	f000 fd08 	bl	8003200 <xTaskGetSchedulerState>
 80027f0:	2800      	cmp	r0, #0
 80027f2:	f43f af7b 	beq.w	80026ec <xQueueGenericSend+0x40>
 80027f6:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80027f8:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 80027fc:	f8df a014 	ldr.w	sl, [pc, #20]	; 8002814 <xQueueGenericSend+0x168>
 8002800:	e7c1      	b.n	8002786 <xQueueGenericSend+0xda>
 8002802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002806:	f383 8811 	msr	BASEPRI, r3
 800280a:	f3bf 8f6f 	isb	sy
 800280e:	f3bf 8f4f 	dsb	sy
 8002812:	e7fe      	b.n	8002812 <xQueueGenericSend+0x166>
 8002814:	e000ed04 	.word	0xe000ed04

08002818 <xQueueGiveFromISR>:
{
 8002818:	b570      	push	{r4, r5, r6, lr}
 800281a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800281c:	4604      	mov	r4, r0
 800281e:	b940      	cbnz	r0, 8002832 <xQueueGiveFromISR+0x1a>
 8002820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002824:	f383 8811 	msr	BASEPRI, r3
 8002828:	f3bf 8f6f 	isb	sy
 800282c:	f3bf 8f4f 	dsb	sy
 8002830:	e7fe      	b.n	8002830 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8002832:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002834:	b143      	cbz	r3, 8002848 <xQueueGiveFromISR+0x30>
 8002836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283a:	f383 8811 	msr	BASEPRI, r3
 800283e:	f3bf 8f6f 	isb	sy
 8002842:	f3bf 8f4f 	dsb	sy
 8002846:	e7fe      	b.n	8002846 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002848:	6803      	ldr	r3, [r0, #0]
 800284a:	b90b      	cbnz	r3, 8002850 <xQueueGiveFromISR+0x38>
 800284c:	6843      	ldr	r3, [r0, #4]
 800284e:	bb73      	cbnz	r3, 80028ae <xQueueGiveFromISR+0x96>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002850:	f7ff fd26 	bl	80022a0 <vPortValidateInterruptPriority>
	__asm volatile
 8002854:	f3ef 8611 	mrs	r6, BASEPRI
 8002858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285c:	f383 8811 	msr	BASEPRI, r3
 8002860:	f3bf 8f6f 	isb	sy
 8002864:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002868:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800286a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800286c:	429a      	cmp	r2, r3
 800286e:	d301      	bcc.n	8002874 <xQueueGiveFromISR+0x5c>
			xReturn = errQUEUE_FULL;
 8002870:	2000      	movs	r0, #0
 8002872:	e014      	b.n	800289e <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002874:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002878:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 800287a:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800287c:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	d110      	bne.n	80028a4 <xQueueGiveFromISR+0x8c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002882:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002884:	b90b      	cbnz	r3, 800288a <xQueueGiveFromISR+0x72>
			xReturn = pdPASS;
 8002886:	2001      	movs	r0, #1
 8002888:	e009      	b.n	800289e <xQueueGiveFromISR+0x86>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800288a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800288e:	f000 fc27 	bl	80030e0 <xTaskRemoveFromEventList>
 8002892:	2800      	cmp	r0, #0
 8002894:	d0f7      	beq.n	8002886 <xQueueGiveFromISR+0x6e>
							if( pxHigherPriorityTaskWoken != NULL )
 8002896:	2d00      	cmp	r5, #0
 8002898:	d0f5      	beq.n	8002886 <xQueueGiveFromISR+0x6e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800289a:	2001      	movs	r0, #1
 800289c:	6028      	str	r0, [r5, #0]
	__asm volatile
 800289e:	f386 8811 	msr	BASEPRI, r6
}
 80028a2:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80028a4:	3301      	adds	r3, #1
 80028a6:	b25b      	sxtb	r3, r3
 80028a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80028ac:	e7eb      	b.n	8002886 <xQueueGiveFromISR+0x6e>
	__asm volatile
 80028ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b2:	f383 8811 	msr	BASEPRI, r3
 80028b6:	f3bf 8f6f 	isb	sy
 80028ba:	f3bf 8f4f 	dsb	sy
 80028be:	e7fe      	b.n	80028be <xQueueGiveFromISR+0xa6>

080028c0 <xQueueSemaphoreTake>:
{
 80028c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 80028c4:	4604      	mov	r4, r0
{
 80028c6:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80028c8:	b940      	cbnz	r0, 80028dc <xQueueSemaphoreTake+0x1c>
 80028ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ce:	f383 8811 	msr	BASEPRI, r3
 80028d2:	f3bf 8f6f 	isb	sy
 80028d6:	f3bf 8f4f 	dsb	sy
 80028da:	e7fe      	b.n	80028da <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 80028dc:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80028de:	b145      	cbz	r5, 80028f2 <xQueueSemaphoreTake+0x32>
 80028e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e4:	f383 8811 	msr	BASEPRI, r3
 80028e8:	f3bf 8f6f 	isb	sy
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	e7fe      	b.n	80028f0 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028f2:	f000 fc85 	bl	8003200 <xTaskGetSchedulerState>
 80028f6:	b918      	cbnz	r0, 8002900 <xQueueSemaphoreTake+0x40>
 80028f8:	9d01      	ldr	r5, [sp, #4]
 80028fa:	2d00      	cmp	r5, #0
 80028fc:	f040 8095 	bne.w	8002a2a <xQueueSemaphoreTake+0x16a>
					portYIELD_WITHIN_API();
 8002900:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8002a3c <xQueueSemaphoreTake+0x17c>
 8002904:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8002906:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 8002908:	f7ff fbac 	bl	8002064 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800290c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800290e:	b1e3      	cbz	r3, 800294a <xQueueSemaphoreTake+0x8a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002910:	3b01      	subs	r3, #1
 8002912:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002914:	6823      	ldr	r3, [r4, #0]
 8002916:	b913      	cbnz	r3, 800291e <xQueueSemaphoreTake+0x5e>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002918:	f000 fd80 	bl	800341c <pvTaskIncrementMutexHeldCount>
 800291c:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800291e:	6923      	ldr	r3, [r4, #16]
 8002920:	b163      	cbz	r3, 800293c <xQueueSemaphoreTake+0x7c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002922:	f104 0010 	add.w	r0, r4, #16
 8002926:	f000 fbdb 	bl	80030e0 <xTaskRemoveFromEventList>
 800292a:	b138      	cbz	r0, 800293c <xQueueSemaphoreTake+0x7c>
						queueYIELD_IF_USING_PREEMPTION();
 800292c:	4b43      	ldr	r3, [pc, #268]	; (8002a3c <xQueueSemaphoreTake+0x17c>)
 800292e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	f3bf 8f4f 	dsb	sy
 8002938:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800293c:	f7ff fbb4 	bl	80020a8 <vPortExitCritical>
				return pdPASS;
 8002940:	2501      	movs	r5, #1
}
 8002942:	4628      	mov	r0, r5
 8002944:	b004      	add	sp, #16
 8002946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( xTicksToWait == ( TickType_t ) 0 )
 800294a:	9b01      	ldr	r3, [sp, #4]
 800294c:	b963      	cbnz	r3, 8002968 <xQueueSemaphoreTake+0xa8>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800294e:	b145      	cbz	r5, 8002962 <xQueueSemaphoreTake+0xa2>
 8002950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002954:	f383 8811 	msr	BASEPRI, r3
 8002958:	f3bf 8f6f 	isb	sy
 800295c:	f3bf 8f4f 	dsb	sy
 8002960:	e7fe      	b.n	8002960 <xQueueSemaphoreTake+0xa0>
					taskEXIT_CRITICAL();
 8002962:	f7ff fba1 	bl	80020a8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8002966:	e7ec      	b.n	8002942 <xQueueSemaphoreTake+0x82>
				else if( xEntryTimeSet == pdFALSE )
 8002968:	b916      	cbnz	r6, 8002970 <xQueueSemaphoreTake+0xb0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800296a:	a802      	add	r0, sp, #8
 800296c:	f000 fbfa 	bl	8003164 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8002970:	f7ff fb9a 	bl	80020a8 <vPortExitCritical>
		vTaskSuspendAll();
 8002974:	f000 fa4e 	bl	8002e14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002978:	f7ff fb74 	bl	8002064 <vPortEnterCritical>
 800297c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002980:	2bff      	cmp	r3, #255	; 0xff
 8002982:	bf08      	it	eq
 8002984:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8002988:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800298c:	2bff      	cmp	r3, #255	; 0xff
 800298e:	bf08      	it	eq
 8002990:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8002994:	f7ff fb88 	bl	80020a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002998:	a901      	add	r1, sp, #4
 800299a:	a802      	add	r0, sp, #8
 800299c:	f000 fbee 	bl	800317c <xTaskCheckForTimeOut>
 80029a0:	bb40      	cbnz	r0, 80029f4 <xQueueSemaphoreTake+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029a2:	4620      	mov	r0, r4
 80029a4:	f7ff fd94 	bl	80024d0 <prvIsQueueEmpty>
 80029a8:	b1f0      	cbz	r0, 80029e8 <xQueueSemaphoreTake+0x128>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029aa:	6823      	ldr	r3, [r4, #0]
 80029ac:	b93b      	cbnz	r3, 80029be <xQueueSemaphoreTake+0xfe>
						taskENTER_CRITICAL();
 80029ae:	f7ff fb59 	bl	8002064 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80029b2:	6860      	ldr	r0, [r4, #4]
 80029b4:	f000 fc34 	bl	8003220 <xTaskPriorityInherit>
 80029b8:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 80029ba:	f7ff fb75 	bl	80020a8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80029be:	9901      	ldr	r1, [sp, #4]
 80029c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80029c4:	f000 fb72 	bl	80030ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80029c8:	4620      	mov	r0, r4
 80029ca:	f7ff fdd4 	bl	8002576 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80029ce:	f000 fabb 	bl	8002f48 <xTaskResumeAll>
 80029d2:	b938      	cbnz	r0, 80029e4 <xQueueSemaphoreTake+0x124>
					portYIELD_WITHIN_API();
 80029d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80029d8:	f8c8 3000 	str.w	r3, [r8]
 80029dc:	f3bf 8f4f 	dsb	sy
 80029e0:	f3bf 8f6f 	isb	sy
 80029e4:	2601      	movs	r6, #1
 80029e6:	e78f      	b.n	8002908 <xQueueSemaphoreTake+0x48>
				prvUnlockQueue( pxQueue );
 80029e8:	4620      	mov	r0, r4
 80029ea:	f7ff fdc4 	bl	8002576 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029ee:	f000 faab 	bl	8002f48 <xTaskResumeAll>
 80029f2:	e7f7      	b.n	80029e4 <xQueueSemaphoreTake+0x124>
			prvUnlockQueue( pxQueue );
 80029f4:	4620      	mov	r0, r4
 80029f6:	f7ff fdbe 	bl	8002576 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029fa:	f000 faa5 	bl	8002f48 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029fe:	4620      	mov	r0, r4
 8002a00:	f7ff fd66 	bl	80024d0 <prvIsQueueEmpty>
 8002a04:	2800      	cmp	r0, #0
 8002a06:	d0ed      	beq.n	80029e4 <xQueueSemaphoreTake+0x124>
					if( xInheritanceOccurred != pdFALSE )
 8002a08:	2d00      	cmp	r5, #0
 8002a0a:	d09a      	beq.n	8002942 <xQueueSemaphoreTake+0x82>
						taskENTER_CRITICAL();
 8002a0c:	f7ff fb2a 	bl	8002064 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002a10:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002a12:	b119      	cbz	r1, 8002a1c <xQueueSemaphoreTake+0x15c>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002a14:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a16:	6819      	ldr	r1, [r3, #0]
 8002a18:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8002a1c:	6860      	ldr	r0, [r4, #4]
 8002a1e:	f000 fca3 	bl	8003368 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 8002a22:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 8002a24:	f7ff fb40 	bl	80020a8 <vPortExitCritical>
 8002a28:	e78b      	b.n	8002942 <xQueueSemaphoreTake+0x82>
 8002a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a2e:	f383 8811 	msr	BASEPRI, r3
 8002a32:	f3bf 8f6f 	isb	sy
 8002a36:	f3bf 8f4f 	dsb	sy
 8002a3a:	e7fe      	b.n	8002a3a <xQueueSemaphoreTake+0x17a>
 8002a3c:	e000ed04 	.word	0xe000ed04

08002a40 <xQueueReceiveFromISR>:
{
 8002a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a44:	4689      	mov	r9, r1
 8002a46:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8002a48:	4605      	mov	r5, r0
 8002a4a:	b940      	cbnz	r0, 8002a5e <xQueueReceiveFromISR+0x1e>
 8002a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a50:	f383 8811 	msr	BASEPRI, r3
 8002a54:	f3bf 8f6f 	isb	sy
 8002a58:	f3bf 8f4f 	dsb	sy
 8002a5c:	e7fe      	b.n	8002a5c <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a5e:	bb71      	cbnz	r1, 8002abe <xQueueReceiveFromISR+0x7e>
 8002a60:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002a62:	b363      	cbz	r3, 8002abe <xQueueReceiveFromISR+0x7e>
 8002a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a68:	f383 8811 	msr	BASEPRI, r3
 8002a6c:	f3bf 8f6f 	isb	sy
 8002a70:	f3bf 8f4f 	dsb	sy
 8002a74:	e7fe      	b.n	8002a74 <xQueueReceiveFromISR+0x34>
			const int8_t cRxLock = pxQueue->cRxLock;
 8002a76:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a7a:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8002a7c:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a7e:	4628      	mov	r0, r5
 8002a80:	f7ff fd64 	bl	800254c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a84:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 8002a86:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a88:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8002a8a:	d113      	bne.n	8002ab4 <xQueueReceiveFromISR+0x74>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a8c:	692b      	ldr	r3, [r5, #16]
 8002a8e:	b90b      	cbnz	r3, 8002a94 <xQueueReceiveFromISR+0x54>
			xReturn = pdPASS;
 8002a90:	2001      	movs	r0, #1
 8002a92:	e00b      	b.n	8002aac <xQueueReceiveFromISR+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a94:	f105 0010 	add.w	r0, r5, #16
 8002a98:	f000 fb22 	bl	80030e0 <xTaskRemoveFromEventList>
 8002a9c:	2800      	cmp	r0, #0
 8002a9e:	d0f7      	beq.n	8002a90 <xQueueReceiveFromISR+0x50>
						if( pxHigherPriorityTaskWoken != NULL )
 8002aa0:	f1b8 0f00 	cmp.w	r8, #0
 8002aa4:	d0f4      	beq.n	8002a90 <xQueueReceiveFromISR+0x50>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002aa6:	2001      	movs	r0, #1
 8002aa8:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8002aac:	f387 8811 	msr	BASEPRI, r7
}
 8002ab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002ab4:	3601      	adds	r6, #1
 8002ab6:	b276      	sxtb	r6, r6
 8002ab8:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8002abc:	e7e8      	b.n	8002a90 <xQueueReceiveFromISR+0x50>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002abe:	f7ff fbef 	bl	80022a0 <vPortValidateInterruptPriority>
	__asm volatile
 8002ac2:	f3ef 8711 	mrs	r7, BASEPRI
 8002ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aca:	f383 8811 	msr	BASEPRI, r3
 8002ace:	f3bf 8f6f 	isb	sy
 8002ad2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ad6:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ad8:	2c00      	cmp	r4, #0
 8002ada:	d1cc      	bne.n	8002a76 <xQueueReceiveFromISR+0x36>
			xReturn = pdFAIL;
 8002adc:	4620      	mov	r0, r4
 8002ade:	e7e5      	b.n	8002aac <xQueueReceiveFromISR+0x6c>

08002ae0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ae0:	4a06      	ldr	r2, [pc, #24]	; (8002afc <prvResetNextTaskUnblockTime+0x1c>)
 8002ae2:	6813      	ldr	r3, [r2, #0]
 8002ae4:	6819      	ldr	r1, [r3, #0]
 8002ae6:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <prvResetNextTaskUnblockTime+0x20>)
 8002ae8:	b919      	cbnz	r1, 8002af2 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002aea:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002af2:	6812      	ldr	r2, [r2, #0]
 8002af4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002af6:	68d2      	ldr	r2, [r2, #12]
 8002af8:	6852      	ldr	r2, [r2, #4]
 8002afa:	e7f8      	b.n	8002aee <prvResetNextTaskUnblockTime+0xe>
 8002afc:	200027bc 	.word	0x200027bc
 8002b00:	20002894 	.word	0x20002894

08002b04 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002b06:	4b1b      	ldr	r3, [pc, #108]	; (8002b74 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002b08:	4e1b      	ldr	r6, [pc, #108]	; (8002b78 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8002b0a:	681d      	ldr	r5, [r3, #0]
{
 8002b0c:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002b0e:	6830      	ldr	r0, [r6, #0]
 8002b10:	3004      	adds	r0, #4
{
 8002b12:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002b14:	f7ff fa29 	bl	8001f6a <uxListRemove>
 8002b18:	4633      	mov	r3, r6
 8002b1a:	b940      	cbnz	r0, 8002b2e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002b1c:	6831      	ldr	r1, [r6, #0]
 8002b1e:	4e17      	ldr	r6, [pc, #92]	; (8002b7c <prvAddCurrentTaskToDelayedList+0x78>)
 8002b20:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002b22:	6832      	ldr	r2, [r6, #0]
 8002b24:	2001      	movs	r0, #1
 8002b26:	4088      	lsls	r0, r1
 8002b28:	ea22 0200 	bic.w	r2, r2, r0
 8002b2c:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002b2e:	1c62      	adds	r2, r4, #1
 8002b30:	d107      	bne.n	8002b42 <prvAddCurrentTaskToDelayedList+0x3e>
 8002b32:	b137      	cbz	r7, 8002b42 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b34:	6819      	ldr	r1, [r3, #0]
 8002b36:	4812      	ldr	r0, [pc, #72]	; (8002b80 <prvAddCurrentTaskToDelayedList+0x7c>)
 8002b38:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002b3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b3e:	f7ff b9f1 	b.w	8001f24 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002b42:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002b44:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8002b46:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002b48:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8002b4a:	d907      	bls.n	8002b5c <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b4c:	4a0d      	ldr	r2, [pc, #52]	; (8002b84 <prvAddCurrentTaskToDelayedList+0x80>)
 8002b4e:	6810      	ldr	r0, [r2, #0]
 8002b50:	6819      	ldr	r1, [r3, #0]
}
 8002b52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b56:	3104      	adds	r1, #4
 8002b58:	f7ff b9f0 	b.w	8001f3c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b5c:	4a0a      	ldr	r2, [pc, #40]	; (8002b88 <prvAddCurrentTaskToDelayedList+0x84>)
 8002b5e:	6810      	ldr	r0, [r2, #0]
 8002b60:	6819      	ldr	r1, [r3, #0]
 8002b62:	3104      	adds	r1, #4
 8002b64:	f7ff f9ea 	bl	8001f3c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002b68:	4b08      	ldr	r3, [pc, #32]	; (8002b8c <prvAddCurrentTaskToDelayedList+0x88>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8002b6e:	bf38      	it	cc
 8002b70:	601c      	strcc	r4, [r3, #0]
 8002b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b74:	200028dc 	.word	0x200028dc
 8002b78:	200027b8 	.word	0x200027b8
 8002b7c:	20002864 	.word	0x20002864
 8002b80:	200028b4 	.word	0x200028b4
 8002b84:	200027c0 	.word	0x200027c0
 8002b88:	200027bc 	.word	0x200027bc
 8002b8c:	20002894 	.word	0x20002894

08002b90 <prvIdleTask>:
{
 8002b90:	b580      	push	{r7, lr}
				taskYIELD();
 8002b92:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8002bf8 <prvIdleTask+0x68>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002b96:	4f14      	ldr	r7, [pc, #80]	; (8002be8 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b98:	4c14      	ldr	r4, [pc, #80]	; (8002bec <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 8002b9a:	4e15      	ldr	r6, [pc, #84]	; (8002bf0 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b9c:	6823      	ldr	r3, [r4, #0]
 8002b9e:	b963      	cbnz	r3, 8002bba <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002ba0:	4b14      	ldr	r3, [pc, #80]	; (8002bf4 <prvIdleTask+0x64>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d9f8      	bls.n	8002b9a <prvIdleTask+0xa>
				taskYIELD();
 8002ba8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002bac:	f8c8 3000 	str.w	r3, [r8]
 8002bb0:	f3bf 8f4f 	dsb	sy
 8002bb4:	f3bf 8f6f 	isb	sy
 8002bb8:	e7ee      	b.n	8002b98 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8002bba:	f7ff fa53 	bl	8002064 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002bc2:	1d28      	adds	r0, r5, #4
 8002bc4:	f7ff f9d1 	bl	8001f6a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002bc8:	6833      	ldr	r3, [r6, #0]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002bce:	6823      	ldr	r3, [r4, #0]
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8002bd4:	f7ff fa68 	bl	80020a8 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8002bd8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002bda:	f7ff fc41 	bl	8002460 <vPortFree>
			vPortFree( pxTCB );
 8002bde:	4628      	mov	r0, r5
 8002be0:	f7ff fc3e 	bl	8002460 <vPortFree>
 8002be4:	e7da      	b.n	8002b9c <prvIdleTask+0xc>
 8002be6:	bf00      	nop
 8002be8:	200028c8 	.word	0x200028c8
 8002bec:	20002854 	.word	0x20002854
 8002bf0:	20002850 	.word	0x20002850
 8002bf4:	200027c4 	.word	0x200027c4
 8002bf8:	e000ed04 	.word	0xe000ed04

08002bfc <xTaskCreate>:
	{
 8002bfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c00:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8002c04:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c06:	4650      	mov	r0, sl
	{
 8002c08:	460f      	mov	r7, r1
 8002c0a:	4699      	mov	r9, r3
 8002c0c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c0e:	f7ff fb99 	bl	8002344 <pvPortMalloc>
			if( pxStack != NULL )
 8002c12:	4605      	mov	r5, r0
 8002c14:	2800      	cmp	r0, #0
 8002c16:	f000 8096 	beq.w	8002d46 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002c1a:	2054      	movs	r0, #84	; 0x54
 8002c1c:	f7ff fb92 	bl	8002344 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002c20:	4604      	mov	r4, r0
 8002c22:	2800      	cmp	r0, #0
 8002c24:	f000 808c 	beq.w	8002d40 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002c28:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8002c2c:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002c2e:	4455      	add	r5, sl
 8002c30:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002c32:	f025 0a07 	bic.w	sl, r5, #7
 8002c36:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8002c3a:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c3c:	7859      	ldrb	r1, [r3, #1]
 8002c3e:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8002c42:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002c46:	b109      	cbz	r1, 8002c4c <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c48:	42bb      	cmp	r3, r7
 8002c4a:	d1f7      	bne.n	8002c3c <xTaskCreate+0x40>
 8002c4c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002c4e:	2d06      	cmp	r5, #6
 8002c50:	bf28      	it	cs
 8002c52:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c54:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c58:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8002c5a:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002c5c:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c5e:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c60:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8002c64:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c68:	f7ff f959 	bl	8001f1e <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c6c:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c70:	f104 0018 	add.w	r0, r4, #24
 8002c74:	f7ff f953 	bl	8001f1e <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002c78:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c7c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c7e:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c80:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002c82:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c86:	464a      	mov	r2, r9
 8002c88:	4641      	mov	r1, r8
 8002c8a:	4650      	mov	r0, sl
 8002c8c:	f7ff f9bc 	bl	8002008 <pxPortInitialiseStack>
 8002c90:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8002c92:	b106      	cbz	r6, 8002c96 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c94:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8002c96:	f7ff f9e5 	bl	8002064 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8002c9a:	4b32      	ldr	r3, [pc, #200]	; (8002d64 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8002c9c:	4e32      	ldr	r6, [pc, #200]	; (8002d68 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8002d94 <xTaskCreate+0x198>
 8002ca4:	3201      	adds	r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002ca8:	6835      	ldr	r5, [r6, #0]
 8002caa:	2d00      	cmp	r5, #0
 8002cac:	d14e      	bne.n	8002d4c <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8002cae:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d11d      	bne.n	8002cf2 <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002cb6:	eb08 0005 	add.w	r0, r8, r5
 8002cba:	3514      	adds	r5, #20
 8002cbc:	f7ff f924 	bl	8001f08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002cc0:	2d8c      	cmp	r5, #140	; 0x8c
 8002cc2:	d1f8      	bne.n	8002cb6 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8002cc4:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8002d98 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8002cc8:	4d28      	ldr	r5, [pc, #160]	; (8002d6c <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8002cca:	4648      	mov	r0, r9
 8002ccc:	f7ff f91c 	bl	8001f08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002cd0:	4628      	mov	r0, r5
 8002cd2:	f7ff f919 	bl	8001f08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002cd6:	4826      	ldr	r0, [pc, #152]	; (8002d70 <xTaskCreate+0x174>)
 8002cd8:	f7ff f916 	bl	8001f08 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8002cdc:	4825      	ldr	r0, [pc, #148]	; (8002d74 <xTaskCreate+0x178>)
 8002cde:	f7ff f913 	bl	8001f08 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8002ce2:	4825      	ldr	r0, [pc, #148]	; (8002d78 <xTaskCreate+0x17c>)
 8002ce4:	f7ff f910 	bl	8001f08 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8002ce8:	4b24      	ldr	r3, [pc, #144]	; (8002d7c <xTaskCreate+0x180>)
 8002cea:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002cee:	4b24      	ldr	r3, [pc, #144]	; (8002d80 <xTaskCreate+0x184>)
 8002cf0:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8002cf2:	4a24      	ldr	r2, [pc, #144]	; (8002d84 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8002cf4:	4924      	ldr	r1, [pc, #144]	; (8002d88 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8002cf6:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002cf8:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002cfe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002d00:	2501      	movs	r5, #1
 8002d02:	fa05 f302 	lsl.w	r3, r5, r2
 8002d06:	4303      	orrs	r3, r0
 8002d08:	2014      	movs	r0, #20
 8002d0a:	600b      	str	r3, [r1, #0]
 8002d0c:	fb00 8002 	mla	r0, r0, r2, r8
 8002d10:	4639      	mov	r1, r7
 8002d12:	f7ff f907 	bl	8001f24 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002d16:	f7ff f9c7 	bl	80020a8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002d1a:	4b1c      	ldr	r3, [pc, #112]	; (8002d8c <xTaskCreate+0x190>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	b163      	cbz	r3, 8002d3a <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d20:	6833      	ldr	r3, [r6, #0]
 8002d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d207      	bcs.n	8002d3a <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8002d2a:	4b19      	ldr	r3, [pc, #100]	; (8002d90 <xTaskCreate+0x194>)
 8002d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	f3bf 8f4f 	dsb	sy
 8002d36:	f3bf 8f6f 	isb	sy
	}
 8002d3a:	4628      	mov	r0, r5
 8002d3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8002d40:	4628      	mov	r0, r5
 8002d42:	f7ff fb8d 	bl	8002460 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d46:	f04f 35ff 	mov.w	r5, #4294967295
 8002d4a:	e7f6      	b.n	8002d3a <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8002d4c:	4b0f      	ldr	r3, [pc, #60]	; (8002d8c <xTaskCreate+0x190>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1ce      	bne.n	8002cf2 <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d54:	6833      	ldr	r3, [r6, #0]
 8002d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002d5a:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002d5c:	bf98      	it	ls
 8002d5e:	6034      	strls	r4, [r6, #0]
 8002d60:	e7c7      	b.n	8002cf2 <xTaskCreate+0xf6>
 8002d62:	bf00      	nop
 8002d64:	20002850 	.word	0x20002850
 8002d68:	200027b8 	.word	0x200027b8
 8002d6c:	2000287c 	.word	0x2000287c
 8002d70:	2000289c 	.word	0x2000289c
 8002d74:	200028c8 	.word	0x200028c8
 8002d78:	200028b4 	.word	0x200028b4
 8002d7c:	200027bc 	.word	0x200027bc
 8002d80:	200027c0 	.word	0x200027c0
 8002d84:	20002860 	.word	0x20002860
 8002d88:	20002864 	.word	0x20002864
 8002d8c:	200028b0 	.word	0x200028b0
 8002d90:	e000ed04 	.word	0xe000ed04
 8002d94:	200027c4 	.word	0x200027c4
 8002d98:	20002868 	.word	0x20002868

08002d9c <vTaskStartScheduler>:
{
 8002d9c:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8002d9e:	4b17      	ldr	r3, [pc, #92]	; (8002dfc <vTaskStartScheduler+0x60>)
 8002da0:	9301      	str	r3, [sp, #4]
 8002da2:	2400      	movs	r4, #0
 8002da4:	9400      	str	r4, [sp, #0]
 8002da6:	4623      	mov	r3, r4
 8002da8:	2280      	movs	r2, #128	; 0x80
 8002daa:	4915      	ldr	r1, [pc, #84]	; (8002e00 <vTaskStartScheduler+0x64>)
 8002dac:	4815      	ldr	r0, [pc, #84]	; (8002e04 <vTaskStartScheduler+0x68>)
 8002dae:	f7ff ff25 	bl	8002bfc <xTaskCreate>
	if( xReturn == pdPASS )
 8002db2:	2801      	cmp	r0, #1
 8002db4:	d114      	bne.n	8002de0 <vTaskStartScheduler+0x44>
	__asm volatile
 8002db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dba:	f383 8811 	msr	BASEPRI, r3
 8002dbe:	f3bf 8f6f 	isb	sy
 8002dc2:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8002dc6:	4b10      	ldr	r3, [pc, #64]	; (8002e08 <vTaskStartScheduler+0x6c>)
 8002dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dcc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002dce:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <vTaskStartScheduler+0x70>)
 8002dd0:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002dd2:	4b0f      	ldr	r3, [pc, #60]	; (8002e10 <vTaskStartScheduler+0x74>)
 8002dd4:	601c      	str	r4, [r3, #0]
}
 8002dd6:	b002      	add	sp, #8
 8002dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8002ddc:	f7ff b9da 	b.w	8002194 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002de0:	3001      	adds	r0, #1
 8002de2:	d108      	bne.n	8002df6 <vTaskStartScheduler+0x5a>
 8002de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de8:	f383 8811 	msr	BASEPRI, r3
 8002dec:	f3bf 8f6f 	isb	sy
 8002df0:	f3bf 8f4f 	dsb	sy
 8002df4:	e7fe      	b.n	8002df4 <vTaskStartScheduler+0x58>
}
 8002df6:	b002      	add	sp, #8
 8002df8:	bd10      	pop	{r4, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20002890 	.word	0x20002890
 8002e00:	08004745 	.word	0x08004745
 8002e04:	08002b91 	.word	0x08002b91
 8002e08:	20002894 	.word	0x20002894
 8002e0c:	200028b0 	.word	0x200028b0
 8002e10:	200028dc 	.word	0x200028dc

08002e14 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002e14:	4a02      	ldr	r2, [pc, #8]	; (8002e20 <vTaskSuspendAll+0xc>)
 8002e16:	6813      	ldr	r3, [r2, #0]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	6013      	str	r3, [r2, #0]
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	2000285c 	.word	0x2000285c

08002e24 <xTaskIncrementTick>:
{
 8002e24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e28:	4b3c      	ldr	r3, [pc, #240]	; (8002f1c <xTaskIncrementTick+0xf8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d153      	bne.n	8002ed8 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e30:	4b3b      	ldr	r3, [pc, #236]	; (8002f20 <xTaskIncrementTick+0xfc>)
 8002e32:	681c      	ldr	r4, [r3, #0]
 8002e34:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8002e36:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e38:	b9bc      	cbnz	r4, 8002e6a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8002e3a:	4b3a      	ldr	r3, [pc, #232]	; (8002f24 <xTaskIncrementTick+0x100>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	6812      	ldr	r2, [r2, #0]
 8002e40:	b142      	cbz	r2, 8002e54 <xTaskIncrementTick+0x30>
 8002e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e46:	f383 8811 	msr	BASEPRI, r3
 8002e4a:	f3bf 8f6f 	isb	sy
 8002e4e:	f3bf 8f4f 	dsb	sy
 8002e52:	e7fe      	b.n	8002e52 <xTaskIncrementTick+0x2e>
 8002e54:	4a34      	ldr	r2, [pc, #208]	; (8002f28 <xTaskIncrementTick+0x104>)
 8002e56:	6819      	ldr	r1, [r3, #0]
 8002e58:	6810      	ldr	r0, [r2, #0]
 8002e5a:	6018      	str	r0, [r3, #0]
 8002e5c:	6011      	str	r1, [r2, #0]
 8002e5e:	4a33      	ldr	r2, [pc, #204]	; (8002f2c <xTaskIncrementTick+0x108>)
 8002e60:	6813      	ldr	r3, [r2, #0]
 8002e62:	3301      	adds	r3, #1
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	f7ff fe3b 	bl	8002ae0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002e6a:	4d31      	ldr	r5, [pc, #196]	; (8002f30 <xTaskIncrementTick+0x10c>)
 8002e6c:	4f31      	ldr	r7, [pc, #196]	; (8002f34 <xTaskIncrementTick+0x110>)
 8002e6e:	682b      	ldr	r3, [r5, #0]
 8002e70:	429c      	cmp	r4, r3
 8002e72:	f04f 0b00 	mov.w	fp, #0
 8002e76:	d33e      	bcc.n	8002ef6 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e78:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002f24 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8002e7c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8002f44 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e80:	f8d8 2000 	ldr.w	r2, [r8]
 8002e84:	6812      	ldr	r2, [r2, #0]
 8002e86:	bb72      	cbnz	r2, 8002ee6 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e88:	f04f 32ff 	mov.w	r2, #4294967295
 8002e8c:	602a      	str	r2, [r5, #0]
					break;
 8002e8e:	e032      	b.n	8002ef6 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e90:	f106 0a04 	add.w	sl, r6, #4
 8002e94:	4650      	mov	r0, sl
 8002e96:	f7ff f868 	bl	8001f6a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e9a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8002e9c:	b119      	cbz	r1, 8002ea6 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e9e:	f106 0018 	add.w	r0, r6, #24
 8002ea2:	f7ff f862 	bl	8001f6a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002ea6:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002ea8:	f8d9 3000 	ldr.w	r3, [r9]
 8002eac:	2201      	movs	r2, #1
 8002eae:	fa02 f100 	lsl.w	r1, r2, r0
 8002eb2:	4319      	orrs	r1, r3
 8002eb4:	4b20      	ldr	r3, [pc, #128]	; (8002f38 <xTaskIncrementTick+0x114>)
 8002eb6:	f8c9 1000 	str.w	r1, [r9]
 8002eba:	f04f 0e14 	mov.w	lr, #20
 8002ebe:	4651      	mov	r1, sl
 8002ec0:	fb0e 3000 	mla	r0, lr, r0, r3
 8002ec4:	f7ff f82e 	bl	8001f24 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ec8:	6838      	ldr	r0, [r7, #0]
 8002eca:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002ecc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8002ece:	4291      	cmp	r1, r2
 8002ed0:	bf28      	it	cs
 8002ed2:	f04f 0b01 	movcs.w	fp, #1
 8002ed6:	e7d3      	b.n	8002e80 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8002ed8:	4a18      	ldr	r2, [pc, #96]	; (8002f3c <xTaskIncrementTick+0x118>)
 8002eda:	6813      	ldr	r3, [r2, #0]
 8002edc:	3301      	adds	r3, #1
 8002ede:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8002ee0:	f04f 0b00 	mov.w	fp, #0
 8002ee4:	e011      	b.n	8002f0a <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002ee6:	f8d8 2000 	ldr.w	r2, [r8]
 8002eea:	68d2      	ldr	r2, [r2, #12]
 8002eec:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002eee:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8002ef0:	428c      	cmp	r4, r1
 8002ef2:	d2cd      	bcs.n	8002e90 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8002ef4:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	4b0f      	ldr	r3, [pc, #60]	; (8002f38 <xTaskIncrementTick+0x114>)
 8002efa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002efc:	2214      	movs	r2, #20
 8002efe:	434a      	muls	r2, r1
 8002f00:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8002f02:	2a02      	cmp	r2, #2
 8002f04:	bf28      	it	cs
 8002f06:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8002f0a:	4a0d      	ldr	r2, [pc, #52]	; (8002f40 <xTaskIncrementTick+0x11c>)
 8002f0c:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8002f0e:	2a00      	cmp	r2, #0
 8002f10:	bf18      	it	ne
 8002f12:	f04f 0b01 	movne.w	fp, #1
}
 8002f16:	4658      	mov	r0, fp
 8002f18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f1c:	2000285c 	.word	0x2000285c
 8002f20:	200028dc 	.word	0x200028dc
 8002f24:	200027bc 	.word	0x200027bc
 8002f28:	200027c0 	.word	0x200027c0
 8002f2c:	20002898 	.word	0x20002898
 8002f30:	20002894 	.word	0x20002894
 8002f34:	200027b8 	.word	0x200027b8
 8002f38:	200027c4 	.word	0x200027c4
 8002f3c:	20002858 	.word	0x20002858
 8002f40:	200028e0 	.word	0x200028e0
 8002f44:	20002864 	.word	0x20002864

08002f48 <xTaskResumeAll>:
{
 8002f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8002f4c:	4c31      	ldr	r4, [pc, #196]	; (8003014 <xTaskResumeAll+0xcc>)
 8002f4e:	6823      	ldr	r3, [r4, #0]
 8002f50:	b943      	cbnz	r3, 8002f64 <xTaskResumeAll+0x1c>
 8002f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f56:	f383 8811 	msr	BASEPRI, r3
 8002f5a:	f3bf 8f6f 	isb	sy
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	e7fe      	b.n	8002f62 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8002f64:	f7ff f87e 	bl	8002064 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002f68:	6823      	ldr	r3, [r4, #0]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f6e:	6824      	ldr	r4, [r4, #0]
 8002f70:	b12c      	cbz	r4, 8002f7e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8002f72:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002f74:	f7ff f898 	bl	80020a8 <vPortExitCritical>
}
 8002f78:	4620      	mov	r0, r4
 8002f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f7e:	4b26      	ldr	r3, [pc, #152]	; (8003018 <xTaskResumeAll+0xd0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0f5      	beq.n	8002f72 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f86:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8003030 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8002f8a:	4f24      	ldr	r7, [pc, #144]	; (800301c <xTaskResumeAll+0xd4>)
 8002f8c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003034 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f90:	f8d9 3000 	ldr.w	r3, [r9]
 8002f94:	b9e3      	cbnz	r3, 8002fd0 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8002f96:	b10c      	cbz	r4, 8002f9c <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8002f98:	f7ff fda2 	bl	8002ae0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002f9c:	4d20      	ldr	r5, [pc, #128]	; (8003020 <xTaskResumeAll+0xd8>)
 8002f9e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002fa0:	b144      	cbz	r4, 8002fb4 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8002fa2:	4e20      	ldr	r6, [pc, #128]	; (8003024 <xTaskResumeAll+0xdc>)
 8002fa4:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8002fa6:	f7ff ff3d 	bl	8002e24 <xTaskIncrementTick>
 8002faa:	b100      	cbz	r0, 8002fae <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8002fac:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002fae:	3c01      	subs	r4, #1
 8002fb0:	d1f9      	bne.n	8002fa6 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8002fb2:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8002fb4:	4b1b      	ldr	r3, [pc, #108]	; (8003024 <xTaskResumeAll+0xdc>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0da      	beq.n	8002f72 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8002fbc:	4b1a      	ldr	r3, [pc, #104]	; (8003028 <xTaskResumeAll+0xe0>)
 8002fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002fcc:	2401      	movs	r4, #1
 8002fce:	e7d1      	b.n	8002f74 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002fd0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8002fd4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fd6:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fd8:	f104 0018 	add.w	r0, r4, #24
 8002fdc:	f7fe ffc5 	bl	8001f6a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fe0:	4630      	mov	r0, r6
 8002fe2:	f7fe ffc2 	bl	8001f6a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002fe6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002fe8:	6839      	ldr	r1, [r7, #0]
 8002fea:	2501      	movs	r5, #1
 8002fec:	fa05 f302 	lsl.w	r3, r5, r2
 8002ff0:	2014      	movs	r0, #20
 8002ff2:	430b      	orrs	r3, r1
 8002ff4:	fb00 8002 	mla	r0, r0, r2, r8
 8002ff8:	4631      	mov	r1, r6
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	f7fe ff92 	bl	8001f24 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003000:	4b0a      	ldr	r3, [pc, #40]	; (800302c <xTaskResumeAll+0xe4>)
 8003002:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003008:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 800300a:	bf24      	itt	cs
 800300c:	4b05      	ldrcs	r3, [pc, #20]	; (8003024 <xTaskResumeAll+0xdc>)
 800300e:	601d      	strcs	r5, [r3, #0]
 8003010:	e7be      	b.n	8002f90 <xTaskResumeAll+0x48>
 8003012:	bf00      	nop
 8003014:	2000285c 	.word	0x2000285c
 8003018:	20002850 	.word	0x20002850
 800301c:	20002864 	.word	0x20002864
 8003020:	20002858 	.word	0x20002858
 8003024:	200028e0 	.word	0x200028e0
 8003028:	e000ed04 	.word	0xe000ed04
 800302c:	200027b8 	.word	0x200027b8
 8003030:	2000289c 	.word	0x2000289c
 8003034:	200027c4 	.word	0x200027c4

08003038 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003038:	4b17      	ldr	r3, [pc, #92]	; (8003098 <vTaskSwitchContext+0x60>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	4b17      	ldr	r3, [pc, #92]	; (800309c <vTaskSwitchContext+0x64>)
{
 800303e:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003040:	b112      	cbz	r2, 8003048 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8003042:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8003048:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800304a:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <vTaskSwitchContext+0x68>)
 800304c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800304e:	fab3 f383 	clz	r3, r3
 8003052:	b2db      	uxtb	r3, r3
 8003054:	f1c3 031f 	rsb	r3, r3, #31
 8003058:	2214      	movs	r2, #20
 800305a:	4912      	ldr	r1, [pc, #72]	; (80030a4 <vTaskSwitchContext+0x6c>)
 800305c:	435a      	muls	r2, r3
 800305e:	1888      	adds	r0, r1, r2
 8003060:	588c      	ldr	r4, [r1, r2]
 8003062:	b944      	cbnz	r4, 8003076 <vTaskSwitchContext+0x3e>
	__asm volatile
 8003064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003068:	f383 8811 	msr	BASEPRI, r3
 800306c:	f3bf 8f6f 	isb	sy
 8003070:	f3bf 8f4f 	dsb	sy
 8003074:	e7fe      	b.n	8003074 <vTaskSwitchContext+0x3c>
 8003076:	6844      	ldr	r4, [r0, #4]
 8003078:	3208      	adds	r2, #8
 800307a:	6864      	ldr	r4, [r4, #4]
 800307c:	6044      	str	r4, [r0, #4]
 800307e:	440a      	add	r2, r1
 8003080:	4294      	cmp	r4, r2
 8003082:	bf04      	itt	eq
 8003084:	6862      	ldreq	r2, [r4, #4]
 8003086:	6042      	streq	r2, [r0, #4]
 8003088:	2214      	movs	r2, #20
 800308a:	fb02 1303 	mla	r3, r2, r3, r1
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <vTaskSwitchContext+0x70>)
 8003094:	e7d6      	b.n	8003044 <vTaskSwitchContext+0xc>
 8003096:	bf00      	nop
 8003098:	2000285c 	.word	0x2000285c
 800309c:	200028e0 	.word	0x200028e0
 80030a0:	20002864 	.word	0x20002864
 80030a4:	200027c4 	.word	0x200027c4
 80030a8:	200027b8 	.word	0x200027b8

080030ac <vTaskPlaceOnEventList>:
{
 80030ac:	b510      	push	{r4, lr}
 80030ae:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80030b0:	b940      	cbnz	r0, 80030c4 <vTaskPlaceOnEventList+0x18>
 80030b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b6:	f383 8811 	msr	BASEPRI, r3
 80030ba:	f3bf 8f6f 	isb	sy
 80030be:	f3bf 8f4f 	dsb	sy
 80030c2:	e7fe      	b.n	80030c2 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80030c4:	4b05      	ldr	r3, [pc, #20]	; (80030dc <vTaskPlaceOnEventList+0x30>)
 80030c6:	6819      	ldr	r1, [r3, #0]
 80030c8:	3118      	adds	r1, #24
 80030ca:	f7fe ff37 	bl	8001f3c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80030ce:	4620      	mov	r0, r4
 80030d0:	2101      	movs	r1, #1
}
 80030d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80030d6:	f7ff bd15 	b.w	8002b04 <prvAddCurrentTaskToDelayedList>
 80030da:	bf00      	nop
 80030dc:	200027b8 	.word	0x200027b8

080030e0 <xTaskRemoveFromEventList>:
{
 80030e0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80030e2:	68c3      	ldr	r3, [r0, #12]
 80030e4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80030e6:	b944      	cbnz	r4, 80030fa <xTaskRemoveFromEventList+0x1a>
 80030e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ec:	f383 8811 	msr	BASEPRI, r3
 80030f0:	f3bf 8f6f 	isb	sy
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	e7fe      	b.n	80030f8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80030fa:	f104 0518 	add.w	r5, r4, #24
 80030fe:	4628      	mov	r0, r5
 8003100:	f7fe ff33 	bl	8001f6a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003104:	4b11      	ldr	r3, [pc, #68]	; (800314c <xTaskRemoveFromEventList+0x6c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	b9e3      	cbnz	r3, 8003144 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800310a:	1d25      	adds	r5, r4, #4
 800310c:	4628      	mov	r0, r5
 800310e:	f7fe ff2c 	bl	8001f6a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003112:	490f      	ldr	r1, [pc, #60]	; (8003150 <xTaskRemoveFromEventList+0x70>)
 8003114:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003116:	6808      	ldr	r0, [r1, #0]
 8003118:	2301      	movs	r3, #1
 800311a:	4093      	lsls	r3, r2
 800311c:	4303      	orrs	r3, r0
 800311e:	600b      	str	r3, [r1, #0]
 8003120:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <xTaskRemoveFromEventList+0x74>)
 8003122:	2014      	movs	r0, #20
 8003124:	4629      	mov	r1, r5
 8003126:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800312a:	f7fe fefb 	bl	8001f24 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800312e:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <xTaskRemoveFromEventList+0x78>)
 8003130:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003136:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8003138:	bf83      	ittte	hi
 800313a:	4b08      	ldrhi	r3, [pc, #32]	; (800315c <xTaskRemoveFromEventList+0x7c>)
 800313c:	2001      	movhi	r0, #1
 800313e:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8003140:	2000      	movls	r0, #0
}
 8003142:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003144:	4629      	mov	r1, r5
 8003146:	4806      	ldr	r0, [pc, #24]	; (8003160 <xTaskRemoveFromEventList+0x80>)
 8003148:	e7ef      	b.n	800312a <xTaskRemoveFromEventList+0x4a>
 800314a:	bf00      	nop
 800314c:	2000285c 	.word	0x2000285c
 8003150:	20002864 	.word	0x20002864
 8003154:	200027c4 	.word	0x200027c4
 8003158:	200027b8 	.word	0x200027b8
 800315c:	200028e0 	.word	0x200028e0
 8003160:	2000289c 	.word	0x2000289c

08003164 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003164:	4b03      	ldr	r3, [pc, #12]	; (8003174 <vTaskInternalSetTimeOutState+0x10>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800316a:	4b03      	ldr	r3, [pc, #12]	; (8003178 <vTaskInternalSetTimeOutState+0x14>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6043      	str	r3, [r0, #4]
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	20002898 	.word	0x20002898
 8003178:	200028dc 	.word	0x200028dc

0800317c <xTaskCheckForTimeOut>:
{
 800317c:	b570      	push	{r4, r5, r6, lr}
 800317e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8003180:	4605      	mov	r5, r0
 8003182:	b940      	cbnz	r0, 8003196 <xTaskCheckForTimeOut+0x1a>
 8003184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003188:	f383 8811 	msr	BASEPRI, r3
 800318c:	f3bf 8f6f 	isb	sy
 8003190:	f3bf 8f4f 	dsb	sy
 8003194:	e7fe      	b.n	8003194 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8003196:	b941      	cbnz	r1, 80031aa <xTaskCheckForTimeOut+0x2e>
 8003198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319c:	f383 8811 	msr	BASEPRI, r3
 80031a0:	f3bf 8f6f 	isb	sy
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	e7fe      	b.n	80031a8 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80031aa:	f7fe ff5b 	bl	8002064 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80031ae:	4b0f      	ldr	r3, [pc, #60]	; (80031ec <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80031b0:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 80031b2:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80031b4:	6823      	ldr	r3, [r4, #0]
 80031b6:	1c58      	adds	r0, r3, #1
 80031b8:	d00e      	beq.n	80031d8 <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80031ba:	480d      	ldr	r0, [pc, #52]	; (80031f0 <xTaskCheckForTimeOut+0x74>)
 80031bc:	682e      	ldr	r6, [r5, #0]
 80031be:	6800      	ldr	r0, [r0, #0]
 80031c0:	4286      	cmp	r6, r0
 80031c2:	d001      	beq.n	80031c8 <xTaskCheckForTimeOut+0x4c>
 80031c4:	428a      	cmp	r2, r1
 80031c6:	d20e      	bcs.n	80031e6 <xTaskCheckForTimeOut+0x6a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80031c8:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d209      	bcs.n	80031e2 <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 80031ce:	1a9b      	subs	r3, r3, r2
 80031d0:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80031d2:	4628      	mov	r0, r5
 80031d4:	f7ff ffc6 	bl	8003164 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80031d8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80031da:	f7fe ff65 	bl	80020a8 <vPortExitCritical>
}
 80031de:	4620      	mov	r0, r4
 80031e0:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80031e2:	2300      	movs	r3, #0
 80031e4:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80031e6:	2401      	movs	r4, #1
 80031e8:	e7f7      	b.n	80031da <xTaskCheckForTimeOut+0x5e>
 80031ea:	bf00      	nop
 80031ec:	200028dc 	.word	0x200028dc
 80031f0:	20002898 	.word	0x20002898

080031f4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80031f4:	4b01      	ldr	r3, [pc, #4]	; (80031fc <vTaskMissedYield+0x8>)
 80031f6:	2201      	movs	r2, #1
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	4770      	bx	lr
 80031fc:	200028e0 	.word	0x200028e0

08003200 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003200:	4b05      	ldr	r3, [pc, #20]	; (8003218 <xTaskGetSchedulerState+0x18>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	b133      	cbz	r3, 8003214 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003206:	4b05      	ldr	r3, [pc, #20]	; (800321c <xTaskGetSchedulerState+0x1c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800320c:	bf0c      	ite	eq
 800320e:	2002      	moveq	r0, #2
 8003210:	2000      	movne	r0, #0
 8003212:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003214:	2001      	movs	r0, #1
	}
 8003216:	4770      	bx	lr
 8003218:	200028b0 	.word	0x200028b0
 800321c:	2000285c 	.word	0x2000285c

08003220 <xTaskPriorityInherit>:
	{
 8003220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8003224:	4604      	mov	r4, r0
 8003226:	2800      	cmp	r0, #0
 8003228:	d041      	beq.n	80032ae <xTaskPriorityInherit+0x8e>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800322a:	4a24      	ldr	r2, [pc, #144]	; (80032bc <xTaskPriorityInherit+0x9c>)
 800322c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800322e:	6811      	ldr	r1, [r2, #0]
 8003230:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003232:	428b      	cmp	r3, r1
 8003234:	4617      	mov	r7, r2
 8003236:	d231      	bcs.n	800329c <xTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003238:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800323a:	4d21      	ldr	r5, [pc, #132]	; (80032c0 <xTaskPriorityInherit+0xa0>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800323c:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800323e:	bfa1      	itttt	ge
 8003240:	683a      	ldrge	r2, [r7, #0]
 8003242:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8003244:	f1c2 0207 	rsbge	r2, r2, #7
 8003248:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800324a:	2614      	movs	r6, #20
 800324c:	6942      	ldr	r2, [r0, #20]
 800324e:	fb06 5303 	mla	r3, r6, r3, r5
 8003252:	429a      	cmp	r2, r3
 8003254:	d12d      	bne.n	80032b2 <xTaskPriorityInherit+0x92>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003256:	f100 0804 	add.w	r8, r0, #4
 800325a:	4640      	mov	r0, r8
 800325c:	f7fe fe85 	bl	8001f6a <uxListRemove>
 8003260:	4b18      	ldr	r3, [pc, #96]	; (80032c4 <xTaskPriorityInherit+0xa4>)
 8003262:	b948      	cbnz	r0, 8003278 <xTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8003264:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003266:	4346      	muls	r6, r0
 8003268:	59aa      	ldr	r2, [r5, r6]
 800326a:	b92a      	cbnz	r2, 8003278 <xTaskPriorityInherit+0x58>
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	2101      	movs	r1, #1
 8003270:	4081      	lsls	r1, r0
 8003272:	ea22 0201 	bic.w	r2, r2, r1
 8003276:	601a      	str	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003278:	683a      	ldr	r2, [r7, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800327a:	6819      	ldr	r1, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800327c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800327e:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003280:	2401      	movs	r4, #1
 8003282:	fa04 f002 	lsl.w	r0, r4, r2
 8003286:	4308      	orrs	r0, r1
 8003288:	6018      	str	r0, [r3, #0]
 800328a:	2014      	movs	r0, #20
 800328c:	4641      	mov	r1, r8
 800328e:	fb00 5002 	mla	r0, r0, r2, r5
 8003292:	f7fe fe47 	bl	8001f24 <vListInsertEnd>
				xReturn = pdTRUE;
 8003296:	2001      	movs	r0, #1
	}
 8003298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800329c:	6813      	ldr	r3, [r2, #0]
 800329e:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80032a0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80032a2:	42a0      	cmp	r0, r4
 80032a4:	bf2c      	ite	cs
 80032a6:	2000      	movcs	r0, #0
 80032a8:	2001      	movcc	r0, #1
 80032aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return xReturn;
 80032ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b6:	62c3      	str	r3, [r0, #44]	; 0x2c
 80032b8:	e7ed      	b.n	8003296 <xTaskPriorityInherit+0x76>
 80032ba:	bf00      	nop
 80032bc:	200027b8 	.word	0x200027b8
 80032c0:	200027c4 	.word	0x200027c4
 80032c4:	20002864 	.word	0x20002864

080032c8 <xTaskPriorityDisinherit>:
	{
 80032c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80032ca:	4604      	mov	r4, r0
 80032cc:	b908      	cbnz	r0, 80032d2 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 80032ce:	2000      	movs	r0, #0
 80032d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80032d2:	4b22      	ldr	r3, [pc, #136]	; (800335c <xTaskPriorityDisinherit+0x94>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4298      	cmp	r0, r3
 80032d8:	d008      	beq.n	80032ec <xTaskPriorityDisinherit+0x24>
 80032da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032de:	f383 8811 	msr	BASEPRI, r3
 80032e2:	f3bf 8f6f 	isb	sy
 80032e6:	f3bf 8f4f 	dsb	sy
 80032ea:	e7fe      	b.n	80032ea <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80032ec:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80032ee:	b943      	cbnz	r3, 8003302 <xTaskPriorityDisinherit+0x3a>
 80032f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f4:	f383 8811 	msr	BASEPRI, r3
 80032f8:	f3bf 8f6f 	isb	sy
 80032fc:	f3bf 8f4f 	dsb	sy
 8003300:	e7fe      	b.n	8003300 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003302:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003304:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8003306:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003308:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800330a:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800330c:	d0df      	beq.n	80032ce <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1dd      	bne.n	80032ce <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003312:	1d05      	adds	r5, r0, #4
 8003314:	4628      	mov	r0, r5
 8003316:	f7fe fe28 	bl	8001f6a <uxListRemove>
 800331a:	4e11      	ldr	r6, [pc, #68]	; (8003360 <xTaskPriorityDisinherit+0x98>)
 800331c:	4a11      	ldr	r2, [pc, #68]	; (8003364 <xTaskPriorityDisinherit+0x9c>)
 800331e:	b950      	cbnz	r0, 8003336 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003320:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003322:	2114      	movs	r1, #20
 8003324:	4379      	muls	r1, r7
 8003326:	5873      	ldr	r3, [r6, r1]
 8003328:	b92b      	cbnz	r3, 8003336 <xTaskPriorityDisinherit+0x6e>
 800332a:	6813      	ldr	r3, [r2, #0]
 800332c:	2001      	movs	r0, #1
 800332e:	40b8      	lsls	r0, r7
 8003330:	ea23 0300 	bic.w	r3, r3, r0
 8003334:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003336:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003338:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800333a:	f1c3 0107 	rsb	r1, r3, #7
 800333e:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8003340:	6811      	ldr	r1, [r2, #0]
 8003342:	2401      	movs	r4, #1
 8003344:	fa04 f003 	lsl.w	r0, r4, r3
 8003348:	4308      	orrs	r0, r1
 800334a:	6010      	str	r0, [r2, #0]
 800334c:	2014      	movs	r0, #20
 800334e:	fb00 6003 	mla	r0, r0, r3, r6
 8003352:	4629      	mov	r1, r5
 8003354:	f7fe fde6 	bl	8001f24 <vListInsertEnd>
					xReturn = pdTRUE;
 8003358:	4620      	mov	r0, r4
	}
 800335a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800335c:	200027b8 	.word	0x200027b8
 8003360:	200027c4 	.word	0x200027c4
 8003364:	20002864 	.word	0x20002864

08003368 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8003368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800336a:	4604      	mov	r4, r0
 800336c:	2800      	cmp	r0, #0
 800336e:	d04d      	beq.n	800340c <vTaskPriorityDisinheritAfterTimeout+0xa4>
			configASSERT( pxTCB->uxMutexesHeld );
 8003370:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003372:	b942      	cbnz	r2, 8003386 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8003374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003378:	f383 8811 	msr	BASEPRI, r3
 800337c:	f3bf 8f6f 	isb	sy
 8003380:	f3bf 8f4f 	dsb	sy
 8003384:	e7fe      	b.n	8003384 <vTaskPriorityDisinheritAfterTimeout+0x1c>
 8003386:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003388:	4299      	cmp	r1, r3
 800338a:	bf38      	it	cc
 800338c:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800338e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003390:	428b      	cmp	r3, r1
 8003392:	d03b      	beq.n	800340c <vTaskPriorityDisinheritAfterTimeout+0xa4>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003394:	2a01      	cmp	r2, #1
 8003396:	d139      	bne.n	800340c <vTaskPriorityDisinheritAfterTimeout+0xa4>
					configASSERT( pxTCB != pxCurrentTCB );
 8003398:	4a1d      	ldr	r2, [pc, #116]	; (8003410 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 800339a:	6812      	ldr	r2, [r2, #0]
 800339c:	4290      	cmp	r0, r2
 800339e:	d108      	bne.n	80033b2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 80033a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a4:	f383 8811 	msr	BASEPRI, r3
 80033a8:	f3bf 8f6f 	isb	sy
 80033ac:	f3bf 8f4f 	dsb	sy
 80033b0:	e7fe      	b.n	80033b0 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80033b2:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80033b4:	4d17      	ldr	r5, [pc, #92]	; (8003414 <vTaskPriorityDisinheritAfterTimeout+0xac>)
					pxTCB->uxPriority = uxPriorityToUse;
 80033b6:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80033b8:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80033ba:	f04f 0614 	mov.w	r6, #20
 80033be:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033c0:	bfa8      	it	ge
 80033c2:	f1c1 0107 	rsbge	r1, r1, #7
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80033c6:	fb06 5303 	mla	r3, r6, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033ca:	bfa8      	it	ge
 80033cc:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d11c      	bne.n	800340c <vTaskPriorityDisinheritAfterTimeout+0xa4>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033d2:	1d07      	adds	r7, r0, #4
 80033d4:	4638      	mov	r0, r7
 80033d6:	f7fe fdc8 	bl	8001f6a <uxListRemove>
 80033da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80033dc:	4c0e      	ldr	r4, [pc, #56]	; (8003418 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 80033de:	b940      	cbnz	r0, 80033f2 <vTaskPriorityDisinheritAfterTimeout+0x8a>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80033e0:	4356      	muls	r6, r2
 80033e2:	59ab      	ldr	r3, [r5, r6]
 80033e4:	b92b      	cbnz	r3, 80033f2 <vTaskPriorityDisinheritAfterTimeout+0x8a>
 80033e6:	6823      	ldr	r3, [r4, #0]
 80033e8:	2101      	movs	r1, #1
 80033ea:	4091      	lsls	r1, r2
 80033ec:	ea23 0301 	bic.w	r3, r3, r1
 80033f0:	6023      	str	r3, [r4, #0]
						prvAddTaskToReadyList( pxTCB );
 80033f2:	6821      	ldr	r1, [r4, #0]
 80033f4:	2301      	movs	r3, #1
 80033f6:	4093      	lsls	r3, r2
 80033f8:	430b      	orrs	r3, r1
 80033fa:	2014      	movs	r0, #20
 80033fc:	6023      	str	r3, [r4, #0]
 80033fe:	4639      	mov	r1, r7
 8003400:	fb00 5002 	mla	r0, r0, r2, r5
	}
 8003404:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 8003408:	f7fe bd8c 	b.w	8001f24 <vListInsertEnd>
 800340c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800340e:	bf00      	nop
 8003410:	200027b8 	.word	0x200027b8
 8003414:	200027c4 	.word	0x200027c4
 8003418:	20002864 	.word	0x20002864

0800341c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800341c:	4b04      	ldr	r3, [pc, #16]	; (8003430 <pvTaskIncrementMutexHeldCount+0x14>)
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	b11a      	cbz	r2, 800342a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8003422:	6819      	ldr	r1, [r3, #0]
 8003424:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8003426:	3201      	adds	r2, #1
 8003428:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 800342a:	6818      	ldr	r0, [r3, #0]
	}
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	200027b8 	.word	0x200027b8

08003434 <StartTask1>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void const * argument)
{
 8003434:	e7fe      	b.n	8003434 <StartTask1>
	...

08003438 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void const * argument)
{
 8003438:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(myBinarySem01Handle,4000);
 800343a:	4d05      	ldr	r5, [pc, #20]	; (8003450 <StartTask2+0x18>)
	  printf("Task2 synchronized\n\r");
 800343c:	4c05      	ldr	r4, [pc, #20]	; (8003454 <StartTask2+0x1c>)
	  osSemaphoreWait(myBinarySem01Handle,4000);
 800343e:	6828      	ldr	r0, [r5, #0]
 8003440:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8003444:	f7fe fd16 	bl	8001e74 <osSemaphoreWait>
	  printf("Task2 synchronized\n\r");
 8003448:	4620      	mov	r0, r4
 800344a:	f000 fa25 	bl	8003898 <iprintf>
 800344e:	e7f6      	b.n	800343e <StartTask2+0x6>
 8003450:	200028f8 	.word	0x200028f8
 8003454:	0800474a 	.word	0x0800474a

08003458 <_write>:
{
 8003458:	b510      	push	{r4, lr}
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 800345a:	230a      	movs	r3, #10
{
 800345c:	4614      	mov	r4, r2
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 800345e:	4803      	ldr	r0, [pc, #12]	; (800346c <_write+0x14>)
 8003460:	b292      	uxth	r2, r2
 8003462:	f7fe fc1c 	bl	8001c9e <HAL_UART_Transmit>
}
 8003466:	4620      	mov	r0, r4
 8003468:	bd10      	pop	{r4, pc}
 800346a:	bf00      	nop
 800346c:	20002900 	.word	0x20002900

08003470 <SystemClock_Config>:
{
 8003470:	b510      	push	{r4, lr}
 8003472:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003474:	2244      	movs	r2, #68	; 0x44
 8003476:	2100      	movs	r1, #0
 8003478:	a805      	add	r0, sp, #20
 800347a:	f000 fa04 	bl	8003886 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800347e:	2214      	movs	r2, #20
 8003480:	2100      	movs	r1, #0
 8003482:	4668      	mov	r0, sp
 8003484:	f000 f9ff 	bl	8003886 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003488:	2288      	movs	r2, #136	; 0x88
 800348a:	2100      	movs	r1, #0
 800348c:	a816      	add	r0, sp, #88	; 0x58
 800348e:	f000 f9fa 	bl	8003886 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003492:	2310      	movs	r3, #16
 8003494:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003496:	2301      	movs	r3, #1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8003498:	2400      	movs	r4, #0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800349a:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800349c:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800349e:	2360      	movs	r3, #96	; 0x60
 80034a0:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034a2:	f7fd fa9f 	bl	80009e4 <HAL_RCC_OscConfig>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80034a6:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80034a8:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80034aa:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80034ac:	e88d 0018 	stmia.w	sp, {r3, r4}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034b0:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80034b2:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034b4:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80034b6:	f7fd fcbb 	bl	8000e30 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80034ba:	2302      	movs	r3, #2
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034bc:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80034be:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80034c0:	9425      	str	r4, [sp, #148]	; 0x94
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034c2:	f7fd fe95 	bl	80011f0 <HAL_RCCEx_PeriphCLKConfig>
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80034c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80034ca:	f7fd f9bf 	bl	800084c <HAL_PWREx_ControlVoltageScaling>
}
 80034ce:	b038      	add	sp, #224	; 0xe0
 80034d0:	bd10      	pop	{r4, pc}
	...

080034d4 <main>:
{
 80034d4:	b500      	push	{lr}
 80034d6:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 80034d8:	f7fd f852 	bl	8000580 <HAL_Init>
  SystemClock_Config();
 80034dc:	f7ff ffc8 	bl	8003470 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e0:	2214      	movs	r2, #20
 80034e2:	2100      	movs	r1, #0
 80034e4:	a80b      	add	r0, sp, #44	; 0x2c
 80034e6:	f000 f9ce 	bl	8003886 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ea:	4b46      	ldr	r3, [pc, #280]	; (8003604 <main+0x130>)
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80034ec:	4846      	ldr	r0, [pc, #280]	; (8003608 <main+0x134>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034f0:	f042 0201 	orr.w	r2, r2, #1
 80034f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80034f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034f8:	f002 0201 	and.w	r2, r2, #1
 80034fc:	9202      	str	r2, [sp, #8]
 80034fe:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003500:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003502:	f042 0202 	orr.w	r2, r2, #2
 8003506:	64da      	str	r2, [r3, #76]	; 0x4c
 8003508:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800350a:	f002 0202 	and.w	r2, r2, #2
 800350e:	9203      	str	r2, [sp, #12]
 8003510:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003512:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003514:	f042 0210 	orr.w	r2, r2, #16
 8003518:	64da      	str	r2, [r3, #76]	; 0x4c
 800351a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800351c:	f002 0210 	and.w	r2, r2, #16
 8003520:	9204      	str	r2, [sp, #16]
 8003522:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003524:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003526:	f042 0208 	orr.w	r2, r2, #8
 800352a:	64da      	str	r2, [r3, #76]	; 0x4c
 800352c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8003534:	2200      	movs	r2, #0
 8003536:	2104      	movs	r1, #4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003538:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800353a:	f7fd f96d 	bl	8000818 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800353e:	2200      	movs	r2, #0
 8003540:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003544:	4831      	ldr	r0, [pc, #196]	; (800360c <main+0x138>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003546:	2500      	movs	r5, #0
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8003548:	f7fd f966 	bl	8000818 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = JOY_CENTER_Pin;
 800354c:	2401      	movs	r4, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800354e:	4b30      	ldr	r3, [pc, #192]	; (8003610 <main+0x13c>)
  GPIO_InitStruct.Pin = JOY_CENTER_Pin;
 8003550:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(JOY_CENTER_GPIO_Port, &GPIO_InitStruct);
 8003552:	a90b      	add	r1, sp, #44	; 0x2c
 8003554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003558:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355a:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(JOY_CENTER_GPIO_Port, &GPIO_InitStruct);
 800355c:	f7fd f880 	bl	8000660 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8003560:	2304      	movs	r3, #4
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8003562:	a90b      	add	r1, sp, #44	; 0x2c
 8003564:	4828      	ldr	r0, [pc, #160]	; (8003608 <main+0x134>)
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8003566:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003568:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356a:	950d      	str	r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800356c:	950e      	str	r5, [sp, #56]	; 0x38
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800356e:	f7fd f877 	bl	8000660 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8003572:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8003576:	a90b      	add	r1, sp, #44	; 0x2c
 8003578:	4824      	ldr	r0, [pc, #144]	; (800360c <main+0x138>)
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800357a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800357c:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357e:	950d      	str	r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003580:	950e      	str	r5, [sp, #56]	; 0x38
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8003582:	f7fd f86d 	bl	8000660 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8003586:	2105      	movs	r1, #5
 8003588:	462a      	mov	r2, r5
 800358a:	2006      	movs	r0, #6
 800358c:	f7fd f828 	bl	80005e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003590:	2006      	movs	r0, #6
 8003592:	f7fd f859 	bl	8000648 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 8003596:	481f      	ldr	r0, [pc, #124]	; (8003614 <main+0x140>)
  huart2.Init.BaudRate = 115200;
 8003598:	4a1f      	ldr	r2, [pc, #124]	; (8003618 <main+0x144>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800359a:	6085      	str	r5, [r0, #8]
  huart2.Init.BaudRate = 115200;
 800359c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80035a0:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 80035a4:	230c      	movs	r3, #12
 80035a6:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80035a8:	60c5      	str	r5, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80035aa:	6105      	str	r5, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035ac:	6185      	str	r5, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80035ae:	61c5      	str	r5, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80035b0:	6205      	str	r5, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80035b2:	6245      	str	r5, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80035b4:	f7fe fbfc 	bl	8001db0 <HAL_UART_Init>
  printf("Application starts \n\r");
 80035b8:	4818      	ldr	r0, [pc, #96]	; (800361c <main+0x148>)
 80035ba:	f000 f96d 	bl	8003898 <iprintf>
  osSemaphoreDef(myBinarySem01);
 80035be:	a810      	add	r0, sp, #64	; 0x40
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 80035c0:	4621      	mov	r1, r4
  osSemaphoreDef(myBinarySem01);
 80035c2:	f840 5d3c 	str.w	r5, [r0, #-60]!
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 80035c6:	f7fe fc42 	bl	8001e4e <osSemaphoreCreate>
  osThreadDef(Task1, StartTask1, osPriorityNormal, 0, 512);
 80035ca:	4c15      	ldr	r4, [pc, #84]	; (8003620 <main+0x14c>)
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 80035cc:	4b15      	ldr	r3, [pc, #84]	; (8003624 <main+0x150>)
 80035ce:	6018      	str	r0, [r3, #0]
  osThreadDef(Task1, StartTask1, osPriorityNormal, 0, 512);
 80035d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035d2:	ae06      	add	r6, sp, #24
 80035d4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80035d6:	f854 3b04 	ldr.w	r3, [r4], #4
 80035da:	6033      	str	r3, [r6, #0]
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 80035dc:	4629      	mov	r1, r5
 80035de:	a806      	add	r0, sp, #24
 80035e0:	f7fe fc1d 	bl	8001e1e <osThreadCreate>
 80035e4:	4b10      	ldr	r3, [pc, #64]	; (8003628 <main+0x154>)
 80035e6:	6018      	str	r0, [r3, #0]
  osThreadDef(Task2, StartTask2, osPriorityNormal, 0, 512);
 80035e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035ea:	ae0b      	add	r6, sp, #44	; 0x2c
 80035ec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80035ee:	6823      	ldr	r3, [r4, #0]
 80035f0:	6033      	str	r3, [r6, #0]
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 80035f2:	4629      	mov	r1, r5
 80035f4:	a80b      	add	r0, sp, #44	; 0x2c
 80035f6:	f7fe fc12 	bl	8001e1e <osThreadCreate>
 80035fa:	4b0c      	ldr	r3, [pc, #48]	; (800362c <main+0x158>)
 80035fc:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80035fe:	f7fe fc09 	bl	8001e14 <osKernelStart>
 8003602:	e7fe      	b.n	8003602 <main+0x12e>
 8003604:	40021000 	.word	0x40021000
 8003608:	48000400 	.word	0x48000400
 800360c:	48001000 	.word	0x48001000
 8003610:	10110000 	.word	0x10110000
 8003614:	20002900 	.word	0x20002900
 8003618:	40004400 	.word	0x40004400
 800361c:	0800475f 	.word	0x0800475f
 8003620:	0800470c 	.word	0x0800470c
 8003624:	200028f8 	.word	0x200028f8
 8003628:	200028f4 	.word	0x200028f4
 800362c:	200028fc 	.word	0x200028fc

08003630 <HAL_GPIO_EXTI_Callback>:
  osSemaphoreRelease(myBinarySem01Handle);
 8003630:	4b01      	ldr	r3, [pc, #4]	; (8003638 <HAL_GPIO_EXTI_Callback+0x8>)
 8003632:	6818      	ldr	r0, [r3, #0]
 8003634:	f7fe bc44 	b.w	8001ec0 <osSemaphoreRelease>
 8003638:	200028f8 	.word	0x200028f8

0800363c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800363c:	6802      	ldr	r2, [r0, #0]
 800363e:	4b03      	ldr	r3, [pc, #12]	; (800364c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8003640:	429a      	cmp	r2, r3
 8003642:	d101      	bne.n	8003648 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8003644:	f7fc bfac 	b.w	80005a0 <HAL_IncTick>
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	40001000 	.word	0x40001000

08003650 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003650:	4b0e      	ldr	r3, [pc, #56]	; (800368c <HAL_MspInit+0x3c>)
{
 8003652:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003654:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003656:	f042 0201 	orr.w	r2, r2, #1
 800365a:	661a      	str	r2, [r3, #96]	; 0x60
 800365c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800365e:	f002 0201 	and.w	r2, r2, #1
 8003662:	9200      	str	r2, [sp, #0]
 8003664:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003666:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003668:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800366c:	659a      	str	r2, [r3, #88]	; 0x58
 800366e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003674:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003676:	2200      	movs	r2, #0
 8003678:	210f      	movs	r1, #15
 800367a:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800367e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003680:	f7fc ffae 	bl	80005e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003684:	b003      	add	sp, #12
 8003686:	f85d fb04 	ldr.w	pc, [sp], #4
 800368a:	bf00      	nop
 800368c:	40021000 	.word	0x40021000

08003690 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003690:	b510      	push	{r4, lr}
 8003692:	4604      	mov	r4, r0
 8003694:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003696:	2214      	movs	r2, #20
 8003698:	2100      	movs	r1, #0
 800369a:	a803      	add	r0, sp, #12
 800369c:	f000 f8f3 	bl	8003886 <memset>
  if(huart->Instance==USART2)
 80036a0:	6822      	ldr	r2, [r4, #0]
 80036a2:	4b12      	ldr	r3, [pc, #72]	; (80036ec <HAL_UART_MspInit+0x5c>)
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d11f      	bne.n	80036e8 <HAL_UART_MspInit+0x58>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80036a8:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036ac:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 80036ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036b0:	480f      	ldr	r0, [pc, #60]	; (80036f0 <HAL_UART_MspInit+0x60>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80036b2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80036b6:	659a      	str	r2, [r3, #88]	; 0x58
 80036b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80036ba:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80036be:	9201      	str	r2, [sp, #4]
 80036c0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036c4:	f042 0208 	orr.w	r2, r2, #8
 80036c8:	64da      	str	r2, [r3, #76]	; 0x4c
 80036ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036cc:	f003 0308 	and.w	r3, r3, #8
 80036d0:	9302      	str	r3, [sp, #8]
 80036d2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80036d4:	2360      	movs	r3, #96	; 0x60
 80036d6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d8:	2302      	movs	r3, #2
 80036da:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036dc:	2303      	movs	r3, #3
 80036de:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036e0:	2307      	movs	r3, #7
 80036e2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036e4:	f7fc ffbc 	bl	8000660 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80036e8:	b008      	add	sp, #32
 80036ea:	bd10      	pop	{r4, pc}
 80036ec:	40004400 	.word	0x40004400
 80036f0:	48000c00 	.word	0x48000c00

080036f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036f4:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80036f6:	4601      	mov	r1, r0
{
 80036f8:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80036fa:	2200      	movs	r2, #0
 80036fc:	2036      	movs	r0, #54	; 0x36
 80036fe:	f7fc ff6f 	bl	80005e0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8003702:	2036      	movs	r0, #54	; 0x36
 8003704:	f7fc ffa0 	bl	8000648 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003708:	4b14      	ldr	r3, [pc, #80]	; (800375c <HAL_InitTick+0x68>)
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800370a:	4c15      	ldr	r4, [pc, #84]	; (8003760 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 800370c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800370e:	f042 0210 	orr.w	r2, r2, #16
 8003712:	659a      	str	r2, [r3, #88]	; 0x58
 8003714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003716:	f003 0310 	and.w	r3, r3, #16
 800371a:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800371c:	a901      	add	r1, sp, #4
 800371e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003720:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003722:	f7fd fc3b 	bl	8000f9c <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003726:	f7fd fc15 	bl	8000f54 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 800372a:	4b0e      	ldr	r3, [pc, #56]	; (8003764 <HAL_InitTick+0x70>)
 800372c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800372e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003732:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003734:	4b0c      	ldr	r3, [pc, #48]	; (8003768 <HAL_InitTick+0x74>)
 8003736:	fbb0 f0f3 	udiv	r0, r0, r3
 800373a:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 800373c:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 800373e:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003740:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8003742:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003744:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003746:	f7fe f86f 	bl	8001828 <HAL_TIM_Base_Init>
 800374a:	b920      	cbnz	r0, 8003756 <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800374c:	4620      	mov	r0, r4
 800374e:	f7fd ff39 	bl	80015c4 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8003752:	b008      	add	sp, #32
 8003754:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8003756:	2001      	movs	r0, #1
 8003758:	e7fb      	b.n	8003752 <HAL_InitTick+0x5e>
 800375a:	bf00      	nop
 800375c:	40021000 	.word	0x40021000
 8003760:	20002978 	.word	0x20002978
 8003764:	40001000 	.word	0x40001000
 8003768:	000f4240 	.word	0x000f4240

0800376c <NMI_Handler>:
 800376c:	4770      	bx	lr

0800376e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800376e:	e7fe      	b.n	800376e <HardFault_Handler>

08003770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003770:	e7fe      	b.n	8003770 <MemManage_Handler>

08003772 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003772:	e7fe      	b.n	8003772 <BusFault_Handler>

08003774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003774:	e7fe      	b.n	8003774 <UsageFault_Handler>

08003776 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003776:	4770      	bx	lr

08003778 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003778:	2001      	movs	r0, #1
 800377a:	f7fd b853 	b.w	8000824 <HAL_GPIO_EXTI_IRQHandler>
	...

08003780 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003780:	4801      	ldr	r0, [pc, #4]	; (8003788 <TIM6_DAC_IRQHandler+0x8>)
 8003782:	f7fd bf3b 	b.w	80015fc <HAL_TIM_IRQHandler>
 8003786:	bf00      	nop
 8003788:	20002978 	.word	0x20002978

0800378c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800378c:	490f      	ldr	r1, [pc, #60]	; (80037cc <SystemInit+0x40>)
 800378e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003792:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800379a:	4b0d      	ldr	r3, [pc, #52]	; (80037d0 <SystemInit+0x44>)
 800379c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800379e:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80037a0:	f042 0201 	orr.w	r2, r2, #1
 80037a4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80037a6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80037ae:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80037b2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80037b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037b8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037c0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80037c2:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80037c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037c8:	608b      	str	r3, [r1, #8]
 80037ca:	4770      	bx	lr
 80037cc:	e000ed00 	.word	0xe000ed00
 80037d0:	40021000 	.word	0x40021000

080037d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80037d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800380c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80037d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80037da:	e003      	b.n	80037e4 <LoopCopyDataInit>

080037dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80037dc:	4b0c      	ldr	r3, [pc, #48]	; (8003810 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80037de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80037e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80037e2:	3104      	adds	r1, #4

080037e4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80037e4:	480b      	ldr	r0, [pc, #44]	; (8003814 <LoopForever+0xa>)
	ldr	r3, =_edata
 80037e6:	4b0c      	ldr	r3, [pc, #48]	; (8003818 <LoopForever+0xe>)
	adds	r2, r0, r1
 80037e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80037ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80037ec:	d3f6      	bcc.n	80037dc <CopyDataInit>
	ldr	r2, =_sbss
 80037ee:	4a0b      	ldr	r2, [pc, #44]	; (800381c <LoopForever+0x12>)
	b	LoopFillZerobss
 80037f0:	e002      	b.n	80037f8 <LoopFillZerobss>

080037f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80037f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80037f4:	f842 3b04 	str.w	r3, [r2], #4

080037f8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80037f8:	4b09      	ldr	r3, [pc, #36]	; (8003820 <LoopForever+0x16>)
	cmp	r2, r3
 80037fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80037fc:	d3f9      	bcc.n	80037f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80037fe:	f7ff ffc5 	bl	800378c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003802:	f000 f811 	bl	8003828 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003806:	f7ff fe65 	bl	80034d4 <main>

0800380a <LoopForever>:

LoopForever:
    b LoopForever
 800380a:	e7fe      	b.n	800380a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800380c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003810:	08004874 	.word	0x08004874
	ldr	r0, =_sdata
 8003814:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003818:	2000006c 	.word	0x2000006c
	ldr	r2, =_sbss
 800381c:	2000006c 	.word	0x2000006c
	ldr	r3, = _ebss
 8003820:	200029bc 	.word	0x200029bc

08003824 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003824:	e7fe      	b.n	8003824 <ADC1_2_IRQHandler>
	...

08003828 <__libc_init_array>:
 8003828:	b570      	push	{r4, r5, r6, lr}
 800382a:	4e0d      	ldr	r6, [pc, #52]	; (8003860 <__libc_init_array+0x38>)
 800382c:	4c0d      	ldr	r4, [pc, #52]	; (8003864 <__libc_init_array+0x3c>)
 800382e:	1ba4      	subs	r4, r4, r6
 8003830:	10a4      	asrs	r4, r4, #2
 8003832:	2500      	movs	r5, #0
 8003834:	42a5      	cmp	r5, r4
 8003836:	d109      	bne.n	800384c <__libc_init_array+0x24>
 8003838:	4e0b      	ldr	r6, [pc, #44]	; (8003868 <__libc_init_array+0x40>)
 800383a:	4c0c      	ldr	r4, [pc, #48]	; (800386c <__libc_init_array+0x44>)
 800383c:	f000 ff5a 	bl	80046f4 <_init>
 8003840:	1ba4      	subs	r4, r4, r6
 8003842:	10a4      	asrs	r4, r4, #2
 8003844:	2500      	movs	r5, #0
 8003846:	42a5      	cmp	r5, r4
 8003848:	d105      	bne.n	8003856 <__libc_init_array+0x2e>
 800384a:	bd70      	pop	{r4, r5, r6, pc}
 800384c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003850:	4798      	blx	r3
 8003852:	3501      	adds	r5, #1
 8003854:	e7ee      	b.n	8003834 <__libc_init_array+0xc>
 8003856:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800385a:	4798      	blx	r3
 800385c:	3501      	adds	r5, #1
 800385e:	e7f2      	b.n	8003846 <__libc_init_array+0x1e>
 8003860:	0800486c 	.word	0x0800486c
 8003864:	0800486c 	.word	0x0800486c
 8003868:	0800486c 	.word	0x0800486c
 800386c:	08004870 	.word	0x08004870

08003870 <memcpy>:
 8003870:	b510      	push	{r4, lr}
 8003872:	1e43      	subs	r3, r0, #1
 8003874:	440a      	add	r2, r1
 8003876:	4291      	cmp	r1, r2
 8003878:	d100      	bne.n	800387c <memcpy+0xc>
 800387a:	bd10      	pop	{r4, pc}
 800387c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003880:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003884:	e7f7      	b.n	8003876 <memcpy+0x6>

08003886 <memset>:
 8003886:	4402      	add	r2, r0
 8003888:	4603      	mov	r3, r0
 800388a:	4293      	cmp	r3, r2
 800388c:	d100      	bne.n	8003890 <memset+0xa>
 800388e:	4770      	bx	lr
 8003890:	f803 1b01 	strb.w	r1, [r3], #1
 8003894:	e7f9      	b.n	800388a <memset+0x4>
	...

08003898 <iprintf>:
 8003898:	b40f      	push	{r0, r1, r2, r3}
 800389a:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <iprintf+0x2c>)
 800389c:	b513      	push	{r0, r1, r4, lr}
 800389e:	681c      	ldr	r4, [r3, #0]
 80038a0:	b124      	cbz	r4, 80038ac <iprintf+0x14>
 80038a2:	69a3      	ldr	r3, [r4, #24]
 80038a4:	b913      	cbnz	r3, 80038ac <iprintf+0x14>
 80038a6:	4620      	mov	r0, r4
 80038a8:	f000 f84e 	bl	8003948 <__sinit>
 80038ac:	ab05      	add	r3, sp, #20
 80038ae:	9a04      	ldr	r2, [sp, #16]
 80038b0:	68a1      	ldr	r1, [r4, #8]
 80038b2:	9301      	str	r3, [sp, #4]
 80038b4:	4620      	mov	r0, r4
 80038b6:	f000 f959 	bl	8003b6c <_vfiprintf_r>
 80038ba:	b002      	add	sp, #8
 80038bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038c0:	b004      	add	sp, #16
 80038c2:	4770      	bx	lr
 80038c4:	20000008 	.word	0x20000008

080038c8 <_cleanup_r>:
 80038c8:	4901      	ldr	r1, [pc, #4]	; (80038d0 <_cleanup_r+0x8>)
 80038ca:	f000 b8a9 	b.w	8003a20 <_fwalk_reent>
 80038ce:	bf00      	nop
 80038d0:	08004441 	.word	0x08004441

080038d4 <std.isra.0>:
 80038d4:	2300      	movs	r3, #0
 80038d6:	b510      	push	{r4, lr}
 80038d8:	4604      	mov	r4, r0
 80038da:	6003      	str	r3, [r0, #0]
 80038dc:	6043      	str	r3, [r0, #4]
 80038de:	6083      	str	r3, [r0, #8]
 80038e0:	8181      	strh	r1, [r0, #12]
 80038e2:	6643      	str	r3, [r0, #100]	; 0x64
 80038e4:	81c2      	strh	r2, [r0, #14]
 80038e6:	6103      	str	r3, [r0, #16]
 80038e8:	6143      	str	r3, [r0, #20]
 80038ea:	6183      	str	r3, [r0, #24]
 80038ec:	4619      	mov	r1, r3
 80038ee:	2208      	movs	r2, #8
 80038f0:	305c      	adds	r0, #92	; 0x5c
 80038f2:	f7ff ffc8 	bl	8003886 <memset>
 80038f6:	4b05      	ldr	r3, [pc, #20]	; (800390c <std.isra.0+0x38>)
 80038f8:	6263      	str	r3, [r4, #36]	; 0x24
 80038fa:	4b05      	ldr	r3, [pc, #20]	; (8003910 <std.isra.0+0x3c>)
 80038fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80038fe:	4b05      	ldr	r3, [pc, #20]	; (8003914 <std.isra.0+0x40>)
 8003900:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003902:	4b05      	ldr	r3, [pc, #20]	; (8003918 <std.isra.0+0x44>)
 8003904:	6224      	str	r4, [r4, #32]
 8003906:	6323      	str	r3, [r4, #48]	; 0x30
 8003908:	bd10      	pop	{r4, pc}
 800390a:	bf00      	nop
 800390c:	080040e5 	.word	0x080040e5
 8003910:	08004107 	.word	0x08004107
 8003914:	0800413f 	.word	0x0800413f
 8003918:	08004163 	.word	0x08004163

0800391c <__sfmoreglue>:
 800391c:	b570      	push	{r4, r5, r6, lr}
 800391e:	1e4a      	subs	r2, r1, #1
 8003920:	2568      	movs	r5, #104	; 0x68
 8003922:	4355      	muls	r5, r2
 8003924:	460e      	mov	r6, r1
 8003926:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800392a:	f000 f897 	bl	8003a5c <_malloc_r>
 800392e:	4604      	mov	r4, r0
 8003930:	b140      	cbz	r0, 8003944 <__sfmoreglue+0x28>
 8003932:	2100      	movs	r1, #0
 8003934:	e880 0042 	stmia.w	r0, {r1, r6}
 8003938:	300c      	adds	r0, #12
 800393a:	60a0      	str	r0, [r4, #8]
 800393c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003940:	f7ff ffa1 	bl	8003886 <memset>
 8003944:	4620      	mov	r0, r4
 8003946:	bd70      	pop	{r4, r5, r6, pc}

08003948 <__sinit>:
 8003948:	6983      	ldr	r3, [r0, #24]
 800394a:	b510      	push	{r4, lr}
 800394c:	4604      	mov	r4, r0
 800394e:	bb33      	cbnz	r3, 800399e <__sinit+0x56>
 8003950:	6483      	str	r3, [r0, #72]	; 0x48
 8003952:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003954:	6503      	str	r3, [r0, #80]	; 0x50
 8003956:	4b12      	ldr	r3, [pc, #72]	; (80039a0 <__sinit+0x58>)
 8003958:	4a12      	ldr	r2, [pc, #72]	; (80039a4 <__sinit+0x5c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6282      	str	r2, [r0, #40]	; 0x28
 800395e:	4298      	cmp	r0, r3
 8003960:	bf04      	itt	eq
 8003962:	2301      	moveq	r3, #1
 8003964:	6183      	streq	r3, [r0, #24]
 8003966:	f000 f81f 	bl	80039a8 <__sfp>
 800396a:	6060      	str	r0, [r4, #4]
 800396c:	4620      	mov	r0, r4
 800396e:	f000 f81b 	bl	80039a8 <__sfp>
 8003972:	60a0      	str	r0, [r4, #8]
 8003974:	4620      	mov	r0, r4
 8003976:	f000 f817 	bl	80039a8 <__sfp>
 800397a:	2200      	movs	r2, #0
 800397c:	60e0      	str	r0, [r4, #12]
 800397e:	2104      	movs	r1, #4
 8003980:	6860      	ldr	r0, [r4, #4]
 8003982:	f7ff ffa7 	bl	80038d4 <std.isra.0>
 8003986:	2201      	movs	r2, #1
 8003988:	2109      	movs	r1, #9
 800398a:	68a0      	ldr	r0, [r4, #8]
 800398c:	f7ff ffa2 	bl	80038d4 <std.isra.0>
 8003990:	2202      	movs	r2, #2
 8003992:	2112      	movs	r1, #18
 8003994:	68e0      	ldr	r0, [r4, #12]
 8003996:	f7ff ff9d 	bl	80038d4 <std.isra.0>
 800399a:	2301      	movs	r3, #1
 800399c:	61a3      	str	r3, [r4, #24]
 800399e:	bd10      	pop	{r4, pc}
 80039a0:	0800482c 	.word	0x0800482c
 80039a4:	080038c9 	.word	0x080038c9

080039a8 <__sfp>:
 80039a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039aa:	4b1c      	ldr	r3, [pc, #112]	; (8003a1c <__sfp+0x74>)
 80039ac:	681e      	ldr	r6, [r3, #0]
 80039ae:	69b3      	ldr	r3, [r6, #24]
 80039b0:	4607      	mov	r7, r0
 80039b2:	b913      	cbnz	r3, 80039ba <__sfp+0x12>
 80039b4:	4630      	mov	r0, r6
 80039b6:	f7ff ffc7 	bl	8003948 <__sinit>
 80039ba:	3648      	adds	r6, #72	; 0x48
 80039bc:	68b4      	ldr	r4, [r6, #8]
 80039be:	6873      	ldr	r3, [r6, #4]
 80039c0:	3b01      	subs	r3, #1
 80039c2:	d503      	bpl.n	80039cc <__sfp+0x24>
 80039c4:	6833      	ldr	r3, [r6, #0]
 80039c6:	b133      	cbz	r3, 80039d6 <__sfp+0x2e>
 80039c8:	6836      	ldr	r6, [r6, #0]
 80039ca:	e7f7      	b.n	80039bc <__sfp+0x14>
 80039cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80039d0:	b16d      	cbz	r5, 80039ee <__sfp+0x46>
 80039d2:	3468      	adds	r4, #104	; 0x68
 80039d4:	e7f4      	b.n	80039c0 <__sfp+0x18>
 80039d6:	2104      	movs	r1, #4
 80039d8:	4638      	mov	r0, r7
 80039da:	f7ff ff9f 	bl	800391c <__sfmoreglue>
 80039de:	6030      	str	r0, [r6, #0]
 80039e0:	2800      	cmp	r0, #0
 80039e2:	d1f1      	bne.n	80039c8 <__sfp+0x20>
 80039e4:	230c      	movs	r3, #12
 80039e6:	603b      	str	r3, [r7, #0]
 80039e8:	4604      	mov	r4, r0
 80039ea:	4620      	mov	r0, r4
 80039ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039f2:	81e3      	strh	r3, [r4, #14]
 80039f4:	2301      	movs	r3, #1
 80039f6:	81a3      	strh	r3, [r4, #12]
 80039f8:	6665      	str	r5, [r4, #100]	; 0x64
 80039fa:	6025      	str	r5, [r4, #0]
 80039fc:	60a5      	str	r5, [r4, #8]
 80039fe:	6065      	str	r5, [r4, #4]
 8003a00:	6125      	str	r5, [r4, #16]
 8003a02:	6165      	str	r5, [r4, #20]
 8003a04:	61a5      	str	r5, [r4, #24]
 8003a06:	2208      	movs	r2, #8
 8003a08:	4629      	mov	r1, r5
 8003a0a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a0e:	f7ff ff3a 	bl	8003886 <memset>
 8003a12:	6365      	str	r5, [r4, #52]	; 0x34
 8003a14:	63a5      	str	r5, [r4, #56]	; 0x38
 8003a16:	64a5      	str	r5, [r4, #72]	; 0x48
 8003a18:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003a1a:	e7e6      	b.n	80039ea <__sfp+0x42>
 8003a1c:	0800482c 	.word	0x0800482c

08003a20 <_fwalk_reent>:
 8003a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a24:	4680      	mov	r8, r0
 8003a26:	4689      	mov	r9, r1
 8003a28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003a2c:	2600      	movs	r6, #0
 8003a2e:	b914      	cbnz	r4, 8003a36 <_fwalk_reent+0x16>
 8003a30:	4630      	mov	r0, r6
 8003a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a36:	68a5      	ldr	r5, [r4, #8]
 8003a38:	6867      	ldr	r7, [r4, #4]
 8003a3a:	3f01      	subs	r7, #1
 8003a3c:	d501      	bpl.n	8003a42 <_fwalk_reent+0x22>
 8003a3e:	6824      	ldr	r4, [r4, #0]
 8003a40:	e7f5      	b.n	8003a2e <_fwalk_reent+0xe>
 8003a42:	89ab      	ldrh	r3, [r5, #12]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d907      	bls.n	8003a58 <_fwalk_reent+0x38>
 8003a48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	d003      	beq.n	8003a58 <_fwalk_reent+0x38>
 8003a50:	4629      	mov	r1, r5
 8003a52:	4640      	mov	r0, r8
 8003a54:	47c8      	blx	r9
 8003a56:	4306      	orrs	r6, r0
 8003a58:	3568      	adds	r5, #104	; 0x68
 8003a5a:	e7ee      	b.n	8003a3a <_fwalk_reent+0x1a>

08003a5c <_malloc_r>:
 8003a5c:	b570      	push	{r4, r5, r6, lr}
 8003a5e:	1ccd      	adds	r5, r1, #3
 8003a60:	f025 0503 	bic.w	r5, r5, #3
 8003a64:	3508      	adds	r5, #8
 8003a66:	2d0c      	cmp	r5, #12
 8003a68:	bf38      	it	cc
 8003a6a:	250c      	movcc	r5, #12
 8003a6c:	2d00      	cmp	r5, #0
 8003a6e:	4606      	mov	r6, r0
 8003a70:	db01      	blt.n	8003a76 <_malloc_r+0x1a>
 8003a72:	42a9      	cmp	r1, r5
 8003a74:	d903      	bls.n	8003a7e <_malloc_r+0x22>
 8003a76:	230c      	movs	r3, #12
 8003a78:	6033      	str	r3, [r6, #0]
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	bd70      	pop	{r4, r5, r6, pc}
 8003a7e:	f000 fd7f 	bl	8004580 <__malloc_lock>
 8003a82:	4a23      	ldr	r2, [pc, #140]	; (8003b10 <_malloc_r+0xb4>)
 8003a84:	6814      	ldr	r4, [r2, #0]
 8003a86:	4621      	mov	r1, r4
 8003a88:	b991      	cbnz	r1, 8003ab0 <_malloc_r+0x54>
 8003a8a:	4c22      	ldr	r4, [pc, #136]	; (8003b14 <_malloc_r+0xb8>)
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	b91b      	cbnz	r3, 8003a98 <_malloc_r+0x3c>
 8003a90:	4630      	mov	r0, r6
 8003a92:	f000 fb17 	bl	80040c4 <_sbrk_r>
 8003a96:	6020      	str	r0, [r4, #0]
 8003a98:	4629      	mov	r1, r5
 8003a9a:	4630      	mov	r0, r6
 8003a9c:	f000 fb12 	bl	80040c4 <_sbrk_r>
 8003aa0:	1c43      	adds	r3, r0, #1
 8003aa2:	d126      	bne.n	8003af2 <_malloc_r+0x96>
 8003aa4:	230c      	movs	r3, #12
 8003aa6:	6033      	str	r3, [r6, #0]
 8003aa8:	4630      	mov	r0, r6
 8003aaa:	f000 fd6a 	bl	8004582 <__malloc_unlock>
 8003aae:	e7e4      	b.n	8003a7a <_malloc_r+0x1e>
 8003ab0:	680b      	ldr	r3, [r1, #0]
 8003ab2:	1b5b      	subs	r3, r3, r5
 8003ab4:	d41a      	bmi.n	8003aec <_malloc_r+0x90>
 8003ab6:	2b0b      	cmp	r3, #11
 8003ab8:	d90f      	bls.n	8003ada <_malloc_r+0x7e>
 8003aba:	600b      	str	r3, [r1, #0]
 8003abc:	50cd      	str	r5, [r1, r3]
 8003abe:	18cc      	adds	r4, r1, r3
 8003ac0:	4630      	mov	r0, r6
 8003ac2:	f000 fd5e 	bl	8004582 <__malloc_unlock>
 8003ac6:	f104 000b 	add.w	r0, r4, #11
 8003aca:	1d23      	adds	r3, r4, #4
 8003acc:	f020 0007 	bic.w	r0, r0, #7
 8003ad0:	1ac3      	subs	r3, r0, r3
 8003ad2:	d01b      	beq.n	8003b0c <_malloc_r+0xb0>
 8003ad4:	425a      	negs	r2, r3
 8003ad6:	50e2      	str	r2, [r4, r3]
 8003ad8:	bd70      	pop	{r4, r5, r6, pc}
 8003ada:	428c      	cmp	r4, r1
 8003adc:	bf0d      	iteet	eq
 8003ade:	6863      	ldreq	r3, [r4, #4]
 8003ae0:	684b      	ldrne	r3, [r1, #4]
 8003ae2:	6063      	strne	r3, [r4, #4]
 8003ae4:	6013      	streq	r3, [r2, #0]
 8003ae6:	bf18      	it	ne
 8003ae8:	460c      	movne	r4, r1
 8003aea:	e7e9      	b.n	8003ac0 <_malloc_r+0x64>
 8003aec:	460c      	mov	r4, r1
 8003aee:	6849      	ldr	r1, [r1, #4]
 8003af0:	e7ca      	b.n	8003a88 <_malloc_r+0x2c>
 8003af2:	1cc4      	adds	r4, r0, #3
 8003af4:	f024 0403 	bic.w	r4, r4, #3
 8003af8:	42a0      	cmp	r0, r4
 8003afa:	d005      	beq.n	8003b08 <_malloc_r+0xac>
 8003afc:	1a21      	subs	r1, r4, r0
 8003afe:	4630      	mov	r0, r6
 8003b00:	f000 fae0 	bl	80040c4 <_sbrk_r>
 8003b04:	3001      	adds	r0, #1
 8003b06:	d0cd      	beq.n	8003aa4 <_malloc_r+0x48>
 8003b08:	6025      	str	r5, [r4, #0]
 8003b0a:	e7d9      	b.n	8003ac0 <_malloc_r+0x64>
 8003b0c:	bd70      	pop	{r4, r5, r6, pc}
 8003b0e:	bf00      	nop
 8003b10:	200028e4 	.word	0x200028e4
 8003b14:	200028e8 	.word	0x200028e8

08003b18 <__sfputc_r>:
 8003b18:	6893      	ldr	r3, [r2, #8]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	b410      	push	{r4}
 8003b20:	6093      	str	r3, [r2, #8]
 8003b22:	da09      	bge.n	8003b38 <__sfputc_r+0x20>
 8003b24:	6994      	ldr	r4, [r2, #24]
 8003b26:	42a3      	cmp	r3, r4
 8003b28:	db02      	blt.n	8003b30 <__sfputc_r+0x18>
 8003b2a:	b2cb      	uxtb	r3, r1
 8003b2c:	2b0a      	cmp	r3, #10
 8003b2e:	d103      	bne.n	8003b38 <__sfputc_r+0x20>
 8003b30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b34:	f000 bb1a 	b.w	800416c <__swbuf_r>
 8003b38:	6813      	ldr	r3, [r2, #0]
 8003b3a:	1c58      	adds	r0, r3, #1
 8003b3c:	6010      	str	r0, [r2, #0]
 8003b3e:	7019      	strb	r1, [r3, #0]
 8003b40:	b2c8      	uxtb	r0, r1
 8003b42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <__sfputs_r>:
 8003b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4a:	4606      	mov	r6, r0
 8003b4c:	460f      	mov	r7, r1
 8003b4e:	4614      	mov	r4, r2
 8003b50:	18d5      	adds	r5, r2, r3
 8003b52:	42ac      	cmp	r4, r5
 8003b54:	d101      	bne.n	8003b5a <__sfputs_r+0x12>
 8003b56:	2000      	movs	r0, #0
 8003b58:	e007      	b.n	8003b6a <__sfputs_r+0x22>
 8003b5a:	463a      	mov	r2, r7
 8003b5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b60:	4630      	mov	r0, r6
 8003b62:	f7ff ffd9 	bl	8003b18 <__sfputc_r>
 8003b66:	1c43      	adds	r3, r0, #1
 8003b68:	d1f3      	bne.n	8003b52 <__sfputs_r+0xa>
 8003b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003b6c <_vfiprintf_r>:
 8003b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b70:	b09d      	sub	sp, #116	; 0x74
 8003b72:	460c      	mov	r4, r1
 8003b74:	4617      	mov	r7, r2
 8003b76:	9303      	str	r3, [sp, #12]
 8003b78:	4606      	mov	r6, r0
 8003b7a:	b118      	cbz	r0, 8003b84 <_vfiprintf_r+0x18>
 8003b7c:	6983      	ldr	r3, [r0, #24]
 8003b7e:	b90b      	cbnz	r3, 8003b84 <_vfiprintf_r+0x18>
 8003b80:	f7ff fee2 	bl	8003948 <__sinit>
 8003b84:	4b7c      	ldr	r3, [pc, #496]	; (8003d78 <_vfiprintf_r+0x20c>)
 8003b86:	429c      	cmp	r4, r3
 8003b88:	d157      	bne.n	8003c3a <_vfiprintf_r+0xce>
 8003b8a:	6874      	ldr	r4, [r6, #4]
 8003b8c:	89a3      	ldrh	r3, [r4, #12]
 8003b8e:	0718      	lsls	r0, r3, #28
 8003b90:	d55d      	bpl.n	8003c4e <_vfiprintf_r+0xe2>
 8003b92:	6923      	ldr	r3, [r4, #16]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d05a      	beq.n	8003c4e <_vfiprintf_r+0xe2>
 8003b98:	2300      	movs	r3, #0
 8003b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8003b9c:	2320      	movs	r3, #32
 8003b9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ba2:	2330      	movs	r3, #48	; 0x30
 8003ba4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ba8:	f04f 0b01 	mov.w	fp, #1
 8003bac:	46b8      	mov	r8, r7
 8003bae:	4645      	mov	r5, r8
 8003bb0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d155      	bne.n	8003c64 <_vfiprintf_r+0xf8>
 8003bb8:	ebb8 0a07 	subs.w	sl, r8, r7
 8003bbc:	d00b      	beq.n	8003bd6 <_vfiprintf_r+0x6a>
 8003bbe:	4653      	mov	r3, sl
 8003bc0:	463a      	mov	r2, r7
 8003bc2:	4621      	mov	r1, r4
 8003bc4:	4630      	mov	r0, r6
 8003bc6:	f7ff ffbf 	bl	8003b48 <__sfputs_r>
 8003bca:	3001      	adds	r0, #1
 8003bcc:	f000 80c4 	beq.w	8003d58 <_vfiprintf_r+0x1ec>
 8003bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bd2:	4453      	add	r3, sl
 8003bd4:	9309      	str	r3, [sp, #36]	; 0x24
 8003bd6:	f898 3000 	ldrb.w	r3, [r8]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 80bc 	beq.w	8003d58 <_vfiprintf_r+0x1ec>
 8003be0:	2300      	movs	r3, #0
 8003be2:	f04f 32ff 	mov.w	r2, #4294967295
 8003be6:	9304      	str	r3, [sp, #16]
 8003be8:	9307      	str	r3, [sp, #28]
 8003bea:	9205      	str	r2, [sp, #20]
 8003bec:	9306      	str	r3, [sp, #24]
 8003bee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003bf2:	931a      	str	r3, [sp, #104]	; 0x68
 8003bf4:	2205      	movs	r2, #5
 8003bf6:	7829      	ldrb	r1, [r5, #0]
 8003bf8:	4860      	ldr	r0, [pc, #384]	; (8003d7c <_vfiprintf_r+0x210>)
 8003bfa:	f7fc fae9 	bl	80001d0 <memchr>
 8003bfe:	f105 0801 	add.w	r8, r5, #1
 8003c02:	9b04      	ldr	r3, [sp, #16]
 8003c04:	2800      	cmp	r0, #0
 8003c06:	d131      	bne.n	8003c6c <_vfiprintf_r+0x100>
 8003c08:	06d9      	lsls	r1, r3, #27
 8003c0a:	bf44      	itt	mi
 8003c0c:	2220      	movmi	r2, #32
 8003c0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c12:	071a      	lsls	r2, r3, #28
 8003c14:	bf44      	itt	mi
 8003c16:	222b      	movmi	r2, #43	; 0x2b
 8003c18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c1c:	782a      	ldrb	r2, [r5, #0]
 8003c1e:	2a2a      	cmp	r2, #42	; 0x2a
 8003c20:	d02c      	beq.n	8003c7c <_vfiprintf_r+0x110>
 8003c22:	9a07      	ldr	r2, [sp, #28]
 8003c24:	2100      	movs	r1, #0
 8003c26:	200a      	movs	r0, #10
 8003c28:	46a8      	mov	r8, r5
 8003c2a:	3501      	adds	r5, #1
 8003c2c:	f898 3000 	ldrb.w	r3, [r8]
 8003c30:	3b30      	subs	r3, #48	; 0x30
 8003c32:	2b09      	cmp	r3, #9
 8003c34:	d96d      	bls.n	8003d12 <_vfiprintf_r+0x1a6>
 8003c36:	b371      	cbz	r1, 8003c96 <_vfiprintf_r+0x12a>
 8003c38:	e026      	b.n	8003c88 <_vfiprintf_r+0x11c>
 8003c3a:	4b51      	ldr	r3, [pc, #324]	; (8003d80 <_vfiprintf_r+0x214>)
 8003c3c:	429c      	cmp	r4, r3
 8003c3e:	d101      	bne.n	8003c44 <_vfiprintf_r+0xd8>
 8003c40:	68b4      	ldr	r4, [r6, #8]
 8003c42:	e7a3      	b.n	8003b8c <_vfiprintf_r+0x20>
 8003c44:	4b4f      	ldr	r3, [pc, #316]	; (8003d84 <_vfiprintf_r+0x218>)
 8003c46:	429c      	cmp	r4, r3
 8003c48:	bf08      	it	eq
 8003c4a:	68f4      	ldreq	r4, [r6, #12]
 8003c4c:	e79e      	b.n	8003b8c <_vfiprintf_r+0x20>
 8003c4e:	4621      	mov	r1, r4
 8003c50:	4630      	mov	r0, r6
 8003c52:	f000 faef 	bl	8004234 <__swsetup_r>
 8003c56:	2800      	cmp	r0, #0
 8003c58:	d09e      	beq.n	8003b98 <_vfiprintf_r+0x2c>
 8003c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c5e:	b01d      	add	sp, #116	; 0x74
 8003c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c64:	2b25      	cmp	r3, #37	; 0x25
 8003c66:	d0a7      	beq.n	8003bb8 <_vfiprintf_r+0x4c>
 8003c68:	46a8      	mov	r8, r5
 8003c6a:	e7a0      	b.n	8003bae <_vfiprintf_r+0x42>
 8003c6c:	4a43      	ldr	r2, [pc, #268]	; (8003d7c <_vfiprintf_r+0x210>)
 8003c6e:	1a80      	subs	r0, r0, r2
 8003c70:	fa0b f000 	lsl.w	r0, fp, r0
 8003c74:	4318      	orrs	r0, r3
 8003c76:	9004      	str	r0, [sp, #16]
 8003c78:	4645      	mov	r5, r8
 8003c7a:	e7bb      	b.n	8003bf4 <_vfiprintf_r+0x88>
 8003c7c:	9a03      	ldr	r2, [sp, #12]
 8003c7e:	1d11      	adds	r1, r2, #4
 8003c80:	6812      	ldr	r2, [r2, #0]
 8003c82:	9103      	str	r1, [sp, #12]
 8003c84:	2a00      	cmp	r2, #0
 8003c86:	db01      	blt.n	8003c8c <_vfiprintf_r+0x120>
 8003c88:	9207      	str	r2, [sp, #28]
 8003c8a:	e004      	b.n	8003c96 <_vfiprintf_r+0x12a>
 8003c8c:	4252      	negs	r2, r2
 8003c8e:	f043 0302 	orr.w	r3, r3, #2
 8003c92:	9207      	str	r2, [sp, #28]
 8003c94:	9304      	str	r3, [sp, #16]
 8003c96:	f898 3000 	ldrb.w	r3, [r8]
 8003c9a:	2b2e      	cmp	r3, #46	; 0x2e
 8003c9c:	d110      	bne.n	8003cc0 <_vfiprintf_r+0x154>
 8003c9e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003ca2:	2b2a      	cmp	r3, #42	; 0x2a
 8003ca4:	f108 0101 	add.w	r1, r8, #1
 8003ca8:	d137      	bne.n	8003d1a <_vfiprintf_r+0x1ae>
 8003caa:	9b03      	ldr	r3, [sp, #12]
 8003cac:	1d1a      	adds	r2, r3, #4
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	9203      	str	r2, [sp, #12]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	bfb8      	it	lt
 8003cb6:	f04f 33ff 	movlt.w	r3, #4294967295
 8003cba:	f108 0802 	add.w	r8, r8, #2
 8003cbe:	9305      	str	r3, [sp, #20]
 8003cc0:	4d31      	ldr	r5, [pc, #196]	; (8003d88 <_vfiprintf_r+0x21c>)
 8003cc2:	f898 1000 	ldrb.w	r1, [r8]
 8003cc6:	2203      	movs	r2, #3
 8003cc8:	4628      	mov	r0, r5
 8003cca:	f7fc fa81 	bl	80001d0 <memchr>
 8003cce:	b140      	cbz	r0, 8003ce2 <_vfiprintf_r+0x176>
 8003cd0:	2340      	movs	r3, #64	; 0x40
 8003cd2:	1b40      	subs	r0, r0, r5
 8003cd4:	fa03 f000 	lsl.w	r0, r3, r0
 8003cd8:	9b04      	ldr	r3, [sp, #16]
 8003cda:	4303      	orrs	r3, r0
 8003cdc:	9304      	str	r3, [sp, #16]
 8003cde:	f108 0801 	add.w	r8, r8, #1
 8003ce2:	f898 1000 	ldrb.w	r1, [r8]
 8003ce6:	4829      	ldr	r0, [pc, #164]	; (8003d8c <_vfiprintf_r+0x220>)
 8003ce8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003cec:	2206      	movs	r2, #6
 8003cee:	f108 0701 	add.w	r7, r8, #1
 8003cf2:	f7fc fa6d 	bl	80001d0 <memchr>
 8003cf6:	2800      	cmp	r0, #0
 8003cf8:	d034      	beq.n	8003d64 <_vfiprintf_r+0x1f8>
 8003cfa:	4b25      	ldr	r3, [pc, #148]	; (8003d90 <_vfiprintf_r+0x224>)
 8003cfc:	bb03      	cbnz	r3, 8003d40 <_vfiprintf_r+0x1d4>
 8003cfe:	9b03      	ldr	r3, [sp, #12]
 8003d00:	3307      	adds	r3, #7
 8003d02:	f023 0307 	bic.w	r3, r3, #7
 8003d06:	3308      	adds	r3, #8
 8003d08:	9303      	str	r3, [sp, #12]
 8003d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d0c:	444b      	add	r3, r9
 8003d0e:	9309      	str	r3, [sp, #36]	; 0x24
 8003d10:	e74c      	b.n	8003bac <_vfiprintf_r+0x40>
 8003d12:	fb00 3202 	mla	r2, r0, r2, r3
 8003d16:	2101      	movs	r1, #1
 8003d18:	e786      	b.n	8003c28 <_vfiprintf_r+0xbc>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	9305      	str	r3, [sp, #20]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	250a      	movs	r5, #10
 8003d22:	4688      	mov	r8, r1
 8003d24:	3101      	adds	r1, #1
 8003d26:	f898 2000 	ldrb.w	r2, [r8]
 8003d2a:	3a30      	subs	r2, #48	; 0x30
 8003d2c:	2a09      	cmp	r2, #9
 8003d2e:	d903      	bls.n	8003d38 <_vfiprintf_r+0x1cc>
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0c5      	beq.n	8003cc0 <_vfiprintf_r+0x154>
 8003d34:	9005      	str	r0, [sp, #20]
 8003d36:	e7c3      	b.n	8003cc0 <_vfiprintf_r+0x154>
 8003d38:	fb05 2000 	mla	r0, r5, r0, r2
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e7f0      	b.n	8003d22 <_vfiprintf_r+0x1b6>
 8003d40:	ab03      	add	r3, sp, #12
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	4622      	mov	r2, r4
 8003d46:	4b13      	ldr	r3, [pc, #76]	; (8003d94 <_vfiprintf_r+0x228>)
 8003d48:	a904      	add	r1, sp, #16
 8003d4a:	4630      	mov	r0, r6
 8003d4c:	f3af 8000 	nop.w
 8003d50:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003d54:	4681      	mov	r9, r0
 8003d56:	d1d8      	bne.n	8003d0a <_vfiprintf_r+0x19e>
 8003d58:	89a3      	ldrh	r3, [r4, #12]
 8003d5a:	065b      	lsls	r3, r3, #25
 8003d5c:	f53f af7d 	bmi.w	8003c5a <_vfiprintf_r+0xee>
 8003d60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d62:	e77c      	b.n	8003c5e <_vfiprintf_r+0xf2>
 8003d64:	ab03      	add	r3, sp, #12
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	4622      	mov	r2, r4
 8003d6a:	4b0a      	ldr	r3, [pc, #40]	; (8003d94 <_vfiprintf_r+0x228>)
 8003d6c:	a904      	add	r1, sp, #16
 8003d6e:	4630      	mov	r0, r6
 8003d70:	f000 f888 	bl	8003e84 <_printf_i>
 8003d74:	e7ec      	b.n	8003d50 <_vfiprintf_r+0x1e4>
 8003d76:	bf00      	nop
 8003d78:	080047ec 	.word	0x080047ec
 8003d7c:	08004830 	.word	0x08004830
 8003d80:	0800480c 	.word	0x0800480c
 8003d84:	080047cc 	.word	0x080047cc
 8003d88:	08004836 	.word	0x08004836
 8003d8c:	0800483a 	.word	0x0800483a
 8003d90:	00000000 	.word	0x00000000
 8003d94:	08003b49 	.word	0x08003b49

08003d98 <_printf_common>:
 8003d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d9c:	4691      	mov	r9, r2
 8003d9e:	461f      	mov	r7, r3
 8003da0:	688a      	ldr	r2, [r1, #8]
 8003da2:	690b      	ldr	r3, [r1, #16]
 8003da4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003da8:	4293      	cmp	r3, r2
 8003daa:	bfb8      	it	lt
 8003dac:	4613      	movlt	r3, r2
 8003dae:	f8c9 3000 	str.w	r3, [r9]
 8003db2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003db6:	4606      	mov	r6, r0
 8003db8:	460c      	mov	r4, r1
 8003dba:	b112      	cbz	r2, 8003dc2 <_printf_common+0x2a>
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	f8c9 3000 	str.w	r3, [r9]
 8003dc2:	6823      	ldr	r3, [r4, #0]
 8003dc4:	0699      	lsls	r1, r3, #26
 8003dc6:	bf42      	ittt	mi
 8003dc8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003dcc:	3302      	addmi	r3, #2
 8003dce:	f8c9 3000 	strmi.w	r3, [r9]
 8003dd2:	6825      	ldr	r5, [r4, #0]
 8003dd4:	f015 0506 	ands.w	r5, r5, #6
 8003dd8:	d107      	bne.n	8003dea <_printf_common+0x52>
 8003dda:	f104 0a19 	add.w	sl, r4, #25
 8003dde:	68e3      	ldr	r3, [r4, #12]
 8003de0:	f8d9 2000 	ldr.w	r2, [r9]
 8003de4:	1a9b      	subs	r3, r3, r2
 8003de6:	429d      	cmp	r5, r3
 8003de8:	db29      	blt.n	8003e3e <_printf_common+0xa6>
 8003dea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003dee:	6822      	ldr	r2, [r4, #0]
 8003df0:	3300      	adds	r3, #0
 8003df2:	bf18      	it	ne
 8003df4:	2301      	movne	r3, #1
 8003df6:	0692      	lsls	r2, r2, #26
 8003df8:	d42e      	bmi.n	8003e58 <_printf_common+0xc0>
 8003dfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003dfe:	4639      	mov	r1, r7
 8003e00:	4630      	mov	r0, r6
 8003e02:	47c0      	blx	r8
 8003e04:	3001      	adds	r0, #1
 8003e06:	d021      	beq.n	8003e4c <_printf_common+0xb4>
 8003e08:	6823      	ldr	r3, [r4, #0]
 8003e0a:	68e5      	ldr	r5, [r4, #12]
 8003e0c:	f8d9 2000 	ldr.w	r2, [r9]
 8003e10:	f003 0306 	and.w	r3, r3, #6
 8003e14:	2b04      	cmp	r3, #4
 8003e16:	bf08      	it	eq
 8003e18:	1aad      	subeq	r5, r5, r2
 8003e1a:	68a3      	ldr	r3, [r4, #8]
 8003e1c:	6922      	ldr	r2, [r4, #16]
 8003e1e:	bf0c      	ite	eq
 8003e20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e24:	2500      	movne	r5, #0
 8003e26:	4293      	cmp	r3, r2
 8003e28:	bfc4      	itt	gt
 8003e2a:	1a9b      	subgt	r3, r3, r2
 8003e2c:	18ed      	addgt	r5, r5, r3
 8003e2e:	f04f 0900 	mov.w	r9, #0
 8003e32:	341a      	adds	r4, #26
 8003e34:	454d      	cmp	r5, r9
 8003e36:	d11b      	bne.n	8003e70 <_printf_common+0xd8>
 8003e38:	2000      	movs	r0, #0
 8003e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e3e:	2301      	movs	r3, #1
 8003e40:	4652      	mov	r2, sl
 8003e42:	4639      	mov	r1, r7
 8003e44:	4630      	mov	r0, r6
 8003e46:	47c0      	blx	r8
 8003e48:	3001      	adds	r0, #1
 8003e4a:	d103      	bne.n	8003e54 <_printf_common+0xbc>
 8003e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e54:	3501      	adds	r5, #1
 8003e56:	e7c2      	b.n	8003dde <_printf_common+0x46>
 8003e58:	18e1      	adds	r1, r4, r3
 8003e5a:	1c5a      	adds	r2, r3, #1
 8003e5c:	2030      	movs	r0, #48	; 0x30
 8003e5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e62:	4422      	add	r2, r4
 8003e64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e6c:	3302      	adds	r3, #2
 8003e6e:	e7c4      	b.n	8003dfa <_printf_common+0x62>
 8003e70:	2301      	movs	r3, #1
 8003e72:	4622      	mov	r2, r4
 8003e74:	4639      	mov	r1, r7
 8003e76:	4630      	mov	r0, r6
 8003e78:	47c0      	blx	r8
 8003e7a:	3001      	adds	r0, #1
 8003e7c:	d0e6      	beq.n	8003e4c <_printf_common+0xb4>
 8003e7e:	f109 0901 	add.w	r9, r9, #1
 8003e82:	e7d7      	b.n	8003e34 <_printf_common+0x9c>

08003e84 <_printf_i>:
 8003e84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e88:	4617      	mov	r7, r2
 8003e8a:	7e0a      	ldrb	r2, [r1, #24]
 8003e8c:	b085      	sub	sp, #20
 8003e8e:	2a6e      	cmp	r2, #110	; 0x6e
 8003e90:	4698      	mov	r8, r3
 8003e92:	4606      	mov	r6, r0
 8003e94:	460c      	mov	r4, r1
 8003e96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003e98:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003e9c:	f000 80bc 	beq.w	8004018 <_printf_i+0x194>
 8003ea0:	d81a      	bhi.n	8003ed8 <_printf_i+0x54>
 8003ea2:	2a63      	cmp	r2, #99	; 0x63
 8003ea4:	d02e      	beq.n	8003f04 <_printf_i+0x80>
 8003ea6:	d80a      	bhi.n	8003ebe <_printf_i+0x3a>
 8003ea8:	2a00      	cmp	r2, #0
 8003eaa:	f000 80c8 	beq.w	800403e <_printf_i+0x1ba>
 8003eae:	2a58      	cmp	r2, #88	; 0x58
 8003eb0:	f000 808a 	beq.w	8003fc8 <_printf_i+0x144>
 8003eb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003eb8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003ebc:	e02a      	b.n	8003f14 <_printf_i+0x90>
 8003ebe:	2a64      	cmp	r2, #100	; 0x64
 8003ec0:	d001      	beq.n	8003ec6 <_printf_i+0x42>
 8003ec2:	2a69      	cmp	r2, #105	; 0x69
 8003ec4:	d1f6      	bne.n	8003eb4 <_printf_i+0x30>
 8003ec6:	6821      	ldr	r1, [r4, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003ece:	d023      	beq.n	8003f18 <_printf_i+0x94>
 8003ed0:	1d11      	adds	r1, r2, #4
 8003ed2:	6019      	str	r1, [r3, #0]
 8003ed4:	6813      	ldr	r3, [r2, #0]
 8003ed6:	e027      	b.n	8003f28 <_printf_i+0xa4>
 8003ed8:	2a73      	cmp	r2, #115	; 0x73
 8003eda:	f000 80b4 	beq.w	8004046 <_printf_i+0x1c2>
 8003ede:	d808      	bhi.n	8003ef2 <_printf_i+0x6e>
 8003ee0:	2a6f      	cmp	r2, #111	; 0x6f
 8003ee2:	d02a      	beq.n	8003f3a <_printf_i+0xb6>
 8003ee4:	2a70      	cmp	r2, #112	; 0x70
 8003ee6:	d1e5      	bne.n	8003eb4 <_printf_i+0x30>
 8003ee8:	680a      	ldr	r2, [r1, #0]
 8003eea:	f042 0220 	orr.w	r2, r2, #32
 8003eee:	600a      	str	r2, [r1, #0]
 8003ef0:	e003      	b.n	8003efa <_printf_i+0x76>
 8003ef2:	2a75      	cmp	r2, #117	; 0x75
 8003ef4:	d021      	beq.n	8003f3a <_printf_i+0xb6>
 8003ef6:	2a78      	cmp	r2, #120	; 0x78
 8003ef8:	d1dc      	bne.n	8003eb4 <_printf_i+0x30>
 8003efa:	2278      	movs	r2, #120	; 0x78
 8003efc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003f00:	496e      	ldr	r1, [pc, #440]	; (80040bc <_printf_i+0x238>)
 8003f02:	e064      	b.n	8003fce <_printf_i+0x14a>
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003f0a:	1d11      	adds	r1, r2, #4
 8003f0c:	6019      	str	r1, [r3, #0]
 8003f0e:	6813      	ldr	r3, [r2, #0]
 8003f10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f14:	2301      	movs	r3, #1
 8003f16:	e0a3      	b.n	8004060 <_printf_i+0x1dc>
 8003f18:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003f1c:	f102 0104 	add.w	r1, r2, #4
 8003f20:	6019      	str	r1, [r3, #0]
 8003f22:	d0d7      	beq.n	8003ed4 <_printf_i+0x50>
 8003f24:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	da03      	bge.n	8003f34 <_printf_i+0xb0>
 8003f2c:	222d      	movs	r2, #45	; 0x2d
 8003f2e:	425b      	negs	r3, r3
 8003f30:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003f34:	4962      	ldr	r1, [pc, #392]	; (80040c0 <_printf_i+0x23c>)
 8003f36:	220a      	movs	r2, #10
 8003f38:	e017      	b.n	8003f6a <_printf_i+0xe6>
 8003f3a:	6820      	ldr	r0, [r4, #0]
 8003f3c:	6819      	ldr	r1, [r3, #0]
 8003f3e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003f42:	d003      	beq.n	8003f4c <_printf_i+0xc8>
 8003f44:	1d08      	adds	r0, r1, #4
 8003f46:	6018      	str	r0, [r3, #0]
 8003f48:	680b      	ldr	r3, [r1, #0]
 8003f4a:	e006      	b.n	8003f5a <_printf_i+0xd6>
 8003f4c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f50:	f101 0004 	add.w	r0, r1, #4
 8003f54:	6018      	str	r0, [r3, #0]
 8003f56:	d0f7      	beq.n	8003f48 <_printf_i+0xc4>
 8003f58:	880b      	ldrh	r3, [r1, #0]
 8003f5a:	4959      	ldr	r1, [pc, #356]	; (80040c0 <_printf_i+0x23c>)
 8003f5c:	2a6f      	cmp	r2, #111	; 0x6f
 8003f5e:	bf14      	ite	ne
 8003f60:	220a      	movne	r2, #10
 8003f62:	2208      	moveq	r2, #8
 8003f64:	2000      	movs	r0, #0
 8003f66:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003f6a:	6865      	ldr	r5, [r4, #4]
 8003f6c:	60a5      	str	r5, [r4, #8]
 8003f6e:	2d00      	cmp	r5, #0
 8003f70:	f2c0 809c 	blt.w	80040ac <_printf_i+0x228>
 8003f74:	6820      	ldr	r0, [r4, #0]
 8003f76:	f020 0004 	bic.w	r0, r0, #4
 8003f7a:	6020      	str	r0, [r4, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d13f      	bne.n	8004000 <_printf_i+0x17c>
 8003f80:	2d00      	cmp	r5, #0
 8003f82:	f040 8095 	bne.w	80040b0 <_printf_i+0x22c>
 8003f86:	4675      	mov	r5, lr
 8003f88:	2a08      	cmp	r2, #8
 8003f8a:	d10b      	bne.n	8003fa4 <_printf_i+0x120>
 8003f8c:	6823      	ldr	r3, [r4, #0]
 8003f8e:	07da      	lsls	r2, r3, #31
 8003f90:	d508      	bpl.n	8003fa4 <_printf_i+0x120>
 8003f92:	6923      	ldr	r3, [r4, #16]
 8003f94:	6862      	ldr	r2, [r4, #4]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	bfde      	ittt	le
 8003f9a:	2330      	movle	r3, #48	; 0x30
 8003f9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fa0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003fa4:	ebae 0305 	sub.w	r3, lr, r5
 8003fa8:	6123      	str	r3, [r4, #16]
 8003faa:	f8cd 8000 	str.w	r8, [sp]
 8003fae:	463b      	mov	r3, r7
 8003fb0:	aa03      	add	r2, sp, #12
 8003fb2:	4621      	mov	r1, r4
 8003fb4:	4630      	mov	r0, r6
 8003fb6:	f7ff feef 	bl	8003d98 <_printf_common>
 8003fba:	3001      	adds	r0, #1
 8003fbc:	d155      	bne.n	800406a <_printf_i+0x1e6>
 8003fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc2:	b005      	add	sp, #20
 8003fc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003fc8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003fcc:	493c      	ldr	r1, [pc, #240]	; (80040c0 <_printf_i+0x23c>)
 8003fce:	6822      	ldr	r2, [r4, #0]
 8003fd0:	6818      	ldr	r0, [r3, #0]
 8003fd2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003fd6:	f100 0504 	add.w	r5, r0, #4
 8003fda:	601d      	str	r5, [r3, #0]
 8003fdc:	d001      	beq.n	8003fe2 <_printf_i+0x15e>
 8003fde:	6803      	ldr	r3, [r0, #0]
 8003fe0:	e002      	b.n	8003fe8 <_printf_i+0x164>
 8003fe2:	0655      	lsls	r5, r2, #25
 8003fe4:	d5fb      	bpl.n	8003fde <_printf_i+0x15a>
 8003fe6:	8803      	ldrh	r3, [r0, #0]
 8003fe8:	07d0      	lsls	r0, r2, #31
 8003fea:	bf44      	itt	mi
 8003fec:	f042 0220 	orrmi.w	r2, r2, #32
 8003ff0:	6022      	strmi	r2, [r4, #0]
 8003ff2:	b91b      	cbnz	r3, 8003ffc <_printf_i+0x178>
 8003ff4:	6822      	ldr	r2, [r4, #0]
 8003ff6:	f022 0220 	bic.w	r2, r2, #32
 8003ffa:	6022      	str	r2, [r4, #0]
 8003ffc:	2210      	movs	r2, #16
 8003ffe:	e7b1      	b.n	8003f64 <_printf_i+0xe0>
 8004000:	4675      	mov	r5, lr
 8004002:	fbb3 f0f2 	udiv	r0, r3, r2
 8004006:	fb02 3310 	mls	r3, r2, r0, r3
 800400a:	5ccb      	ldrb	r3, [r1, r3]
 800400c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004010:	4603      	mov	r3, r0
 8004012:	2800      	cmp	r0, #0
 8004014:	d1f5      	bne.n	8004002 <_printf_i+0x17e>
 8004016:	e7b7      	b.n	8003f88 <_printf_i+0x104>
 8004018:	6808      	ldr	r0, [r1, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	6949      	ldr	r1, [r1, #20]
 800401e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004022:	d004      	beq.n	800402e <_printf_i+0x1aa>
 8004024:	1d10      	adds	r0, r2, #4
 8004026:	6018      	str	r0, [r3, #0]
 8004028:	6813      	ldr	r3, [r2, #0]
 800402a:	6019      	str	r1, [r3, #0]
 800402c:	e007      	b.n	800403e <_printf_i+0x1ba>
 800402e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004032:	f102 0004 	add.w	r0, r2, #4
 8004036:	6018      	str	r0, [r3, #0]
 8004038:	6813      	ldr	r3, [r2, #0]
 800403a:	d0f6      	beq.n	800402a <_printf_i+0x1a6>
 800403c:	8019      	strh	r1, [r3, #0]
 800403e:	2300      	movs	r3, #0
 8004040:	6123      	str	r3, [r4, #16]
 8004042:	4675      	mov	r5, lr
 8004044:	e7b1      	b.n	8003faa <_printf_i+0x126>
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	1d11      	adds	r1, r2, #4
 800404a:	6019      	str	r1, [r3, #0]
 800404c:	6815      	ldr	r5, [r2, #0]
 800404e:	6862      	ldr	r2, [r4, #4]
 8004050:	2100      	movs	r1, #0
 8004052:	4628      	mov	r0, r5
 8004054:	f7fc f8bc 	bl	80001d0 <memchr>
 8004058:	b108      	cbz	r0, 800405e <_printf_i+0x1da>
 800405a:	1b40      	subs	r0, r0, r5
 800405c:	6060      	str	r0, [r4, #4]
 800405e:	6863      	ldr	r3, [r4, #4]
 8004060:	6123      	str	r3, [r4, #16]
 8004062:	2300      	movs	r3, #0
 8004064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004068:	e79f      	b.n	8003faa <_printf_i+0x126>
 800406a:	6923      	ldr	r3, [r4, #16]
 800406c:	462a      	mov	r2, r5
 800406e:	4639      	mov	r1, r7
 8004070:	4630      	mov	r0, r6
 8004072:	47c0      	blx	r8
 8004074:	3001      	adds	r0, #1
 8004076:	d0a2      	beq.n	8003fbe <_printf_i+0x13a>
 8004078:	6823      	ldr	r3, [r4, #0]
 800407a:	079b      	lsls	r3, r3, #30
 800407c:	d507      	bpl.n	800408e <_printf_i+0x20a>
 800407e:	2500      	movs	r5, #0
 8004080:	f104 0919 	add.w	r9, r4, #25
 8004084:	68e3      	ldr	r3, [r4, #12]
 8004086:	9a03      	ldr	r2, [sp, #12]
 8004088:	1a9b      	subs	r3, r3, r2
 800408a:	429d      	cmp	r5, r3
 800408c:	db05      	blt.n	800409a <_printf_i+0x216>
 800408e:	68e0      	ldr	r0, [r4, #12]
 8004090:	9b03      	ldr	r3, [sp, #12]
 8004092:	4298      	cmp	r0, r3
 8004094:	bfb8      	it	lt
 8004096:	4618      	movlt	r0, r3
 8004098:	e793      	b.n	8003fc2 <_printf_i+0x13e>
 800409a:	2301      	movs	r3, #1
 800409c:	464a      	mov	r2, r9
 800409e:	4639      	mov	r1, r7
 80040a0:	4630      	mov	r0, r6
 80040a2:	47c0      	blx	r8
 80040a4:	3001      	adds	r0, #1
 80040a6:	d08a      	beq.n	8003fbe <_printf_i+0x13a>
 80040a8:	3501      	adds	r5, #1
 80040aa:	e7eb      	b.n	8004084 <_printf_i+0x200>
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1a7      	bne.n	8004000 <_printf_i+0x17c>
 80040b0:	780b      	ldrb	r3, [r1, #0]
 80040b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040ba:	e765      	b.n	8003f88 <_printf_i+0x104>
 80040bc:	08004852 	.word	0x08004852
 80040c0:	08004841 	.word	0x08004841

080040c4 <_sbrk_r>:
 80040c4:	b538      	push	{r3, r4, r5, lr}
 80040c6:	4c06      	ldr	r4, [pc, #24]	; (80040e0 <_sbrk_r+0x1c>)
 80040c8:	2300      	movs	r3, #0
 80040ca:	4605      	mov	r5, r0
 80040cc:	4608      	mov	r0, r1
 80040ce:	6023      	str	r3, [r4, #0]
 80040d0:	f000 fb02 	bl	80046d8 <_sbrk>
 80040d4:	1c43      	adds	r3, r0, #1
 80040d6:	d102      	bne.n	80040de <_sbrk_r+0x1a>
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	b103      	cbz	r3, 80040de <_sbrk_r+0x1a>
 80040dc:	602b      	str	r3, [r5, #0]
 80040de:	bd38      	pop	{r3, r4, r5, pc}
 80040e0:	200029b8 	.word	0x200029b8

080040e4 <__sread>:
 80040e4:	b510      	push	{r4, lr}
 80040e6:	460c      	mov	r4, r1
 80040e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040ec:	f000 fa98 	bl	8004620 <_read_r>
 80040f0:	2800      	cmp	r0, #0
 80040f2:	bfab      	itete	ge
 80040f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80040f6:	89a3      	ldrhlt	r3, [r4, #12]
 80040f8:	181b      	addge	r3, r3, r0
 80040fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80040fe:	bfac      	ite	ge
 8004100:	6563      	strge	r3, [r4, #84]	; 0x54
 8004102:	81a3      	strhlt	r3, [r4, #12]
 8004104:	bd10      	pop	{r4, pc}

08004106 <__swrite>:
 8004106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800410a:	461f      	mov	r7, r3
 800410c:	898b      	ldrh	r3, [r1, #12]
 800410e:	05db      	lsls	r3, r3, #23
 8004110:	4605      	mov	r5, r0
 8004112:	460c      	mov	r4, r1
 8004114:	4616      	mov	r6, r2
 8004116:	d505      	bpl.n	8004124 <__swrite+0x1e>
 8004118:	2302      	movs	r3, #2
 800411a:	2200      	movs	r2, #0
 800411c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004120:	f000 f9b8 	bl	8004494 <_lseek_r>
 8004124:	89a3      	ldrh	r3, [r4, #12]
 8004126:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800412a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800412e:	81a3      	strh	r3, [r4, #12]
 8004130:	4632      	mov	r2, r6
 8004132:	463b      	mov	r3, r7
 8004134:	4628      	mov	r0, r5
 8004136:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800413a:	f000 b869 	b.w	8004210 <_write_r>

0800413e <__sseek>:
 800413e:	b510      	push	{r4, lr}
 8004140:	460c      	mov	r4, r1
 8004142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004146:	f000 f9a5 	bl	8004494 <_lseek_r>
 800414a:	1c43      	adds	r3, r0, #1
 800414c:	89a3      	ldrh	r3, [r4, #12]
 800414e:	bf15      	itete	ne
 8004150:	6560      	strne	r0, [r4, #84]	; 0x54
 8004152:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004156:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800415a:	81a3      	strheq	r3, [r4, #12]
 800415c:	bf18      	it	ne
 800415e:	81a3      	strhne	r3, [r4, #12]
 8004160:	bd10      	pop	{r4, pc}

08004162 <__sclose>:
 8004162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004166:	f000 b8d3 	b.w	8004310 <_close_r>
	...

0800416c <__swbuf_r>:
 800416c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800416e:	460e      	mov	r6, r1
 8004170:	4614      	mov	r4, r2
 8004172:	4605      	mov	r5, r0
 8004174:	b118      	cbz	r0, 800417e <__swbuf_r+0x12>
 8004176:	6983      	ldr	r3, [r0, #24]
 8004178:	b90b      	cbnz	r3, 800417e <__swbuf_r+0x12>
 800417a:	f7ff fbe5 	bl	8003948 <__sinit>
 800417e:	4b21      	ldr	r3, [pc, #132]	; (8004204 <__swbuf_r+0x98>)
 8004180:	429c      	cmp	r4, r3
 8004182:	d12a      	bne.n	80041da <__swbuf_r+0x6e>
 8004184:	686c      	ldr	r4, [r5, #4]
 8004186:	69a3      	ldr	r3, [r4, #24]
 8004188:	60a3      	str	r3, [r4, #8]
 800418a:	89a3      	ldrh	r3, [r4, #12]
 800418c:	071a      	lsls	r2, r3, #28
 800418e:	d52e      	bpl.n	80041ee <__swbuf_r+0x82>
 8004190:	6923      	ldr	r3, [r4, #16]
 8004192:	b363      	cbz	r3, 80041ee <__swbuf_r+0x82>
 8004194:	6923      	ldr	r3, [r4, #16]
 8004196:	6820      	ldr	r0, [r4, #0]
 8004198:	1ac0      	subs	r0, r0, r3
 800419a:	6963      	ldr	r3, [r4, #20]
 800419c:	b2f6      	uxtb	r6, r6
 800419e:	4298      	cmp	r0, r3
 80041a0:	4637      	mov	r7, r6
 80041a2:	db04      	blt.n	80041ae <__swbuf_r+0x42>
 80041a4:	4621      	mov	r1, r4
 80041a6:	4628      	mov	r0, r5
 80041a8:	f000 f94a 	bl	8004440 <_fflush_r>
 80041ac:	bb28      	cbnz	r0, 80041fa <__swbuf_r+0x8e>
 80041ae:	68a3      	ldr	r3, [r4, #8]
 80041b0:	3b01      	subs	r3, #1
 80041b2:	60a3      	str	r3, [r4, #8]
 80041b4:	6823      	ldr	r3, [r4, #0]
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	6022      	str	r2, [r4, #0]
 80041ba:	701e      	strb	r6, [r3, #0]
 80041bc:	6963      	ldr	r3, [r4, #20]
 80041be:	3001      	adds	r0, #1
 80041c0:	4298      	cmp	r0, r3
 80041c2:	d004      	beq.n	80041ce <__swbuf_r+0x62>
 80041c4:	89a3      	ldrh	r3, [r4, #12]
 80041c6:	07db      	lsls	r3, r3, #31
 80041c8:	d519      	bpl.n	80041fe <__swbuf_r+0x92>
 80041ca:	2e0a      	cmp	r6, #10
 80041cc:	d117      	bne.n	80041fe <__swbuf_r+0x92>
 80041ce:	4621      	mov	r1, r4
 80041d0:	4628      	mov	r0, r5
 80041d2:	f000 f935 	bl	8004440 <_fflush_r>
 80041d6:	b190      	cbz	r0, 80041fe <__swbuf_r+0x92>
 80041d8:	e00f      	b.n	80041fa <__swbuf_r+0x8e>
 80041da:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <__swbuf_r+0x9c>)
 80041dc:	429c      	cmp	r4, r3
 80041de:	d101      	bne.n	80041e4 <__swbuf_r+0x78>
 80041e0:	68ac      	ldr	r4, [r5, #8]
 80041e2:	e7d0      	b.n	8004186 <__swbuf_r+0x1a>
 80041e4:	4b09      	ldr	r3, [pc, #36]	; (800420c <__swbuf_r+0xa0>)
 80041e6:	429c      	cmp	r4, r3
 80041e8:	bf08      	it	eq
 80041ea:	68ec      	ldreq	r4, [r5, #12]
 80041ec:	e7cb      	b.n	8004186 <__swbuf_r+0x1a>
 80041ee:	4621      	mov	r1, r4
 80041f0:	4628      	mov	r0, r5
 80041f2:	f000 f81f 	bl	8004234 <__swsetup_r>
 80041f6:	2800      	cmp	r0, #0
 80041f8:	d0cc      	beq.n	8004194 <__swbuf_r+0x28>
 80041fa:	f04f 37ff 	mov.w	r7, #4294967295
 80041fe:	4638      	mov	r0, r7
 8004200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004202:	bf00      	nop
 8004204:	080047ec 	.word	0x080047ec
 8004208:	0800480c 	.word	0x0800480c
 800420c:	080047cc 	.word	0x080047cc

08004210 <_write_r>:
 8004210:	b538      	push	{r3, r4, r5, lr}
 8004212:	4c07      	ldr	r4, [pc, #28]	; (8004230 <_write_r+0x20>)
 8004214:	4605      	mov	r5, r0
 8004216:	4608      	mov	r0, r1
 8004218:	4611      	mov	r1, r2
 800421a:	2200      	movs	r2, #0
 800421c:	6022      	str	r2, [r4, #0]
 800421e:	461a      	mov	r2, r3
 8004220:	f7ff f91a 	bl	8003458 <_write>
 8004224:	1c43      	adds	r3, r0, #1
 8004226:	d102      	bne.n	800422e <_write_r+0x1e>
 8004228:	6823      	ldr	r3, [r4, #0]
 800422a:	b103      	cbz	r3, 800422e <_write_r+0x1e>
 800422c:	602b      	str	r3, [r5, #0]
 800422e:	bd38      	pop	{r3, r4, r5, pc}
 8004230:	200029b8 	.word	0x200029b8

08004234 <__swsetup_r>:
 8004234:	4b32      	ldr	r3, [pc, #200]	; (8004300 <__swsetup_r+0xcc>)
 8004236:	b570      	push	{r4, r5, r6, lr}
 8004238:	681d      	ldr	r5, [r3, #0]
 800423a:	4606      	mov	r6, r0
 800423c:	460c      	mov	r4, r1
 800423e:	b125      	cbz	r5, 800424a <__swsetup_r+0x16>
 8004240:	69ab      	ldr	r3, [r5, #24]
 8004242:	b913      	cbnz	r3, 800424a <__swsetup_r+0x16>
 8004244:	4628      	mov	r0, r5
 8004246:	f7ff fb7f 	bl	8003948 <__sinit>
 800424a:	4b2e      	ldr	r3, [pc, #184]	; (8004304 <__swsetup_r+0xd0>)
 800424c:	429c      	cmp	r4, r3
 800424e:	d10f      	bne.n	8004270 <__swsetup_r+0x3c>
 8004250:	686c      	ldr	r4, [r5, #4]
 8004252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004256:	b29a      	uxth	r2, r3
 8004258:	0715      	lsls	r5, r2, #28
 800425a:	d42c      	bmi.n	80042b6 <__swsetup_r+0x82>
 800425c:	06d0      	lsls	r0, r2, #27
 800425e:	d411      	bmi.n	8004284 <__swsetup_r+0x50>
 8004260:	2209      	movs	r2, #9
 8004262:	6032      	str	r2, [r6, #0]
 8004264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004268:	81a3      	strh	r3, [r4, #12]
 800426a:	f04f 30ff 	mov.w	r0, #4294967295
 800426e:	bd70      	pop	{r4, r5, r6, pc}
 8004270:	4b25      	ldr	r3, [pc, #148]	; (8004308 <__swsetup_r+0xd4>)
 8004272:	429c      	cmp	r4, r3
 8004274:	d101      	bne.n	800427a <__swsetup_r+0x46>
 8004276:	68ac      	ldr	r4, [r5, #8]
 8004278:	e7eb      	b.n	8004252 <__swsetup_r+0x1e>
 800427a:	4b24      	ldr	r3, [pc, #144]	; (800430c <__swsetup_r+0xd8>)
 800427c:	429c      	cmp	r4, r3
 800427e:	bf08      	it	eq
 8004280:	68ec      	ldreq	r4, [r5, #12]
 8004282:	e7e6      	b.n	8004252 <__swsetup_r+0x1e>
 8004284:	0751      	lsls	r1, r2, #29
 8004286:	d512      	bpl.n	80042ae <__swsetup_r+0x7a>
 8004288:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800428a:	b141      	cbz	r1, 800429e <__swsetup_r+0x6a>
 800428c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004290:	4299      	cmp	r1, r3
 8004292:	d002      	beq.n	800429a <__swsetup_r+0x66>
 8004294:	4630      	mov	r0, r6
 8004296:	f000 f975 	bl	8004584 <_free_r>
 800429a:	2300      	movs	r3, #0
 800429c:	6363      	str	r3, [r4, #52]	; 0x34
 800429e:	89a3      	ldrh	r3, [r4, #12]
 80042a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80042a4:	81a3      	strh	r3, [r4, #12]
 80042a6:	2300      	movs	r3, #0
 80042a8:	6063      	str	r3, [r4, #4]
 80042aa:	6923      	ldr	r3, [r4, #16]
 80042ac:	6023      	str	r3, [r4, #0]
 80042ae:	89a3      	ldrh	r3, [r4, #12]
 80042b0:	f043 0308 	orr.w	r3, r3, #8
 80042b4:	81a3      	strh	r3, [r4, #12]
 80042b6:	6923      	ldr	r3, [r4, #16]
 80042b8:	b94b      	cbnz	r3, 80042ce <__swsetup_r+0x9a>
 80042ba:	89a3      	ldrh	r3, [r4, #12]
 80042bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80042c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042c4:	d003      	beq.n	80042ce <__swsetup_r+0x9a>
 80042c6:	4621      	mov	r1, r4
 80042c8:	4630      	mov	r0, r6
 80042ca:	f000 f919 	bl	8004500 <__smakebuf_r>
 80042ce:	89a2      	ldrh	r2, [r4, #12]
 80042d0:	f012 0301 	ands.w	r3, r2, #1
 80042d4:	d00c      	beq.n	80042f0 <__swsetup_r+0xbc>
 80042d6:	2300      	movs	r3, #0
 80042d8:	60a3      	str	r3, [r4, #8]
 80042da:	6963      	ldr	r3, [r4, #20]
 80042dc:	425b      	negs	r3, r3
 80042de:	61a3      	str	r3, [r4, #24]
 80042e0:	6923      	ldr	r3, [r4, #16]
 80042e2:	b953      	cbnz	r3, 80042fa <__swsetup_r+0xc6>
 80042e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80042ec:	d1ba      	bne.n	8004264 <__swsetup_r+0x30>
 80042ee:	bd70      	pop	{r4, r5, r6, pc}
 80042f0:	0792      	lsls	r2, r2, #30
 80042f2:	bf58      	it	pl
 80042f4:	6963      	ldrpl	r3, [r4, #20]
 80042f6:	60a3      	str	r3, [r4, #8]
 80042f8:	e7f2      	b.n	80042e0 <__swsetup_r+0xac>
 80042fa:	2000      	movs	r0, #0
 80042fc:	e7f7      	b.n	80042ee <__swsetup_r+0xba>
 80042fe:	bf00      	nop
 8004300:	20000008 	.word	0x20000008
 8004304:	080047ec 	.word	0x080047ec
 8004308:	0800480c 	.word	0x0800480c
 800430c:	080047cc 	.word	0x080047cc

08004310 <_close_r>:
 8004310:	b538      	push	{r3, r4, r5, lr}
 8004312:	4c06      	ldr	r4, [pc, #24]	; (800432c <_close_r+0x1c>)
 8004314:	2300      	movs	r3, #0
 8004316:	4605      	mov	r5, r0
 8004318:	4608      	mov	r0, r1
 800431a:	6023      	str	r3, [r4, #0]
 800431c:	f000 f9b4 	bl	8004688 <_close>
 8004320:	1c43      	adds	r3, r0, #1
 8004322:	d102      	bne.n	800432a <_close_r+0x1a>
 8004324:	6823      	ldr	r3, [r4, #0]
 8004326:	b103      	cbz	r3, 800432a <_close_r+0x1a>
 8004328:	602b      	str	r3, [r5, #0]
 800432a:	bd38      	pop	{r3, r4, r5, pc}
 800432c:	200029b8 	.word	0x200029b8

08004330 <__sflush_r>:
 8004330:	898a      	ldrh	r2, [r1, #12]
 8004332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004336:	4605      	mov	r5, r0
 8004338:	0710      	lsls	r0, r2, #28
 800433a:	460c      	mov	r4, r1
 800433c:	d45a      	bmi.n	80043f4 <__sflush_r+0xc4>
 800433e:	684b      	ldr	r3, [r1, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	dc05      	bgt.n	8004350 <__sflush_r+0x20>
 8004344:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004346:	2b00      	cmp	r3, #0
 8004348:	dc02      	bgt.n	8004350 <__sflush_r+0x20>
 800434a:	2000      	movs	r0, #0
 800434c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004350:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004352:	2e00      	cmp	r6, #0
 8004354:	d0f9      	beq.n	800434a <__sflush_r+0x1a>
 8004356:	2300      	movs	r3, #0
 8004358:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800435c:	682f      	ldr	r7, [r5, #0]
 800435e:	602b      	str	r3, [r5, #0]
 8004360:	d033      	beq.n	80043ca <__sflush_r+0x9a>
 8004362:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004364:	89a3      	ldrh	r3, [r4, #12]
 8004366:	075a      	lsls	r2, r3, #29
 8004368:	d505      	bpl.n	8004376 <__sflush_r+0x46>
 800436a:	6863      	ldr	r3, [r4, #4]
 800436c:	1ac0      	subs	r0, r0, r3
 800436e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004370:	b10b      	cbz	r3, 8004376 <__sflush_r+0x46>
 8004372:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004374:	1ac0      	subs	r0, r0, r3
 8004376:	2300      	movs	r3, #0
 8004378:	4602      	mov	r2, r0
 800437a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800437c:	6a21      	ldr	r1, [r4, #32]
 800437e:	4628      	mov	r0, r5
 8004380:	47b0      	blx	r6
 8004382:	1c43      	adds	r3, r0, #1
 8004384:	89a3      	ldrh	r3, [r4, #12]
 8004386:	d106      	bne.n	8004396 <__sflush_r+0x66>
 8004388:	6829      	ldr	r1, [r5, #0]
 800438a:	291d      	cmp	r1, #29
 800438c:	d84b      	bhi.n	8004426 <__sflush_r+0xf6>
 800438e:	4a2b      	ldr	r2, [pc, #172]	; (800443c <__sflush_r+0x10c>)
 8004390:	40ca      	lsrs	r2, r1
 8004392:	07d6      	lsls	r6, r2, #31
 8004394:	d547      	bpl.n	8004426 <__sflush_r+0xf6>
 8004396:	2200      	movs	r2, #0
 8004398:	6062      	str	r2, [r4, #4]
 800439a:	04d9      	lsls	r1, r3, #19
 800439c:	6922      	ldr	r2, [r4, #16]
 800439e:	6022      	str	r2, [r4, #0]
 80043a0:	d504      	bpl.n	80043ac <__sflush_r+0x7c>
 80043a2:	1c42      	adds	r2, r0, #1
 80043a4:	d101      	bne.n	80043aa <__sflush_r+0x7a>
 80043a6:	682b      	ldr	r3, [r5, #0]
 80043a8:	b903      	cbnz	r3, 80043ac <__sflush_r+0x7c>
 80043aa:	6560      	str	r0, [r4, #84]	; 0x54
 80043ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043ae:	602f      	str	r7, [r5, #0]
 80043b0:	2900      	cmp	r1, #0
 80043b2:	d0ca      	beq.n	800434a <__sflush_r+0x1a>
 80043b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043b8:	4299      	cmp	r1, r3
 80043ba:	d002      	beq.n	80043c2 <__sflush_r+0x92>
 80043bc:	4628      	mov	r0, r5
 80043be:	f000 f8e1 	bl	8004584 <_free_r>
 80043c2:	2000      	movs	r0, #0
 80043c4:	6360      	str	r0, [r4, #52]	; 0x34
 80043c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043ca:	6a21      	ldr	r1, [r4, #32]
 80043cc:	2301      	movs	r3, #1
 80043ce:	4628      	mov	r0, r5
 80043d0:	47b0      	blx	r6
 80043d2:	1c41      	adds	r1, r0, #1
 80043d4:	d1c6      	bne.n	8004364 <__sflush_r+0x34>
 80043d6:	682b      	ldr	r3, [r5, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0c3      	beq.n	8004364 <__sflush_r+0x34>
 80043dc:	2b1d      	cmp	r3, #29
 80043de:	d001      	beq.n	80043e4 <__sflush_r+0xb4>
 80043e0:	2b16      	cmp	r3, #22
 80043e2:	d101      	bne.n	80043e8 <__sflush_r+0xb8>
 80043e4:	602f      	str	r7, [r5, #0]
 80043e6:	e7b0      	b.n	800434a <__sflush_r+0x1a>
 80043e8:	89a3      	ldrh	r3, [r4, #12]
 80043ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043ee:	81a3      	strh	r3, [r4, #12]
 80043f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043f4:	690f      	ldr	r7, [r1, #16]
 80043f6:	2f00      	cmp	r7, #0
 80043f8:	d0a7      	beq.n	800434a <__sflush_r+0x1a>
 80043fa:	0793      	lsls	r3, r2, #30
 80043fc:	680e      	ldr	r6, [r1, #0]
 80043fe:	bf08      	it	eq
 8004400:	694b      	ldreq	r3, [r1, #20]
 8004402:	600f      	str	r7, [r1, #0]
 8004404:	bf18      	it	ne
 8004406:	2300      	movne	r3, #0
 8004408:	eba6 0807 	sub.w	r8, r6, r7
 800440c:	608b      	str	r3, [r1, #8]
 800440e:	f1b8 0f00 	cmp.w	r8, #0
 8004412:	dd9a      	ble.n	800434a <__sflush_r+0x1a>
 8004414:	4643      	mov	r3, r8
 8004416:	463a      	mov	r2, r7
 8004418:	6a21      	ldr	r1, [r4, #32]
 800441a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800441c:	4628      	mov	r0, r5
 800441e:	47b0      	blx	r6
 8004420:	2800      	cmp	r0, #0
 8004422:	dc07      	bgt.n	8004434 <__sflush_r+0x104>
 8004424:	89a3      	ldrh	r3, [r4, #12]
 8004426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800442a:	81a3      	strh	r3, [r4, #12]
 800442c:	f04f 30ff 	mov.w	r0, #4294967295
 8004430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004434:	4407      	add	r7, r0
 8004436:	eba8 0800 	sub.w	r8, r8, r0
 800443a:	e7e8      	b.n	800440e <__sflush_r+0xde>
 800443c:	20400001 	.word	0x20400001

08004440 <_fflush_r>:
 8004440:	b538      	push	{r3, r4, r5, lr}
 8004442:	690b      	ldr	r3, [r1, #16]
 8004444:	4605      	mov	r5, r0
 8004446:	460c      	mov	r4, r1
 8004448:	b1db      	cbz	r3, 8004482 <_fflush_r+0x42>
 800444a:	b118      	cbz	r0, 8004454 <_fflush_r+0x14>
 800444c:	6983      	ldr	r3, [r0, #24]
 800444e:	b90b      	cbnz	r3, 8004454 <_fflush_r+0x14>
 8004450:	f7ff fa7a 	bl	8003948 <__sinit>
 8004454:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <_fflush_r+0x48>)
 8004456:	429c      	cmp	r4, r3
 8004458:	d109      	bne.n	800446e <_fflush_r+0x2e>
 800445a:	686c      	ldr	r4, [r5, #4]
 800445c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004460:	b17b      	cbz	r3, 8004482 <_fflush_r+0x42>
 8004462:	4621      	mov	r1, r4
 8004464:	4628      	mov	r0, r5
 8004466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800446a:	f7ff bf61 	b.w	8004330 <__sflush_r>
 800446e:	4b07      	ldr	r3, [pc, #28]	; (800448c <_fflush_r+0x4c>)
 8004470:	429c      	cmp	r4, r3
 8004472:	d101      	bne.n	8004478 <_fflush_r+0x38>
 8004474:	68ac      	ldr	r4, [r5, #8]
 8004476:	e7f1      	b.n	800445c <_fflush_r+0x1c>
 8004478:	4b05      	ldr	r3, [pc, #20]	; (8004490 <_fflush_r+0x50>)
 800447a:	429c      	cmp	r4, r3
 800447c:	bf08      	it	eq
 800447e:	68ec      	ldreq	r4, [r5, #12]
 8004480:	e7ec      	b.n	800445c <_fflush_r+0x1c>
 8004482:	2000      	movs	r0, #0
 8004484:	bd38      	pop	{r3, r4, r5, pc}
 8004486:	bf00      	nop
 8004488:	080047ec 	.word	0x080047ec
 800448c:	0800480c 	.word	0x0800480c
 8004490:	080047cc 	.word	0x080047cc

08004494 <_lseek_r>:
 8004494:	b538      	push	{r3, r4, r5, lr}
 8004496:	4c07      	ldr	r4, [pc, #28]	; (80044b4 <_lseek_r+0x20>)
 8004498:	4605      	mov	r5, r0
 800449a:	4608      	mov	r0, r1
 800449c:	4611      	mov	r1, r2
 800449e:	2200      	movs	r2, #0
 80044a0:	6022      	str	r2, [r4, #0]
 80044a2:	461a      	mov	r2, r3
 80044a4:	f000 f908 	bl	80046b8 <_lseek>
 80044a8:	1c43      	adds	r3, r0, #1
 80044aa:	d102      	bne.n	80044b2 <_lseek_r+0x1e>
 80044ac:	6823      	ldr	r3, [r4, #0]
 80044ae:	b103      	cbz	r3, 80044b2 <_lseek_r+0x1e>
 80044b0:	602b      	str	r3, [r5, #0]
 80044b2:	bd38      	pop	{r3, r4, r5, pc}
 80044b4:	200029b8 	.word	0x200029b8

080044b8 <__swhatbuf_r>:
 80044b8:	b570      	push	{r4, r5, r6, lr}
 80044ba:	460e      	mov	r6, r1
 80044bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044c0:	2900      	cmp	r1, #0
 80044c2:	b090      	sub	sp, #64	; 0x40
 80044c4:	4614      	mov	r4, r2
 80044c6:	461d      	mov	r5, r3
 80044c8:	da07      	bge.n	80044da <__swhatbuf_r+0x22>
 80044ca:	2300      	movs	r3, #0
 80044cc:	602b      	str	r3, [r5, #0]
 80044ce:	89b3      	ldrh	r3, [r6, #12]
 80044d0:	061a      	lsls	r2, r3, #24
 80044d2:	d410      	bmi.n	80044f6 <__swhatbuf_r+0x3e>
 80044d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044d8:	e00e      	b.n	80044f8 <__swhatbuf_r+0x40>
 80044da:	aa01      	add	r2, sp, #4
 80044dc:	f000 f8b2 	bl	8004644 <_fstat_r>
 80044e0:	2800      	cmp	r0, #0
 80044e2:	dbf2      	blt.n	80044ca <__swhatbuf_r+0x12>
 80044e4:	9a02      	ldr	r2, [sp, #8]
 80044e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80044ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80044ee:	425a      	negs	r2, r3
 80044f0:	415a      	adcs	r2, r3
 80044f2:	602a      	str	r2, [r5, #0]
 80044f4:	e7ee      	b.n	80044d4 <__swhatbuf_r+0x1c>
 80044f6:	2340      	movs	r3, #64	; 0x40
 80044f8:	2000      	movs	r0, #0
 80044fa:	6023      	str	r3, [r4, #0]
 80044fc:	b010      	add	sp, #64	; 0x40
 80044fe:	bd70      	pop	{r4, r5, r6, pc}

08004500 <__smakebuf_r>:
 8004500:	898b      	ldrh	r3, [r1, #12]
 8004502:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004504:	079d      	lsls	r5, r3, #30
 8004506:	4606      	mov	r6, r0
 8004508:	460c      	mov	r4, r1
 800450a:	d507      	bpl.n	800451c <__smakebuf_r+0x1c>
 800450c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004510:	6023      	str	r3, [r4, #0]
 8004512:	6123      	str	r3, [r4, #16]
 8004514:	2301      	movs	r3, #1
 8004516:	6163      	str	r3, [r4, #20]
 8004518:	b002      	add	sp, #8
 800451a:	bd70      	pop	{r4, r5, r6, pc}
 800451c:	ab01      	add	r3, sp, #4
 800451e:	466a      	mov	r2, sp
 8004520:	f7ff ffca 	bl	80044b8 <__swhatbuf_r>
 8004524:	9900      	ldr	r1, [sp, #0]
 8004526:	4605      	mov	r5, r0
 8004528:	4630      	mov	r0, r6
 800452a:	f7ff fa97 	bl	8003a5c <_malloc_r>
 800452e:	b948      	cbnz	r0, 8004544 <__smakebuf_r+0x44>
 8004530:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004534:	059a      	lsls	r2, r3, #22
 8004536:	d4ef      	bmi.n	8004518 <__smakebuf_r+0x18>
 8004538:	f023 0303 	bic.w	r3, r3, #3
 800453c:	f043 0302 	orr.w	r3, r3, #2
 8004540:	81a3      	strh	r3, [r4, #12]
 8004542:	e7e3      	b.n	800450c <__smakebuf_r+0xc>
 8004544:	4b0d      	ldr	r3, [pc, #52]	; (800457c <__smakebuf_r+0x7c>)
 8004546:	62b3      	str	r3, [r6, #40]	; 0x28
 8004548:	89a3      	ldrh	r3, [r4, #12]
 800454a:	6020      	str	r0, [r4, #0]
 800454c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004550:	81a3      	strh	r3, [r4, #12]
 8004552:	9b00      	ldr	r3, [sp, #0]
 8004554:	6163      	str	r3, [r4, #20]
 8004556:	9b01      	ldr	r3, [sp, #4]
 8004558:	6120      	str	r0, [r4, #16]
 800455a:	b15b      	cbz	r3, 8004574 <__smakebuf_r+0x74>
 800455c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004560:	4630      	mov	r0, r6
 8004562:	f000 f881 	bl	8004668 <_isatty_r>
 8004566:	b128      	cbz	r0, 8004574 <__smakebuf_r+0x74>
 8004568:	89a3      	ldrh	r3, [r4, #12]
 800456a:	f023 0303 	bic.w	r3, r3, #3
 800456e:	f043 0301 	orr.w	r3, r3, #1
 8004572:	81a3      	strh	r3, [r4, #12]
 8004574:	89a3      	ldrh	r3, [r4, #12]
 8004576:	431d      	orrs	r5, r3
 8004578:	81a5      	strh	r5, [r4, #12]
 800457a:	e7cd      	b.n	8004518 <__smakebuf_r+0x18>
 800457c:	080038c9 	.word	0x080038c9

08004580 <__malloc_lock>:
 8004580:	4770      	bx	lr

08004582 <__malloc_unlock>:
 8004582:	4770      	bx	lr

08004584 <_free_r>:
 8004584:	b538      	push	{r3, r4, r5, lr}
 8004586:	4605      	mov	r5, r0
 8004588:	2900      	cmp	r1, #0
 800458a:	d045      	beq.n	8004618 <_free_r+0x94>
 800458c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004590:	1f0c      	subs	r4, r1, #4
 8004592:	2b00      	cmp	r3, #0
 8004594:	bfb8      	it	lt
 8004596:	18e4      	addlt	r4, r4, r3
 8004598:	f7ff fff2 	bl	8004580 <__malloc_lock>
 800459c:	4a1f      	ldr	r2, [pc, #124]	; (800461c <_free_r+0x98>)
 800459e:	6813      	ldr	r3, [r2, #0]
 80045a0:	4610      	mov	r0, r2
 80045a2:	b933      	cbnz	r3, 80045b2 <_free_r+0x2e>
 80045a4:	6063      	str	r3, [r4, #4]
 80045a6:	6014      	str	r4, [r2, #0]
 80045a8:	4628      	mov	r0, r5
 80045aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045ae:	f7ff bfe8 	b.w	8004582 <__malloc_unlock>
 80045b2:	42a3      	cmp	r3, r4
 80045b4:	d90c      	bls.n	80045d0 <_free_r+0x4c>
 80045b6:	6821      	ldr	r1, [r4, #0]
 80045b8:	1862      	adds	r2, r4, r1
 80045ba:	4293      	cmp	r3, r2
 80045bc:	bf04      	itt	eq
 80045be:	681a      	ldreq	r2, [r3, #0]
 80045c0:	685b      	ldreq	r3, [r3, #4]
 80045c2:	6063      	str	r3, [r4, #4]
 80045c4:	bf04      	itt	eq
 80045c6:	1852      	addeq	r2, r2, r1
 80045c8:	6022      	streq	r2, [r4, #0]
 80045ca:	6004      	str	r4, [r0, #0]
 80045cc:	e7ec      	b.n	80045a8 <_free_r+0x24>
 80045ce:	4613      	mov	r3, r2
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	b10a      	cbz	r2, 80045d8 <_free_r+0x54>
 80045d4:	42a2      	cmp	r2, r4
 80045d6:	d9fa      	bls.n	80045ce <_free_r+0x4a>
 80045d8:	6819      	ldr	r1, [r3, #0]
 80045da:	1858      	adds	r0, r3, r1
 80045dc:	42a0      	cmp	r0, r4
 80045de:	d10b      	bne.n	80045f8 <_free_r+0x74>
 80045e0:	6820      	ldr	r0, [r4, #0]
 80045e2:	4401      	add	r1, r0
 80045e4:	1858      	adds	r0, r3, r1
 80045e6:	4282      	cmp	r2, r0
 80045e8:	6019      	str	r1, [r3, #0]
 80045ea:	d1dd      	bne.n	80045a8 <_free_r+0x24>
 80045ec:	6810      	ldr	r0, [r2, #0]
 80045ee:	6852      	ldr	r2, [r2, #4]
 80045f0:	605a      	str	r2, [r3, #4]
 80045f2:	4401      	add	r1, r0
 80045f4:	6019      	str	r1, [r3, #0]
 80045f6:	e7d7      	b.n	80045a8 <_free_r+0x24>
 80045f8:	d902      	bls.n	8004600 <_free_r+0x7c>
 80045fa:	230c      	movs	r3, #12
 80045fc:	602b      	str	r3, [r5, #0]
 80045fe:	e7d3      	b.n	80045a8 <_free_r+0x24>
 8004600:	6820      	ldr	r0, [r4, #0]
 8004602:	1821      	adds	r1, r4, r0
 8004604:	428a      	cmp	r2, r1
 8004606:	bf04      	itt	eq
 8004608:	6811      	ldreq	r1, [r2, #0]
 800460a:	6852      	ldreq	r2, [r2, #4]
 800460c:	6062      	str	r2, [r4, #4]
 800460e:	bf04      	itt	eq
 8004610:	1809      	addeq	r1, r1, r0
 8004612:	6021      	streq	r1, [r4, #0]
 8004614:	605c      	str	r4, [r3, #4]
 8004616:	e7c7      	b.n	80045a8 <_free_r+0x24>
 8004618:	bd38      	pop	{r3, r4, r5, pc}
 800461a:	bf00      	nop
 800461c:	200028e4 	.word	0x200028e4

08004620 <_read_r>:
 8004620:	b538      	push	{r3, r4, r5, lr}
 8004622:	4c07      	ldr	r4, [pc, #28]	; (8004640 <_read_r+0x20>)
 8004624:	4605      	mov	r5, r0
 8004626:	4608      	mov	r0, r1
 8004628:	4611      	mov	r1, r2
 800462a:	2200      	movs	r2, #0
 800462c:	6022      	str	r2, [r4, #0]
 800462e:	461a      	mov	r2, r3
 8004630:	f000 f84a 	bl	80046c8 <_read>
 8004634:	1c43      	adds	r3, r0, #1
 8004636:	d102      	bne.n	800463e <_read_r+0x1e>
 8004638:	6823      	ldr	r3, [r4, #0]
 800463a:	b103      	cbz	r3, 800463e <_read_r+0x1e>
 800463c:	602b      	str	r3, [r5, #0]
 800463e:	bd38      	pop	{r3, r4, r5, pc}
 8004640:	200029b8 	.word	0x200029b8

08004644 <_fstat_r>:
 8004644:	b538      	push	{r3, r4, r5, lr}
 8004646:	4c07      	ldr	r4, [pc, #28]	; (8004664 <_fstat_r+0x20>)
 8004648:	2300      	movs	r3, #0
 800464a:	4605      	mov	r5, r0
 800464c:	4608      	mov	r0, r1
 800464e:	4611      	mov	r1, r2
 8004650:	6023      	str	r3, [r4, #0]
 8004652:	f000 f821 	bl	8004698 <_fstat>
 8004656:	1c43      	adds	r3, r0, #1
 8004658:	d102      	bne.n	8004660 <_fstat_r+0x1c>
 800465a:	6823      	ldr	r3, [r4, #0]
 800465c:	b103      	cbz	r3, 8004660 <_fstat_r+0x1c>
 800465e:	602b      	str	r3, [r5, #0]
 8004660:	bd38      	pop	{r3, r4, r5, pc}
 8004662:	bf00      	nop
 8004664:	200029b8 	.word	0x200029b8

08004668 <_isatty_r>:
 8004668:	b538      	push	{r3, r4, r5, lr}
 800466a:	4c06      	ldr	r4, [pc, #24]	; (8004684 <_isatty_r+0x1c>)
 800466c:	2300      	movs	r3, #0
 800466e:	4605      	mov	r5, r0
 8004670:	4608      	mov	r0, r1
 8004672:	6023      	str	r3, [r4, #0]
 8004674:	f000 f818 	bl	80046a8 <_isatty>
 8004678:	1c43      	adds	r3, r0, #1
 800467a:	d102      	bne.n	8004682 <_isatty_r+0x1a>
 800467c:	6823      	ldr	r3, [r4, #0]
 800467e:	b103      	cbz	r3, 8004682 <_isatty_r+0x1a>
 8004680:	602b      	str	r3, [r5, #0]
 8004682:	bd38      	pop	{r3, r4, r5, pc}
 8004684:	200029b8 	.word	0x200029b8

08004688 <_close>:
 8004688:	4b02      	ldr	r3, [pc, #8]	; (8004694 <_close+0xc>)
 800468a:	2258      	movs	r2, #88	; 0x58
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	f04f 30ff 	mov.w	r0, #4294967295
 8004692:	4770      	bx	lr
 8004694:	200029b8 	.word	0x200029b8

08004698 <_fstat>:
 8004698:	4b02      	ldr	r3, [pc, #8]	; (80046a4 <_fstat+0xc>)
 800469a:	2258      	movs	r2, #88	; 0x58
 800469c:	601a      	str	r2, [r3, #0]
 800469e:	f04f 30ff 	mov.w	r0, #4294967295
 80046a2:	4770      	bx	lr
 80046a4:	200029b8 	.word	0x200029b8

080046a8 <_isatty>:
 80046a8:	4b02      	ldr	r3, [pc, #8]	; (80046b4 <_isatty+0xc>)
 80046aa:	2258      	movs	r2, #88	; 0x58
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	2000      	movs	r0, #0
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	200029b8 	.word	0x200029b8

080046b8 <_lseek>:
 80046b8:	4b02      	ldr	r3, [pc, #8]	; (80046c4 <_lseek+0xc>)
 80046ba:	2258      	movs	r2, #88	; 0x58
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	f04f 30ff 	mov.w	r0, #4294967295
 80046c2:	4770      	bx	lr
 80046c4:	200029b8 	.word	0x200029b8

080046c8 <_read>:
 80046c8:	4b02      	ldr	r3, [pc, #8]	; (80046d4 <_read+0xc>)
 80046ca:	2258      	movs	r2, #88	; 0x58
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	f04f 30ff 	mov.w	r0, #4294967295
 80046d2:	4770      	bx	lr
 80046d4:	200029b8 	.word	0x200029b8

080046d8 <_sbrk>:
 80046d8:	4b04      	ldr	r3, [pc, #16]	; (80046ec <_sbrk+0x14>)
 80046da:	6819      	ldr	r1, [r3, #0]
 80046dc:	4602      	mov	r2, r0
 80046de:	b909      	cbnz	r1, 80046e4 <_sbrk+0xc>
 80046e0:	4903      	ldr	r1, [pc, #12]	; (80046f0 <_sbrk+0x18>)
 80046e2:	6019      	str	r1, [r3, #0]
 80046e4:	6818      	ldr	r0, [r3, #0]
 80046e6:	4402      	add	r2, r0
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	4770      	bx	lr
 80046ec:	200028ec 	.word	0x200028ec
 80046f0:	200029bc 	.word	0x200029bc

080046f4 <_init>:
 80046f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f6:	bf00      	nop
 80046f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046fa:	bc08      	pop	{r3}
 80046fc:	469e      	mov	lr, r3
 80046fe:	4770      	bx	lr

08004700 <_fini>:
 8004700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004702:	bf00      	nop
 8004704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004706:	bc08      	pop	{r3}
 8004708:	469e      	mov	lr, r3
 800470a:	4770      	bx	lr
